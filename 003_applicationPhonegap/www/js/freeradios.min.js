var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var di;
        (function (di) {
            var DIContainer = (function () {
                function DIContainer() {
                }
                DIContainer.bindValue = function (key, value) {
                    this._values[key] = value;
                };
                DIContainer.bindConstructor = function (fullClassNamespace, value) {
                    this._constructors[fullClassNamespace] = value;
                };
                DIContainer.bindFactory = function (fullClassNamespace, value) {
                    this._factories[fullClassNamespace] = value;
                };
                DIContainer.get = function (key, parameter) {
                    if (this._values[key] !== undefined) {
                        return this._values[key];
                    }
                    else if (this._constructors[key] !== undefined) {
                        return new this._constructors[key]();
                    }
                    else if (this._factories[key] !== undefined) {
                        return this._factories[key]();
                    }
                    else if (parameter !== undefined) {
                        return parameter;
                    }
                    throw "No parameter or binding given for \"" + key + "\".";
                };
                DIContainer._factories = {};
                DIContainer._constructors = {};
                DIContainer._values = {};
                return DIContainer;
            }());
            di.DIContainer = DIContainer;
        })(di = utilities.di || (utilities.di = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var database;
        (function (database) {
            var PreparedStatement = (function () {
                function PreparedStatement(dbContext, query) {
                    this._dbContext = dbContext;
                    this._query = query;
                    this._bindings = {};
                }
                PreparedStatement.prototype.bindValue = function (key, value) {
                    this._bindings[key] = value;
                };
                PreparedStatement.prototype.parseQuery = function () {
                    var parsedQuery = this._query;
                    for (var key in this._bindings) {
                        parsedQuery = parsedQuery.replace(key, this._dbContext.prepareValue(this._bindings[key]));
                    }
                    return parsedQuery;
                };
                PreparedStatement.prototype.executeNonResults = function (callback) {
                    this._dbContext.executeNonResults(this, callback);
                };
                PreparedStatement.prototype.executeWithResults = function (callback) {
                    this._dbContext.executeWithResults(this, callback);
                };
                return PreparedStatement;
            }());
            database.PreparedStatement = PreparedStatement;
        })(database = utilities.database || (utilities.database = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var database;
        (function (database) {
            var cordovasqlitestorage;
            (function (cordovasqlitestorage) {
                var CSSDBResult = (function () {
                    function CSSDBResult(resultSet) {
                        this._resultSet = resultSet;
                        this._row = null;
                        this._index = -1;
                        this._length = this._resultSet.rows.length;
                    }
                    CSSDBResult.prototype.hasNext = function () {
                        return this._length > 0 && this._index < this._length;
                    };
                    CSSDBResult.prototype.next = function () {
                        ++this._index;
                        if (this.hasNext()) {
                            this._row = this._resultSet.rows.item(this._index);
                            return true;
                        }
                        else {
                            this._row = null;
                            return false;
                        }
                    };
                    CSSDBResult.prototype.getValue = function (columnName) {
                        if (this._row !== null) {
                            if (this._row[columnName] !== undefined) {
                                return String(this._row[columnName]);
                            }
                            throw "Unknown column \"" + columnName + "\".";
                        }
                        throw "Result set not positioned at a valid record.";
                    };
                    return CSSDBResult;
                }());
                cordovasqlitestorage.CSSDBResult = CSSDBResult;
            })(cordovasqlitestorage = database.cordovasqlitestorage || (database.cordovasqlitestorage = {}));
        })(database = utilities.database || (utilities.database = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var database;
        (function (database) {
            var cordovasqlitestorage;
            (function (cordovasqlitestorage) {
                var CSSDBContext = (function () {
                    function CSSDBContext(databaseFileName) {
                        CSSDBContext._db = window.sqlitePlugin.openDatabase({ name: databaseFileName, location: 'default', createFromLocation: 1 });
                        this._lastInsertID = -1;
                        this._inTransaction = false;
                        this._statements = [];
                    }
                    CSSDBContext.prototype.open = function () {
                    };
                    CSSDBContext.prototype.close = function () {
                    };
                    CSSDBContext.prototype.query = function (query) {
                        return new database.PreparedStatement(this, query);
                    };
                    CSSDBContext.prototype.beginTransaction = function () {
                        this._statements = [];
                        this._inTransaction = true;
                    };
                    CSSDBContext.prototype.commitTransaction = function (callback) {
                        (function (self) {
                            CSSDBContext._db.transaction(function (tx) {
                                self._transactionNextStatement(tx, self._statements, 0, self._statements.length, function () {
                                    self._statements = [];
                                    self._inTransaction = false;
                                    callback(true);
                                });
                            }, function (e) {
                                self._statements = [];
                                self._inTransaction = false;
                                callback(false);
                                throw e;
                            });
                        }(this));
                    };
                    CSSDBContext.prototype.executeNonResults = function (statement, callback) {
                        if (this._inTransaction) {
                            this._statements.push(statement);
                        }
                        else {
                            var query = statement.parseQuery();
                            (function (self) {
                                CSSDBContext._db.transaction(function (tx) {
                                    tx.executeSql(query, [], function (tx, res) {
                                        if (res.insertId && res.insertId > 0) {
                                            self._lastInsertID = res.insertId;
                                        }
                                        callback(true);
                                    });
                                }, function (e) {
                                    callback(false);
                                    throw e;
                                });
                            }(this));
                        }
                    };
                    CSSDBContext.prototype.executeWithResults = function (statement, callback) {
                        var query = statement.parseQuery();
                        (function (self) {
                            CSSDBContext._db.transaction(function (tx) {
                                tx.executeSql(query, [], function (tx, res) {
                                    callback(new cordovasqlitestorage.CSSDBResult(res));
                                });
                            }, function (e) {
                                callback(null);
                                throw e;
                            });
                        }(this));
                    };
                    CSSDBContext.prototype.lastRowID = function () {
                        return this._lastInsertID;
                    };
                    CSSDBContext.prototype.prepareValue = function (value) {
                        var valueType = typeof value;
                        switch (valueType) {
                            case "string":
                                return "'" + String(value).replace(/'/g, "''") + "'";
                            case "number":
                                return value;
                            case "boolean":
                                return value === true ? "1" : "0";
                            default:
                                if (value instanceof Date) {
                                    return "'" + String(value).replace(/'/g, "''") + "'";
                                }
                                else {
                                    return "'" + JSON.stringify(value) + "'";
                                }
                        }
                    };
                    CSSDBContext.prototype._transactionNextStatement = function (tx, statements, index, length, callback) {
                        if (index >= length) {
                            callback();
                        }
                        else {
                            var query = statements[index].parseQuery();
                            (function (self) {
                                tx.executeSql(query, [], function (tx, res) {
                                    if (res.insertId && res.insertId > 0) {
                                        self._lastInsertID = res.insertId;
                                    }
                                    self._transactionNextStatement(tx, statements, index + 1, length, callback);
                                });
                            }(this));
                        }
                    };
                    return CSSDBContext;
                }());
                cordovasqlitestorage.CSSDBContext = CSSDBContext;
            })(cordovasqlitestorage = database.cordovasqlitestorage || (database.cordovasqlitestorage = {}));
        })(database = utilities.database || (utilities.database = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var entities;
        (function (entities) {
            var station;
            (function (station) {
                var StationEntity = (function () {
                    function StationEntity() {
                    }
                    return StationEntity;
                }());
                station.StationEntity = StationEntity;
            })(station = entities.station || (entities.station = {}));
        })(entities = business.entities || (business.entities = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_web_mock;
    (function (dal_web_mock) {
        var station;
        (function (station) {
            var entities = freeradios.business.entities.station;
            var MockStationWebRepository = (function () {
                function MockStationWebRepository() {
                }
                MockStationWebRepository.prototype.getStationList = function (callback, errorCallback) {
                    var stations = new Array();
                    stations[0] = new entities.StationEntity();
                    stations[0].id = 0;
                    stations[0].lastUpdate = new Date('2015-03-09T12:55:00.6875000+02:00');
                    stations[0].name = 'Radio StHörfunk';
                    stations[0].city = 'Schwäbisch Hallo';
                    stations[0].xmlURI = '/data/station.xml';
                    stations[0].frequency = '97.5';
                    stations[0].latitude = 48.466813;
                    stations[0].longitude = 9.410399;
                    stations[0].streamURL = 'http://stream.sthoerfunk.de:7000/sthoerfunk.ogg';
                    stations[1] = new entities.StationEntity();
                    stations[1].id = 1;
                    stations[1].lastUpdate = new Date('2015-03-09T12:55:00.6875000+02:00');
                    stations[1].name = 'FluxFM';
                    stations[1].city = 'Stuttgart';
                    stations[1].xmlURI = '/data/station2.xml';
                    stations[1].frequency = '99.2';
                    stations[1].latitude = 46.266813;
                    stations[1].longitude = 7.210399;
                    stations[1].streamURL = 'http://fluxfm.radio.de/';
                    stations[2] = new entities.StationEntity();
                    stations[2].id = 2;
                    stations[2].lastUpdate = new Date('2015-03-09T12:55:00.6875000+02:00');
                    stations[2].name = 'Free FM';
                    stations[2].city = 'Ulm';
                    stations[2].xmlURI = '/data/station3.xml';
                    stations[2].frequency = '126,4';
                    stations[2].latitude = 49.810399;
                    stations[2].longitude = 8.950399;
                    stations[2].streamURL = 'http://stream.freefm.de:8100/listen.pls';
                    callback(stations);
                };
                return MockStationWebRepository;
            }());
            station.MockStationWebRepository = MockStationWebRepository;
        })(station = dal_web_mock.station || (dal_web_mock.station = {}));
    })(dal_web_mock = freeradios.dal_web_mock || (freeradios.dal_web_mock = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_web;
    (function (dal_web) {
        var station;
        (function (station_1) {
            var entities = freeradios.business.entities.station;
            var AJAXStationWebRepository = (function () {
                function AJAXStationWebRepository(url) {
                    this._url = url;
                }
                AJAXStationWebRepository.prototype.getStationList = function (callback, errorCallback) {
                    (function (self) {
                        $.ajax({
                            url: self._url,
                            type: "GET",
                            dataType: "xml",
                            cache: false,
                            success: function (data) {
                                callback(self._buildEntities($(data)));
                            },
                            error: function () {
                                callback([]);
                            }
                        });
                    }(this));
                };
                AJAXStationWebRepository.prototype._buildEntities = function (xml) {
                    var stations = new Array();
                    var self = this;
                    xml.find("station").each(function () {
                        var stationNode = $(this);
                        var station = new entities.StationEntity();
                        station.lastUpdate = new Date(stationNode.attr("lastupdate"));
                        station.id = parseInt(stationNode.attr("id"), 10);
                        station.name = stationNode.find("name").text();
                        station.city = stationNode.find("city").text();
                        station.xmlURI = stationNode.find("xmluri").text();
                        station.frequency = self._checkForMoreThanOneFrequency(stationNode);
                        var geoPosString = stationNode.find("gml\\:pos, pos").text();
                        if (geoPosString != null) {
                            var positionLat;
                            var positionLong;
                            var positions = geoPosString.split(" ");
                            positionLat = positions[0];
                            positionLong = positions[1];
                            station.latitude = positionLat;
                            station.longitude = positionLong;
                        }
                        else {
                            station.latitude = parseFloat(stationNode.find("lat").text());
                            station.longitude = parseFloat(stationNode.find("lng").text());
                        }
                        station.streamURL = stationNode.find("streamurl").text();
                        stations.push(station);
                    });
                    return stations;
                };
                AJAXStationWebRepository.prototype._checkForMoreThanOneFrequency = function (stationNode) {
                    var firstFrequency = stationNode.find("frequency:first").text();
                    if (stationNode.find("frequency").text() == firstFrequency) {
                        return firstFrequency;
                    }
                    else {
                        return firstFrequency + " | " + stationNode.find("frequency").text().substring(firstFrequency.length, stationNode.find("frequency").text().length);
                    }
                };
                return AJAXStationWebRepository;
            }());
            station_1.AJAXStationWebRepository = AJAXStationWebRepository;
        })(station = dal_web.station || (dal_web.station = {}));
    })(dal_web = freeradios.dal_web || (freeradios.dal_web = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local_mock;
    (function (dal_local_mock) {
        var station;
        (function (station_2) {
            var MockStationLocalRepository = (function () {
                function MockStationLocalRepository() {
                }
                MockStationLocalRepository.prototype.saveStationArray = function (stations, callback) {
                    callback(true);
                };
                MockStationLocalRepository.prototype.saveStation = function (station, callback) {
                    callback(true);
                };
                MockStationLocalRepository.prototype.deleteAll = function (callback) {
                    callback(true);
                };
                MockStationLocalRepository.prototype.getByID = function (id, callback) {
                    this.getStationList(function (stations) {
                        for (var i = 0, length = stations.length; i < length; ++i) {
                            var currentStation = stations[i];
                            if (currentStation.id === id) {
                                callback(currentStation);
                                return;
                            }
                        }
                        callback(null);
                    });
                };
                MockStationLocalRepository.prototype.getStationList = function (callback) {
                    callback(MockStationLocalRepository._stations);
                };
                MockStationLocalRepository.prototype.searchInNameAndCity = function (searchText, callback) {
                    this.getStationList(function (stations) {
                        var searchRegExp = new RegExp(searchText, 'i');
                        var filteredStations = new Array();
                        for (var i = 0, length = stations.length; i < length; ++i) {
                            var currentStation = stations[i];
                            if (searchRegExp.test(currentStation.name) || searchRegExp.test(currentStation.city)) {
                                filteredStations.push(currentStation);
                            }
                        }
                        callback(filteredStations);
                    });
                };
                MockStationLocalRepository._stations = [
                    {
                        id: 1,
                        lastUpdate: new Date('2015-03-09T12:55:00.6875000+02:00'),
                        name: 'FluxFM',
                        city: 'Stuttgart',
                        xmlURI: '/data/station2.xml',
                        frequency: '99.2',
                        latitude: 46.266813,
                        longitude: 7.210399,
                        streamURL: 'http://fluxfm.radio.de/'
                    },
                    {
                        id: 2,
                        lastUpdate: new Date('2015-03-09T12:55:00.6875000+02:00'),
                        name: 'Free FM',
                        city: 'Ulm',
                        xmlURI: '/data/station3.xml',
                        frequency: '126,4',
                        latitude: 49.810399,
                        longitude: 8.950399,
                        streamURL: 'http://stream.freefm.de:8100/listen.pls'
                    },
                    {
                        id: 0,
                        lastUpdate: new Date('2015-03-09T12:55:00.6875000+02:00'),
                        name: 'Radio StHörfunk',
                        city: 'Schwäbisch Hallo',
                        xmlURI: '/data/station.xml',
                        frequency: '97.5',
                        latitude: 48.466813,
                        longitude: 9.410399,
                        streamURL: 'http://stream.sthoerfunk.de:7000/sthoerfunk.ogg'
                    }
                ];
                return MockStationLocalRepository;
            }());
            station_2.MockStationLocalRepository = MockStationLocalRepository;
        })(station = dal_local_mock.station || (dal_local_mock.station = {}));
    })(dal_local_mock = freeradios.dal_local_mock || (freeradios.dal_local_mock = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local;
    (function (dal_local) {
        var di = freeradios.utilities.di;
        var BaseSQLRepository = (function () {
            function BaseSQLRepository(context) {
                this._context = di.DIContainer.get("freeradios.utilities.database.ISQLContext", context);
            }
            BaseSQLRepository.prototype.getContext = function () {
                return this._context;
            };
            BaseSQLRepository.prototype.getSingleWithStatement = function (statement, entityFactory, callback) {
                statement.executeWithResults(function (results) {
                    if (results === null || !results.hasNext()) {
                        callback(null);
                    }
                    else {
                        results.next();
                        callback(entityFactory(results));
                    }
                });
            };
            BaseSQLRepository.prototype.getListWithStatement = function (statement, entityFactory, callback) {
                statement.executeWithResults(function (results) {
                    if (results === null) {
                        callback(null);
                    }
                    else {
                        var entityArray = new Array();
                        while (results.next()) {
                            entityArray.push(entityFactory(results));
                        }
                        callback(entityArray);
                    }
                });
            };
            return BaseSQLRepository;
        }());
        dal_local.BaseSQLRepository = BaseSQLRepository;
    })(dal_local = freeradios.dal_local || (freeradios.dal_local = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local;
    (function (dal_local) {
        var station;
        (function (station_3) {
            var entities = freeradios.business.entities.station;
            var SQLStationLocalRepository = (function (_super) {
                __extends(SQLStationLocalRepository, _super);
                function SQLStationLocalRepository() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SQLStationLocalRepository.prototype.saveStationArray = function (stations, callback) {
                    this.getContext().beginTransaction();
                    for (var i = 0, length = stations.length; i < length; ++i) {
                        this.saveStation(stations[i], function (success) { });
                    }
                    this.getContext().commitTransaction(function (success) {
                        callback(success);
                    });
                };
                SQLStationLocalRepository.prototype.saveStation = function (station, callback) {
                    if (isNaN(station.id)) {
                        return;
                    }
                    var query = "INSERT INTO stations "
                        + "(stations_id, stations_lastupdate, stations_name, stations_city, stations_xmluri, stations_frequency, stations_latitude, stations_longitude, stations_streamurl) VALUES "
                        + "(:STATIONSID, :STATIONSLASTUPDATE, :STATIONSNAME, :STATIONSCITY, :STATIONSXMLURI, :STATIONSFREQUENCY, :STATIONSLATITUDE, :STATIONSLONGITUDE, :STATIONSSTREAMURL);";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":STATIONSID", station.id);
                    statement.bindValue(":STATIONSLASTUPDATE", station.lastUpdate || new Date(0));
                    statement.bindValue(":STATIONSNAME", station.name || "");
                    statement.bindValue(":STATIONSCITY", station.city || "");
                    statement.bindValue(":STATIONSXMLURI", station.xmlURI || "");
                    statement.bindValue(":STATIONSFREQUENCY", station.frequency || "");
                    statement.bindValue(":STATIONSLATITUDE", station.latitude || 0);
                    statement.bindValue(":STATIONSLONGITUDE", station.longitude || 0);
                    statement.bindValue(":STATIONSSTREAMURL", station.streamURL || "");
                    this.getContext().executeNonResults(statement, callback);
                };
                SQLStationLocalRepository.prototype.deleteAll = function (callback) {
                    var statement = this.getContext().query("DELETE FROM stations WHERE 1;");
                    this.getContext().executeNonResults(statement, callback);
                };
                SQLStationLocalRepository.prototype.getByID = function (id, callback) {
                    var statement = this.getContext().query("SELECT * FROM stations WHERE stations_id=:STATIONSID;");
                    statement.bindValue(":STATIONSID", id);
                    this.getSingleWithStatement(statement, this._getStationFromSQLResults, callback);
                };
                SQLStationLocalRepository.prototype.getStationList = function (callback) {
                    var statement = this.getContext().query("SELECT * FROM stations ORDER BY stations_name COLLATE NOCASE;");
                    this.getListWithStatement(statement, this._getStationFromSQLResults, callback);
                };
                SQLStationLocalRepository.prototype.searchInNameAndCity = function (searchText, callback) {
                    var statement = this.getContext().query("SELECT * FROM stations WHERE stations_name LIKE :STATIONSNAME OR stations_city LIKE :STATIONSCITY ORDER BY stations_name COLLATE NOCASE;");
                    statement.bindValue(":STATIONSNAME", "%" + searchText + "%");
                    statement.bindValue(":STATIONSCITY", "%" + searchText + "%");
                    this.getListWithStatement(statement, this._getStationFromSQLResults, callback);
                };
                SQLStationLocalRepository.prototype._getStationFromSQLResults = function (results) {
                    var station = new entities.StationEntity();
                    station.id = parseInt(results.getValue("stations_id"), 10);
                    station.lastUpdate = new Date(results.getValue("stations_lastupdate"));
                    station.name = results.getValue("stations_name");
                    station.city = results.getValue("stations_city");
                    station.xmlURI = results.getValue("stations_xmluri");
                    station.frequency = results.getValue("stations_frequency");
                    station.latitude = parseFloat(results.getValue("stations_latitude"));
                    station.longitude = parseFloat(results.getValue("stations_longitude"));
                    station.streamURL = results.getValue("stations_streamurl");
                    return station;
                };
                return SQLStationLocalRepository;
            }(dal_local.BaseSQLRepository));
            station_3.SQLStationLocalRepository = SQLStationLocalRepository;
        })(station = dal_local.station || (dal_local.station = {}));
    })(dal_local = freeradios.dal_local || (freeradios.dal_local = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var entities;
        (function (entities) {
            var stationdetail;
            (function (stationdetail) {
                var BroadcastsEntity = (function () {
                    function BroadcastsEntity() {
                    }
                    return BroadcastsEntity;
                }());
                stationdetail.BroadcastsEntity = BroadcastsEntity;
            })(stationdetail = entities.stationdetail || (entities.stationdetail = {}));
        })(entities = business.entities || (business.entities = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var entities;
        (function (entities) {
            var stationdetail;
            (function (stationdetail) {
                var Broadcasts2CategoriesEntity = (function () {
                    function Broadcasts2CategoriesEntity() {
                    }
                    return Broadcasts2CategoriesEntity;
                }());
                stationdetail.Broadcasts2CategoriesEntity = Broadcasts2CategoriesEntity;
            })(stationdetail = entities.stationdetail || (entities.stationdetail = {}));
        })(entities = business.entities || (business.entities = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var entities;
        (function (entities) {
            var stationdetail;
            (function (stationdetail) {
                var MediaChannelsEntity = (function () {
                    function MediaChannelsEntity() {
                    }
                    return MediaChannelsEntity;
                }());
                stationdetail.MediaChannelsEntity = MediaChannelsEntity;
            })(stationdetail = entities.stationdetail || (entities.stationdetail = {}));
        })(entities = business.entities || (business.entities = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var entities;
        (function (entities) {
            var stationdetail;
            (function (stationdetail) {
                var StationDetailEntity = (function () {
                    function StationDetailEntity() {
                    }
                    return StationDetailEntity;
                }());
                stationdetail.StationDetailEntity = StationDetailEntity;
            })(stationdetail = entities.stationdetail || (entities.stationdetail = {}));
        })(entities = business.entities || (business.entities = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var entities;
        (function (entities) {
            var stationdetail;
            (function (stationdetail) {
                var enums;
                (function (enums) {
                    var TransmitTimesTimeType;
                    (function (TransmitTimesTimeType) {
                        TransmitTimesTimeType[TransmitTimesTimeType["weekly"] = 0] = "weekly";
                        TransmitTimesTimeType[TransmitTimesTimeType["weekOfMonth"] = 1] = "weekOfMonth";
                        TransmitTimesTimeType[TransmitTimesTimeType["daily"] = 2] = "daily";
                        TransmitTimesTimeType[TransmitTimesTimeType["once"] = 3] = "once";
                    })(TransmitTimesTimeType = enums.TransmitTimesTimeType || (enums.TransmitTimesTimeType = {}));
                })(enums = stationdetail.enums || (stationdetail.enums = {}));
            })(stationdetail = entities.stationdetail || (entities.stationdetail = {}));
        })(entities = business.entities || (business.entities = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var entities;
        (function (entities) {
            var stationdetail;
            (function (stationdetail) {
                var TransmitTimesEntity = (function () {
                    function TransmitTimesEntity() {
                    }
                    return TransmitTimesEntity;
                }());
                stationdetail.TransmitTimesEntity = TransmitTimesEntity;
            })(stationdetail = entities.stationdetail || (entities.stationdetail = {}));
        })(entities = business.entities || (business.entities = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var entities;
        (function (entities) {
            var stationdetail;
            (function (stationdetail) {
                var WebstreamsEntity = (function () {
                    function WebstreamsEntity() {
                    }
                    return WebstreamsEntity;
                }());
                stationdetail.WebstreamsEntity = WebstreamsEntity;
            })(stationdetail = entities.stationdetail || (entities.stationdetail = {}));
        })(entities = business.entities || (business.entities = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var entities;
        (function (entities) {
            var stationdetail;
            (function (stationdetail) {
                var CategoriesEntity = (function () {
                    function CategoriesEntity() {
                    }
                    return CategoriesEntity;
                }());
                stationdetail.CategoriesEntity = CategoriesEntity;
            })(stationdetail = entities.stationdetail || (entities.stationdetail = {}));
        })(entities = business.entities || (business.entities = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_web_mock;
    (function (dal_web_mock) {
        var stationdetail;
        (function (stationdetail) {
            var entities = freeradios.business.entities.stationdetail;
            var MockStationDetailWebRepository = (function () {
                function MockStationDetailWebRepository() {
                }
                MockStationDetailWebRepository.prototype.loadData = function (dataURL, callback, errorCallback) {
                    callback();
                };
                MockStationDetailWebRepository.prototype.getBroadcasts2CategoriesEntity = function (categoryNames2Categories, stationID) {
                    var entityArray = [
                        { broadcastsID: 10, categoriesID: categoryNames2Categories['Alternative'].id || 0, stationID: stationID },
                        { broadcastsID: 10, categoriesID: categoryNames2Categories['World'].id || 0, stationID: stationID }
                    ];
                    return entityArray;
                };
                MockStationDetailWebRepository.prototype.getBroadcastsEntities = function (stationID) {
                    var entityArray = [
                        { id: 10, stationID: stationID, title: 'Hrvatska Glazba', description: 'kroatische Musik', isFavorite: false }
                    ];
                    return entityArray;
                };
                MockStationDetailWebRepository.prototype.getMediaChannelsEntities = function (stationID) {
                    var entityArray = [
                        {
                            stationID: stationID,
                            type: 'ukw',
                            frequency: '100,1',
                            frequencyUnit: 'MHz',
                            city: 'Freudenstadt',
                            operator: 'MediaBroadcast',
                            power: '1',
                            powerUnit: 'kW',
                            rdsid: 'FDS100,1',
                            transmitTimesFrom: '00:00:00',
                            transmitTimesTo: '23:59:59',
                            latitude: 48.44519,
                            longitude: 8.530226,
                            transmitterReceptionArea: '48.494866 8.417647 48.539524 8.437176 48.538778 8.492046 48.594002 8.602148 48.526676 8.649936 48.449179 8.692174 48.392013 8.545043 48.326153 8.564997 48.310266 8.368171 48.461093 8.401893 48.494866 8.417647'
                        }
                    ];
                    return entityArray;
                };
                MockStationDetailWebRepository.prototype.getStationDetailEntity = function (stationID) {
                    var entity = {
                        stationID: stationID,
                        displayName: 'Radio StHörfunk',
                        fullName: 'Radio StHörfunk',
                        logoSource: '/img/05_other/logos/05.3_logo-sthoerfunk.png',
                        baseColor: '#0D2C5A',
                        city: 'Freudenstadt',
                        studioStreet: 'Forststrasse',
                        studioStreetNumber: '23',
                        studioCity: 'Freudenstadt',
                        studioZIP: '72250',
                        latitude: 48.466813,
                        longitude: 8.410399,
                        studioStudioPhone: '+49 7441 88 22 2',
                        studioOfficePhone: '+49 7441 88 22 1',
                        studioStudioEMail: 'info@radio-fds.de',
                        studioOfficeEMail: 'info@radio-fds.de',
                        studioOpenTimeFrom: '12:00:00',
                        studioOpenTimeTo: '18:00:00',
                        website: 'http://www.radio-fds.de',
                        lastUpdate: new Date('2015-03-09T12:55:00.6875000+02:00')
                    };
                    return entity;
                };
                MockStationDetailWebRepository.prototype.getTransmitTimeEntities = function (stationID) {
                    var entityArray = [
                        {
                            stationID: stationID,
                            broadcastsID: 10,
                            recurrence: true,
                            rerun: false,
                            day: 'FR',
                            priority: 0,
                            timeFrom: '18:00:00',
                            timeTo: '19:00:00',
                            week1: false,
                            week2: false,
                            week3: false,
                            week4: false,
                            week5: false,
                            firstWeek: false,
                            lastWeek: false,
                            timeType: entities.enums.TransmitTimesTimeType.weekly,
                            dateOnceFrom: '',
                            dateOnceTo: ''
                        }
                    ];
                    return entityArray;
                };
                MockStationDetailWebRepository.prototype.getWebstreamsEntities = function (stationID) {
                    var entityArray = [
                        {
                            stationID: stationID,
                            transmitTimesFrom: '00:00:00',
                            transmitTimesTo: '23:59:59',
                            url: 'http://85.25.176.186:9140/listen.pls',
                            format: 'audio/mpeg',
                            quality: '128kbps'
                        }
                    ];
                    return entityArray;
                };
                return MockStationDetailWebRepository;
            }());
            stationdetail.MockStationDetailWebRepository = MockStationDetailWebRepository;
        })(stationdetail = dal_web_mock.stationdetail || (dal_web_mock.stationdetail = {}));
    })(dal_web_mock = freeradios.dal_web_mock || (freeradios.dal_web_mock = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_web;
    (function (dal_web) {
        var stationdetail;
        (function (stationdetail) {
            var entities = freeradios.business.entities.stationdetail;
            var AJAXStationDetailWebRepository = (function () {
                function AJAXStationDetailWebRepository() {
                    this._xml = null;
                }
                AJAXStationDetailWebRepository.prototype.loadData = function (dataURL, callback, errorCallback) {
                    this._xml = null;
                    (function (self) {
                        $.ajax({
                            url: dataURL,
                            type: "GET",
                            dataType: "text",
                            cache: false,
                            success: function (data) {
                                self._xml = $("<xml>" + data + "</xml>");
                                callback();
                            },
                            error: function () {
                                errorCallback();
                            }
                        });
                    }(this));
                };
                AJAXStationDetailWebRepository.prototype.getBroadcasts2CategoriesEntity = function (categoryNames2Categories, stationID) {
                    var broadcasts2categories = new Array();
                    (function (self) {
                        self._xml.find("programme").find("broadcast").each(function () {
                            var broadcastNode = $(this);
                            var broadCastID = parseInt(broadcastNode.attr("id"), 10);
                            $(this).find("categories").find("category").each(function () {
                                var node = $(this);
                                var categoryName = node.attr("name");
                                var entity = new entities.Broadcasts2CategoriesEntity();
                                entity.broadcastsID = broadCastID;
                                entity.stationID = stationID;
                                if (categoryNames2Categories[categoryName] === undefined || categoryNames2Categories[categoryName] === null) {
                                    var categoryID = node.attr("id");
                                    entity.categoriesID = (categoryID === undefined || categoryID === null) ? 0 : parseInt(categoryID, 10);
                                }
                                else {
                                    entity.categoriesID = categoryNames2Categories[categoryName].id;
                                }
                                if (entity.categoriesID !== undefined && entity.categoriesID !== null && !isNaN(entity.categoriesID)) {
                                    broadcasts2categories.push(entity);
                                }
                            });
                        });
                    }(this));
                    return broadcasts2categories;
                };
                AJAXStationDetailWebRepository.prototype.getBroadcastsEntities = function (stationID) {
                    var broadcasts = new Array();
                    (function (self) {
                        self._xml.find("programme").find("broadcast").each(function () {
                            var node = $(this);
                            var entity = new entities.BroadcastsEntity();
                            entity.id = parseInt(node.attr("id"), 10);
                            entity.stationID = stationID;
                            entity.title = self._getValueOrDefault(node, "title", "");
                            entity.description = self._getValueOrDefault(node, "description", "");
                            broadcasts.push(entity);
                        });
                    }(this));
                    return broadcasts;
                };
                AJAXStationDetailWebRepository.prototype.getMediaChannelsEntities = function (stationID) {
                    var channels = new Array();
                    (function (self) {
                        self._xml.find("media-channels").find("transmitter").each(function () {
                            var node = $(this);
                            var locationNode = node.find("transmitter-location").find("gml\\:Point, Point").find("gml\\:pos, pos");
                            var receptionAreaNode = node.find("receptionarea")
                                .find("gml\\:Polygon, Polygon")
                                .find("gml\\:exterior, exterior")
                                .find("gml\\:LinearRing, LinearRing")
                                .find("gml\\:posList, posList");
                            var entity = new entities.MediaChannelsEntity();
                            entity.stationID = stationID;
                            entity.type = node.attr("type") || "";
                            entity.frequency = self._getValueOrDefault(node, "frequency", "");
                            entity.frequencyUnit = self._getValueOrDefault(node, "frequencyunit", "");
                            entity.city = self._getValueOrDefault(node, "city", "");
                            entity.operator = self._getValueOrDefault(node, "operator", "");
                            entity.power = self._getValueOrDefault(node, "transmit-power", "");
                            entity.powerUnit = self._getValueOrDefault(node, "transmit-power-unit", "");
                            entity.rdsid = self._getValueOrDefault(node, "transmit-rds-id", "");
                            entity.transmitTimesFrom = self._getAttributeOfTagOrDefault(node, "transmit-times transmit-time", "time-from", "");
                            entity.transmitTimesTo = self._getAttributeOfTagOrDefault(node, "transmit-times transmit-time", "time-to", "");
                            if (locationNode.length > 0) {
                                var locationText = locationNode.text();
                                if (locationText == "") {
                                    entity.latitude = 0;
                                    entity.longitude = 0;
                                }
                                else {
                                    var locationParts = locationText.split(" ");
                                    entity.latitude = locationParts.length > 0 ? parseFloat(locationParts[0]) : 0;
                                    entity.longitude = locationParts.length > 1 ? parseFloat(locationParts[1]) : 0;
                                }
                            }
                            else {
                                entity.latitude = 0;
                                entity.longitude = 0;
                            }
                            entity.latitude = entity.latitude || 0;
                            entity.longitude = entity.longitude || 0;
                            if (receptionAreaNode.length > 0) {
                                entity.transmitterReceptionArea = receptionAreaNode.text();
                            }
                            else {
                                entity.transmitterReceptionArea = "";
                            }
                            channels.push(entity);
                        });
                    }(this));
                    return channels;
                };
                AJAXStationDetailWebRepository.prototype.getStationDetailEntity = function (stationID) {
                    if (this._xml === null) {
                        return null;
                    }
                    var entity = new entities.StationDetailEntity();
                    var stationNode = this._xml.find("station");
                    var infoNode = stationNode.find("info");
                    var studioNode = infoNode.find("studio");
                    var studioLocationNode = studioNode.find("studio-location").find("gml\\:Point, Point").find("gml\\:pos, pos");
                    entity.stationID = stationID;
                    entity.displayName = this._getValueOrDefault(infoNode, "displayname", "");
                    entity.fullName = this._getValueOrDefault(infoNode, "fullname", "");
                    entity.displayName = this._getValueOrDefault(infoNode, "displayname", "");
                    entity.logoSource = this._getAttributeOfTagOrDefault(infoNode, "logo", "src", "");
                    entity.baseColor = this._getValueOrDefault(infoNode, "basecolor", "");
                    entity.city = this._getValueOrDefault(infoNode, "city", "");
                    entity.studioStreet = this._getValueOrDefault(studioNode, "street", "");
                    entity.studioStreetNumber = this._getValueOrDefault(studioNode, "number", "");
                    entity.studioCity = this._getValueOrDefault(studioNode, "city", "");
                    entity.studioZIP = this._getValueOrDefault(studioNode, "zip", "");
                    if (studioLocationNode.length > 0) {
                        var studioLocationParts = studioLocationNode.text().split(" ");
                        entity.latitude = studioLocationParts.length > 0 ? parseFloat(studioLocationParts[0]) : 0;
                        entity.longitude = studioLocationParts.length > 1 ? parseFloat(studioLocationParts[1]) : 0;
                    }
                    else {
                        entity.latitude = 0;
                        entity.longitude = 0;
                    }
                    entity.studioStudioPhone = this._getValueOrDefault(studioNode, "phone[type=studio]", "");
                    entity.studioOfficePhone = this._getValueOrDefault(studioNode, "phone[type=office]", "");
                    entity.studioStudioEMail = this._getValueOrDefault(studioNode, "email[type=studio]", "");
                    entity.studioOfficeEMail = this._getValueOrDefault(studioNode, "email[type=office]", "");
                    entity.studioOpenTimeFrom = this._getAttributeOfTagOrDefault(studioNode, "open", "time-from", "");
                    entity.studioOpenTimeTo = this._getAttributeOfTagOrDefault(studioNode, "open", "time-to", "");
                    entity.website = this._getValueOrDefault(this._xml.find("media-channels website"), "url", "");
                    entity.lastUpdate = new Date(stationNode.attr("lastupdate"));
                    return entity;
                };
                AJAXStationDetailWebRepository.prototype.getTransmitTimeEntities = function (stationID) {
                    var transmitTimes = new Array();
                    (function (self) {
                        self._xml.find("programme").find("broadcast").each(function () {
                            var broadcastNode = $(this);
                            var broadCastID = parseInt(broadcastNode.attr("id"), 10);
                            $(this).find("transmit-times").find("transmit-time").each(function () {
                                var node = $(this);
                                var entity = new entities.TransmitTimesEntity();
                                entity.broadcastsID = broadCastID;
                                entity.stationID = stationID;
                                entity.recurrence = self._getAttributeOrDefault(node, "recurrence", "") === "true";
                                entity.rerun = self._getAttributeOrDefault(node, "rerun", "") === "true";
                                var timesNodeDaily = node.find("daily");
                                var timesNodeWeekly = node.find("weekly");
                                var timesNodeWeekOfMonth = node.find("weekOfMonth");
                                var dateFromAttribute = self._getAttributeOrDefault(node, "date-from", "");
                                var dateToAttribute = self._getAttributeOrDefault(node, "date-to", "");
                                var timesNode;
                                var valid = true;
                                if (timesNodeWeekly.length > 0) {
                                    entity.timeType = entities.enums.TransmitTimesTimeType.weekly;
                                    timesNode = timesNodeWeekly;
                                }
                                else if (timesNodeWeekOfMonth.length > 0) {
                                    entity.timeType = entities.enums.TransmitTimesTimeType.weekOfMonth;
                                    timesNode = timesNodeWeekOfMonth;
                                }
                                else if (timesNodeDaily.length > 0) {
                                    entity.timeType = entities.enums.TransmitTimesTimeType.daily;
                                    timesNode = timesNodeDaily;
                                }
                                else if (dateFromAttribute !== "" && dateToAttribute !== "") {
                                    dateFromAttribute = freeradios.utilities.date.TransmitTimesDateHelper.parseDateOnceString(dateFromAttribute);
                                    dateToAttribute = freeradios.utilities.date.TransmitTimesDateHelper.parseDateOnceString(dateToAttribute);
                                    entity.dateOnceFrom = dateFromAttribute;
                                    entity.dateOnceTo = dateToAttribute;
                                    entity.timeType = entities.enums.TransmitTimesTimeType.once;
                                    entity.timeFrom = freeradios.utilities.date.TransmitTimesDateHelper.getTimeStringFromDate(new Date(dateFromAttribute));
                                    entity.timeTo = freeradios.utilities.date.TransmitTimesDateHelper.getTimeStringFromDate(new Date(dateToAttribute));
                                    timesNode = null;
                                }
                                else {
                                    valid = false;
                                }
                                if (valid) {
                                    entity.day = timesNode === null ? "" : self._getAttributeOrDefault(timesNode, "day", "");
                                    entity.priority = timesNode === null ? 0 : parseInt(self._getAttributeOrDefault(timesNode, "priority", "0"), 10);
                                    if (entity.timeType !== entities.enums.TransmitTimesTimeType.once) {
                                        entity.timeFrom = self._getAttributeOrDefault(timesNode, "time-from", "");
                                        entity.timeTo = self._getAttributeOrDefault(timesNode, "time-to", "");
                                    }
                                    entity.week1 = timesNode === null ? false : self._getAttributeOrDefault(timesNode, "week1", "") === "true";
                                    entity.week2 = timesNode === null ? false : self._getAttributeOrDefault(timesNode, "week2", "") === "true";
                                    entity.week3 = timesNode === null ? false : self._getAttributeOrDefault(timesNode, "week3", "") === "true";
                                    entity.week4 = timesNode === null ? false : self._getAttributeOrDefault(timesNode, "week4", "") === "true";
                                    entity.week5 = timesNode === null ? false : self._getAttributeOrDefault(timesNode, "week5", "") === "true";
                                    entity.firstWeek = timesNode === null ? false : self._getAttributeOrDefault(timesNode, "firstWeek", "") === "true";
                                    entity.lastWeek = timesNode === null ? false : self._getAttributeOrDefault(timesNode, "lastWeek", "") === "true";
                                    transmitTimes.push(entity);
                                }
                            });
                        });
                    }(this));
                    return transmitTimes;
                };
                AJAXStationDetailWebRepository.prototype.getWebstreamsEntities = function (stationID) {
                    var webstreams = new Array();
                    (function (self) {
                        self._xml.find("media-channels").find("webstream").each(function () {
                            var node = $(this);
                            var transmitTimesNode = node.find("transmit-times").find("transmit-time");
                            var entity = new entities.WebstreamsEntity();
                            entity.stationID = stationID;
                            entity.transmitTimesFrom = transmitTimesNode.attr("time-from") || "";
                            entity.transmitTimesTo = transmitTimesNode.attr("time-to") || "";
                            entity.url = self._getValueOrDefault(node, "url", "");
                            entity.format = self._getValueOrDefault(node, "format", "");
                            entity.quality = self._getValueOrDefault(node, "quality", "");
                            webstreams.push(entity);
                        });
                    }(this));
                    return webstreams;
                };
                AJAXStationDetailWebRepository.prototype._getValueOrDefault = function (xmlNode, tag, defaultValue) {
                    if (xmlNode.length === 0) {
                        return defaultValue;
                    }
                    var node = xmlNode.find(tag);
                    if (node.length === 0) {
                        return defaultValue;
                    }
                    return node.text();
                };
                AJAXStationDetailWebRepository.prototype._getAttributeOrDefault = function (xmlNode, attribute, defaultValue) {
                    if (xmlNode.length === 0) {
                        return defaultValue;
                    }
                    return xmlNode.attr(attribute) || defaultValue;
                };
                AJAXStationDetailWebRepository.prototype._getAttributeOfTagOrDefault = function (xmlNode, tag, attribute, defaultValue) {
                    if (xmlNode.length === 0) {
                        return defaultValue;
                    }
                    var node = xmlNode.find(tag);
                    if (node.length === 0) {
                        return defaultValue;
                    }
                    return node.attr(attribute) || defaultValue;
                };
                return AJAXStationDetailWebRepository;
            }());
            stationdetail.AJAXStationDetailWebRepository = AJAXStationDetailWebRepository;
        })(stationdetail = dal_web.stationdetail || (dal_web.stationdetail = {}));
    })(dal_web = freeradios.dal_web || (freeradios.dal_web = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var entities;
        (function (entities) {
            var favorites;
            (function (favorites) {
                var BroadcastsFavoritesEntity = (function () {
                    function BroadcastsFavoritesEntity() {
                    }
                    return BroadcastsFavoritesEntity;
                }());
                favorites.BroadcastsFavoritesEntity = BroadcastsFavoritesEntity;
            })(favorites = entities.favorites || (entities.favorites = {}));
        })(entities = business.entities || (business.entities = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local_mock;
    (function (dal_local_mock) {
        var favorites;
        (function (favorites_1) {
            var MockFavoritesLocalRepository = (function () {
                function MockFavoritesLocalRepository() {
                }
                MockFavoritesLocalRepository.prototype.saveBroadcastFavorite = function (favorite, callback) {
                    MockFavoritesLocalRepository._baseList.push(favorite);
                    callback(true);
                };
                MockFavoritesLocalRepository.prototype.deleteBroadcastFavorite = function (favorite, callback) {
                    for (var i = 0, length = MockFavoritesLocalRepository._baseList.length; i < length; ++i) {
                        var entity = MockFavoritesLocalRepository._baseList[i];
                        if (entity.broadcastsID === favorite.broadcastsID && entity.stationID === favorite.stationID) {
                            MockFavoritesLocalRepository._baseList.splice(i, 1);
                            break;
                        }
                    }
                    callback(true);
                };
                MockFavoritesLocalRepository.prototype.getList = function (callback) {
                    callback(MockFavoritesLocalRepository._baseList);
                };
                MockFavoritesLocalRepository.prototype.getListForStation = function (stationID, callback) {
                    this.getList(function (favorites) {
                        var filteredFavorites = new Array();
                        for (var i = 0, length = favorites.length; i < length; ++i) {
                            var current = favorites[i];
                            if (current.stationID === stationID) {
                                filteredFavorites.push(current);
                            }
                        }
                        callback(filteredFavorites);
                    });
                };
                MockFavoritesLocalRepository._baseList = [
                    { stationID: 0, broadcastsID: 1 },
                    { stationID: 1, broadcastsID: 4 },
                    { stationID: 1, broadcastsID: 7 },
                    { stationID: 2, broadcastsID: 3 }
                ];
                return MockFavoritesLocalRepository;
            }());
            favorites_1.MockFavoritesLocalRepository = MockFavoritesLocalRepository;
        })(favorites = dal_local_mock.favorites || (dal_local_mock.favorites = {}));
    })(dal_local_mock = freeradios.dal_local_mock || (freeradios.dal_local_mock = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local_mock;
    (function (dal_local_mock) {
        var stationdetail;
        (function (stationdetail) {
            var MockBroadcastsLocalRepository = (function () {
                function MockBroadcastsLocalRepository() {
                }
                MockBroadcastsLocalRepository.prototype.saveBroadcastsArray = function (broadcasts, callback) {
                    MockBroadcastsLocalRepository._baseList = MockBroadcastsLocalRepository._baseList.concat(broadcasts);
                    callback(true);
                };
                MockBroadcastsLocalRepository.prototype.saveBroadcast = function (broadcast, callback) {
                    MockBroadcastsLocalRepository._baseList.push(broadcast);
                    callback(true);
                };
                MockBroadcastsLocalRepository.prototype.setIsFavorite = function (stationID, broadcastID, isFavorite, callback) {
                    this.getList(function (allBroadcasts) {
                        var broadcasts = new Array();
                        for (var i = 0, length = allBroadcasts.length; i < length; ++i) {
                            var currentBroadcast = allBroadcasts[i];
                            if (currentBroadcast.id === broadcastID && currentBroadcast.stationID === stationID) {
                                currentBroadcast.isFavorite = isFavorite;
                                break;
                            }
                        }
                    });
                    callback(true);
                };
                MockBroadcastsLocalRepository.prototype.reflagIsFavoriteFromBroadcastsFavorites = function (stationID, callback) {
                    var favoritesRepository = new dal_local_mock.favorites.MockFavoritesLocalRepository();
                    this.getList(function (allBroadcasts) {
                        favoritesRepository.getList(function (favorites) {
                            var broadcasts = new Array();
                            for (var i = 0, lengthI = allBroadcasts.length; i < lengthI; ++i) {
                                var currentBroadcast = allBroadcasts[i];
                                if (currentBroadcast.stationID === stationID) {
                                    for (var j = 0, lengthJ = favorites.length; j < lengthJ; ++j) {
                                        var currentFavorite = favorites[j];
                                        if (currentFavorite.stationID === currentBroadcast.stationID && currentFavorite.broadcastsID === currentBroadcast.id) {
                                            currentBroadcast.isFavorite = true;
                                            break;
                                        }
                                    }
                                }
                            }
                        });
                    });
                    callback(true);
                };
                MockBroadcastsLocalRepository.prototype.deleteByStationID = function (stationID, callback) {
                    callback(true);
                };
                MockBroadcastsLocalRepository.prototype.getListForFavorites = function (favorites, callback) {
                    this.getList(function (allBroadcasts) {
                        var broadcasts = new Array();
                        for (var i = 0, lengthI = allBroadcasts.length; i < lengthI; ++i) {
                            var currentBroadcast = allBroadcasts[i];
                            for (var j = 0, lengthJ = favorites.length; j < lengthJ; ++j) {
                                var currentFavorite = favorites[j];
                                if (currentBroadcast.stationID === currentFavorite.stationID && currentBroadcast.id === currentFavorite.broadcastsID) {
                                    broadcasts.push(currentBroadcast);
                                    break;
                                }
                            }
                        }
                        callback(broadcasts);
                    });
                };
                MockBroadcastsLocalRepository.prototype.getList = function (callback) {
                    callback(MockBroadcastsLocalRepository._baseList.slice(0));
                };
                MockBroadcastsLocalRepository.prototype.getListByStationID = function (stationID, callback) {
                    this.getList(function (allBroadcasts) {
                        callback(MockBroadcastsLocalRepository._filterByStation(stationID, allBroadcasts));
                    });
                };
                MockBroadcastsLocalRepository.prototype.getSingle = function (stationID, broadcastID, callback) {
                    this.getList(function (allBroadcasts) {
                        var entity = null;
                        for (var i = 0, lengthI = allBroadcasts.length; i < lengthI; ++i) {
                            var currentBroadcast = allBroadcasts[i];
                            if (currentBroadcast.stationID === stationID && currentBroadcast.id === broadcastID) {
                                entity = currentBroadcast;
                                break;
                            }
                        }
                        callback(entity);
                    });
                };
                MockBroadcastsLocalRepository.prototype.searchInTitleAndDescriptionAndCategories = function (searchText, callback) {
                    this.getList(function (allBroadcasts) {
                        var searchRegExp = new RegExp(searchText, "i");
                        var broadcasts = new Array();
                        for (var j = 0, lengthJ = allBroadcasts.length; j < lengthJ; ++j) {
                            var currentBroadcast = allBroadcasts[j];
                            var categoryConnections = MockBroadcastsLocalRepository.categoryConnections.filter(function (connection) {
                                return connection.broadcastsID === currentBroadcast.id;
                            });
                            var categories = MockBroadcastsLocalRepository._categories.filter(function (category) {
                                for (var i = 0, length = categoryConnections.length; i < length; ++i) {
                                    if (categoryConnections[i].categoriesID === category.id) {
                                        return true;
                                    }
                                }
                                return false;
                            });
                            var categoriesFound = false;
                            for (var i = 0, length = categories.length; i < length; ++i) {
                                if (searchRegExp.test(categories[i].name)) {
                                    categoriesFound = true;
                                }
                            }
                            if (searchRegExp.test(currentBroadcast.title) || searchRegExp.test(currentBroadcast.description) || categoriesFound) {
                                broadcasts.push(currentBroadcast);
                            }
                        }
                        callback(broadcasts);
                    });
                };
                MockBroadcastsLocalRepository.prototype.searchInTitleAndDescriptionAndCategoriesAndStationName = function (searchText, callback) {
                    var stationRepository = new dal_local_mock.station.MockStationLocalRepository();
                    this.getList(function (allBroadcasts) {
                        stationRepository.getStationList(function (stations) {
                            var searchRegExp = new RegExp(searchText, "i");
                            var broadcasts = new Array();
                            for (var j = 0, lengthJ = allBroadcasts.length; j < lengthJ; ++j) {
                                var currentBroadcast = allBroadcasts[j];
                                var categoryConnections = MockBroadcastsLocalRepository.categoryConnections.filter(function (connection) {
                                    return connection.broadcastsID === currentBroadcast.id;
                                });
                                var categories = MockBroadcastsLocalRepository._categories.filter(function (category) {
                                    for (var i = 0, length = categoryConnections.length; i < length; ++i) {
                                        if (categoryConnections[i].categoriesID === category.id) {
                                            return true;
                                        }
                                    }
                                    return false;
                                });
                                var stationNames = stations.filter(function (station) {
                                    return station.id === currentBroadcast.stationID;
                                });
                                var categoriesFound = false;
                                for (var i = 0, length = categories.length; i < length; ++i) {
                                    if (searchRegExp.test(categories[i].name)) {
                                        categoriesFound = true;
                                    }
                                }
                                if (searchRegExp.test(currentBroadcast.title) || searchRegExp.test(currentBroadcast.description) || categoriesFound || searchRegExp.test(stationNames[0].name)) {
                                    broadcasts.push(currentBroadcast);
                                }
                            }
                            callback(broadcasts);
                        });
                    });
                };
                MockBroadcastsLocalRepository.prototype.searchInTitleAndDescriptionAndCategoriesForStation = function (stationID, searchText, callback) {
                    this.searchInTitleAndDescriptionAndCategories(searchText, function (searchedBroadcasts) {
                        callback(MockBroadcastsLocalRepository._filterByStation(stationID, searchedBroadcasts));
                    });
                };
                MockBroadcastsLocalRepository.prototype.searchInTitleAndDescriptionAndCategoriesFilteredByCategories = function (searchText, categoryIDs, callback) {
                    this.searchInTitleAndDescriptionAndCategories(searchText, function (searchedBroadcasts) {
                        callback(MockBroadcastsLocalRepository._filterByCategories(categoryIDs, searchedBroadcasts));
                    });
                };
                MockBroadcastsLocalRepository.prototype.searchInTitleAndDescriptionAndCategoriesFilteredByCategoriesForStation = function (stationID, searchText, categoryIDs, callback) {
                    this.searchInTitleAndDescriptionAndCategoriesFilteredByCategories(searchText, categoryIDs, function (searchedBroadcasts) {
                        callback(MockBroadcastsLocalRepository._filterByStation(stationID, searchedBroadcasts));
                    });
                };
                MockBroadcastsLocalRepository.prototype.getFilteredByCategories = function (categoryIDs, callback) {
                    this.getList(function (allBroadcasts) {
                        callback(MockBroadcastsLocalRepository._filterByCategories(categoryIDs, allBroadcasts));
                    });
                };
                MockBroadcastsLocalRepository.prototype.getFilteredByCategoriesForStation = function (stationID, categoryIDs, callback) {
                    this.getFilteredByCategories(categoryIDs, function (filteredBroadcasts) {
                        callback(MockBroadcastsLocalRepository._filterByStation(stationID, filteredBroadcasts));
                    });
                };
                MockBroadcastsLocalRepository._filterByStation = function (stationID, allBroadcasts) {
                    var broadcasts = new Array();
                    for (var i = 0, lengthI = allBroadcasts.length; i < lengthI; ++i) {
                        var currentBroadcast = allBroadcasts[i];
                        if (currentBroadcast.stationID === stationID) {
                            broadcasts.push(currentBroadcast);
                        }
                    }
                    return broadcasts;
                };
                MockBroadcastsLocalRepository._filterByCategories = function (categoryIDs, allBroadcasts) {
                    if (categoryIDs.length === 0) {
                        return allBroadcasts;
                    }
                    var broadcasts = new Array();
                    for (var i = 0, lengthI = allBroadcasts.length; i < lengthI; ++i) {
                        var currentBroadcast = allBroadcasts[i];
                        var found = false;
                        for (var j = 0, lengthJ = MockBroadcastsLocalRepository.categoryConnections.length; j < lengthJ && !found; ++j) {
                            var currentConnection = MockBroadcastsLocalRepository.categoryConnections[j];
                            if (currentConnection.broadcastsID === currentBroadcast.id) {
                                for (var k = 0, lengthK = categoryIDs.length; k < lengthK; ++k) {
                                    if (categoryIDs[k] === currentConnection.categoriesID) {
                                        broadcasts.push(currentBroadcast);
                                        found = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    return broadcasts;
                };
                MockBroadcastsLocalRepository._baseList = [
                    { stationID: 0, id: 1, title: "title 0|1", description: "description 0|1", isFavorite: false },
                    { stationID: 1, id: 4, title: "title 1|4", description: "description 1|4", isFavorite: true },
                    { stationID: 1, id: 7, title: "title 1|7", description: "description 1|7", isFavorite: false },
                    { stationID: 2, id: 3, title: "title 2|3", description: "description 2|3", isFavorite: false }
                ];
                MockBroadcastsLocalRepository.categoryConnections = [
                    { broadcastsID: 1, stationID: 0, categoriesID: 1 },
                    { broadcastsID: 1, stationID: 0, categoriesID: 14 },
                    { broadcastsID: 4, stationID: 1, categoriesID: 2 },
                    { broadcastsID: 7, stationID: 1, categoriesID: 5 },
                    { broadcastsID: 7, stationID: 1, categoriesID: 8 },
                    { broadcastsID: 7, stationID: 1, categoriesID: 10 },
                    { broadcastsID: 3, stationID: 2, categoriesID: 5 },
                    { broadcastsID: 10, stationID: 0, categoriesID: 1 },
                    { broadcastsID: 10, stationID: 0, categoriesID: 11 }
                ];
                MockBroadcastsLocalRepository._categories = [
                    { id: 1, name: "Alternative" },
                    { id: 2, name: "Elektronika" },
                    { id: 3, name: "HipHop" },
                    { id: 4, name: "Jazz" },
                    { id: 5, name: "Klassik" },
                    { id: 6, name: "Reggae" },
                    { id: 7, name: "R'n'B / Black" },
                    { id: 8, name: "Singer-Songwriter" },
                    { id: 9, name: "U-Musi & Schlager" },
                    { id: 10, name: "Volksmusik" },
                    { id: 11, name: "World" },
                    { id: 12, name: "Wort" }
                ];
                return MockBroadcastsLocalRepository;
            }());
            stationdetail.MockBroadcastsLocalRepository = MockBroadcastsLocalRepository;
        })(stationdetail = dal_local_mock.stationdetail || (dal_local_mock.stationdetail = {}));
    })(dal_local_mock = freeradios.dal_local_mock || (freeradios.dal_local_mock = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local;
    (function (dal_local) {
        var stationdetail;
        (function (stationdetail) {
            var entities = freeradios.business.entities.stationdetail;
            var SQLBroadcastsLocalRepository = (function (_super) {
                __extends(SQLBroadcastsLocalRepository, _super);
                function SQLBroadcastsLocalRepository() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SQLBroadcastsLocalRepository.prototype.saveBroadcastsArray = function (broadcasts, callback) {
                    this.getContext().beginTransaction();
                    for (var i = 0, length = broadcasts.length; i < length; ++i) {
                        this.saveBroadcast(broadcasts[i], function (success) { });
                    }
                    this.getContext().commitTransaction(function (success) {
                        callback(success);
                    });
                };
                SQLBroadcastsLocalRepository.prototype.saveBroadcast = function (broadcast, callback) {
                    if (isNaN(broadcast.id) || isNaN(broadcast.stationID)) {
                        return;
                    }
                    var query = "INSERT INTO broadcasts "
                        + "(broadcasts_id, broadcasts_stations_id, broadcasts_title, broadcasts_description, broadcasts_is_favorite) VALUES "
                        + "(:BROADCASTID, :STATIONSID, :TITLE, :DESCRIPTION, :ISFAVORITE);";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":BROADCASTID", broadcast.id);
                    statement.bindValue(":STATIONSID", broadcast.stationID);
                    statement.bindValue(":TITLE", broadcast.title || "");
                    statement.bindValue(":DESCRIPTION", broadcast.description || "");
                    statement.bindValue(":ISFAVORITE", broadcast.isFavorite === true);
                    this.getContext().executeNonResults(statement, callback);
                };
                SQLBroadcastsLocalRepository.prototype.setIsFavorite = function (stationID, broadcastID, isFavorite, callback) {
                    var query = "UPDATE broadcasts "
                        + "SET broadcasts_is_favorite=:ISFAVORITE WHERE "
                        + "broadcasts_id=:BROADCASTID AND broadcasts_stations_id=:STATIONSID;";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":ISFAVORITE", isFavorite === true);
                    statement.bindValue(":BROADCASTID", broadcastID);
                    statement.bindValue(":STATIONSID", stationID);
                    this.getContext().executeNonResults(statement, callback);
                };
                SQLBroadcastsLocalRepository.prototype.reflagIsFavoriteFromBroadcastsFavorites = function (stationID, callback) {
                    var query = "UPDATE broadcasts "
                        + "SET broadcasts_is_favorite='1' WHERE "
                        + "broadcasts_stations_id=:STATIONSID AND broadcasts_id IN ( "
                        + "SELECT broadcasts_favorites_broadcasts_id FROM broadcasts_favorites WHERE "
                        + "broadcasts_favorites_stations_id=:STATIONSID "
                        + ");";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":STATIONSID", stationID);
                    this.getContext().executeNonResults(statement, callback);
                };
                SQLBroadcastsLocalRepository.prototype.deleteByStationID = function (stationID, callback) {
                    var statement = this.getContext().query("DELETE FROM broadcasts WHERE broadcasts_stations_id=:STATIONID;");
                    statement.bindValue(":STATIONID", stationID);
                    this.getContext().executeNonResults(statement, callback);
                };
                SQLBroadcastsLocalRepository.prototype.getListForFavorites = function (favorites, callback) {
                    if (favorites.length > 0) {
                        var whereStatement = "";
                        var stationIDs = new Array();
                        var broadcastsIDs = new Array();
                        for (var i = 0, length = favorites.length; i < length; ++i) {
                            var currentFavorite = favorites[i];
                            if (whereStatement !== "") {
                                whereStatement += " OR ";
                            }
                            whereStatement += "(broadcasts.broadcasts_id=:BROADCASTSID" + i + " AND broadcasts.broadcasts_stations_id=:STATIONSID" + i + ")";
                            stationIDs[i] = currentFavorite.stationID;
                            broadcastsIDs[i] = currentFavorite.broadcastsID;
                        }
                        var query = "SELECT broadcasts.* FROM broadcasts JOIN broadcasts_favorites ON ( "
                            + "broadcasts_favorites.broadcasts_favorites_broadcasts_id = broadcasts.broadcasts_id "
                            + "AND broadcasts_favorites.broadcasts_favorites_stations_id = broadcasts.broadcasts_stations_id) "
                            + "WHERE " + whereStatement + " "
                            + "GROUP BY broadcasts_favorites.broadcasts_favorites_broadcasts_id, broadcasts_favorites.broadcasts_favorites_stations_id "
                            + "ORDER BY broadcasts.broadcasts_title COLLATE NOCASE;";
                        var statement = this.getContext().query(query);
                        for (var i = 0, length = favorites.length; i < length; ++i) {
                            statement.bindValue(":BROADCASTSID" + i, broadcastsIDs[i]);
                            statement.bindValue(":STATIONSID" + i, stationIDs[i]);
                        }
                        this.getListWithStatement(statement, this._getBroadcastFromSQLResults, callback);
                    }
                    else {
                        callback([]);
                    }
                };
                SQLBroadcastsLocalRepository.prototype.getList = function (callback) {
                    var statement = this.getContext().query("SELECT * FROM broadcasts ORDER BY broadcasts_title COLLATE NOCASE;");
                    this.getListWithStatement(statement, this._getBroadcastFromSQLResults, callback);
                };
                SQLBroadcastsLocalRepository.prototype.getListByStationID = function (stationID, callback) {
                    var statement = this.getContext().query("SELECT * FROM broadcasts WHERE broadcasts_stations_id=:STATIONSID ORDER BY broadcasts_title COLLATE NOCASE;");
                    statement.bindValue(":STATIONSID", stationID);
                    this.getListWithStatement(statement, this._getBroadcastFromSQLResults, callback);
                };
                SQLBroadcastsLocalRepository.prototype.getSingle = function (stationID, broadcastID, callback) {
                    var statement = this.getContext().query("SELECT * FROM broadcasts WHERE broadcasts_stations_id=:STATIONID AND broadcasts_id=:BROADCASTID LIMIT 1;");
                    statement.bindValue(":STATIONID", stationID);
                    statement.bindValue(":BROADCASTID", broadcastID);
                    this.getSingleWithStatement(statement, this._getBroadcastFromSQLResults, callback);
                };
                SQLBroadcastsLocalRepository.prototype.searchInTitleAndDescriptionAndCategories = function (searchText, callback) {
                    var query = "SELECT broadcasts.* FROM broadcasts "
                        + "JOIN broadcasts_categories ON ("
                        + "broadcasts.broadcasts_stations_id = broadcasts_categories.broadcasts_categories_stations_id "
                        + "AND broadcasts.broadcasts_id = broadcasts_categories.broadcasts_categories_broadcasts_id) "
                        + "JOIN categories ON (categories.category_id = broadcasts_categories.broadcasts_categories_categories_id) "
                        + "WHERE broadcasts.broadcasts_title LIKE :BROADCASTSTITLE "
                        + "OR broadcasts.broadcasts_description LIKE :BROADCASTSDESCRIPTION "
                        + "OR categories.category_name LIKE :CATEGORYNAME "
                        + "ORDER BY broadcasts.broadcasts_title COLLATE NOCASE;";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":BROADCASTSTITLE", "%" + searchText + "%");
                    statement.bindValue(":BROADCASTSDESCRIPTION", "%" + searchText + "%");
                    statement.bindValue(":CATEGORYNAME", "%" + searchText + "%");
                    this.getListWithStatement(statement, this._getBroadcastFromSQLResults, callback);
                };
                SQLBroadcastsLocalRepository.prototype.searchInTitleAndDescriptionAndCategoriesAndStationName = function (searchText, callback) {
                    var query = "SELECT broadcasts.* FROM broadcasts "
                        + "JOIN broadcasts_categories ON ("
                        + "broadcasts.broadcasts_stations_id = broadcasts_categories.broadcasts_categories_stations_id "
                        + "AND broadcasts.broadcasts_id = broadcasts_categories.broadcasts_categories_broadcasts_id) "
                        + "JOIN stations ON (stations.stations_id=broadcasts.broadcasts_stations_id) "
                        + "JOIN categories ON (categories.category_id = broadcasts_categories.broadcasts_categories_categories_id) "
                        + "WHERE broadcasts.broadcasts_title LIKE :BROADCASTSTITLE "
                        + "OR broadcasts.broadcasts_description LIKE :BROADCASTSDESCRIPTION "
                        + "OR categories.category_name LIKE :CATEGORYNAME "
                        + "OR stations.stations_name LIKE :STATIONSNAME "
                        + "ORDER BY broadcasts.broadcasts_title COLLATE NOCASE;";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":BROADCASTSTITLE", "%" + searchText + "%");
                    statement.bindValue(":BROADCASTSDESCRIPTION", "%" + searchText + "%");
                    statement.bindValue(":CATEGORYNAME", "%" + searchText + "%");
                    statement.bindValue(":STATIONSNAME", "%" + searchText + "%");
                    this.getListWithStatement(statement, this._getBroadcastFromSQLResults, callback);
                };
                SQLBroadcastsLocalRepository.prototype.searchInTitleAndDescriptionAndCategoriesForStation = function (stationID, searchText, callback) {
                    var query = "SELECT broadcasts.* FROM broadcasts "
                        + "JOIN broadcasts_categories ON ("
                        + "broadcasts.broadcasts_stations_id = broadcasts_categories.broadcasts_categories_stations_id "
                        + "AND broadcasts.broadcasts_id = broadcasts_categories.broadcasts_categories_broadcasts_id) "
                        + "JOIN categories ON (categories.category_id = broadcasts_categories.broadcasts_categories_categories_id) "
                        + "WHERE (broadcasts.broadcasts_title LIKE :BROADCASTSTITLE "
                        + "OR broadcasts.broadcasts_description LIKE :BROADCASTSDESCRIPTION "
                        + "OR categories.category_name LIKE :CATEGORYNAME) "
                        + "AND broadcasts.broadcasts_stations_id=:STATIONSID "
                        + "ORDER BY broadcasts.broadcasts_title COLLATE NOCASE";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":BROADCASTSTITLE", "%" + searchText + "%");
                    statement.bindValue(":BROADCASTSDESCRIPTION", "%" + searchText + "%");
                    statement.bindValue(":CATEGORYNAME", "%" + searchText + "%");
                    statement.bindValue(":STATIONSID", stationID);
                    this.getListWithStatement(statement, this._getBroadcastFromSQLResults, callback);
                };
                SQLBroadcastsLocalRepository.prototype.searchInTitleAndDescriptionAndCategoriesFilteredByCategories = function (searchText, categoryIDs, callback) {
                    if (categoryIDs.length < 1) {
                        return this.searchInTitleAndDescriptionAndCategories(searchText, callback);
                    }
                    var query = "SELECT broadcasts.* FROM broadcasts "
                        + "JOIN broadcasts_categories ON ("
                        + "broadcasts.broadcasts_stations_id = broadcasts_categories.broadcasts_categories_stations_id "
                        + "AND broadcasts.broadcasts_id = broadcasts_categories.broadcasts_categories_broadcasts_id) "
                        + "JOIN categories ON (categories.category_id = broadcasts_categories.broadcasts_categories_categories_id) "
                        + "WHERE (broadcasts.broadcasts_title LIKE :BROADCASTSTITLE "
                        + "OR broadcasts.broadcasts_description LIKE :BROADCASTSDESCRIPTION "
                        + "OR categories.category_name LIKE :CATEGORYNAME) "
                        + "AND categories.category_id IN (" + this._getCategoryInStatementWithPlaceholders(categoryIDs) + ") "
                        + "ORDER BY broadcasts.broadcasts_title COLLATE NOCASE;";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":BROADCASTSTITLE", "%" + searchText + "%");
                    statement.bindValue(":BROADCASTSDESCRIPTION", "%" + searchText + "%");
                    statement.bindValue(":CATEGORYNAME", "%" + searchText + "%");
                    this._bindCategoryInStatementValues(statement, categoryIDs);
                    this.getListWithStatement(statement, this._getBroadcastFromSQLResults, callback);
                };
                SQLBroadcastsLocalRepository.prototype.searchInTitleAndDescriptionAndCategoriesFilteredByCategoriesForStation = function (stationID, searchText, categoryIDs, callback) {
                    if (categoryIDs.length < 1) {
                        return this.searchInTitleAndDescriptionAndCategoriesForStation(stationID, searchText, callback);
                    }
                    var query = "SELECT broadcasts.* FROM broadcasts "
                        + "JOIN broadcasts_categories ON ("
                        + "broadcasts.broadcasts_stations_id = broadcasts_categories.broadcasts_categories_stations_id "
                        + "AND broadcasts.broadcasts_id = broadcasts_categories.broadcasts_categories_broadcasts_id) "
                        + "JOIN categories ON (categories.category_id = broadcasts_categories.broadcasts_categories_categories_id) "
                        + "WHERE (broadcasts.broadcasts_title LIKE :BROADCASTSTITLE "
                        + "OR broadcasts.broadcasts_description LIKE :BROADCASTSDESCRIPTION "
                        + "OR categories.category_name LIKE :CATEGORYNAME) "
                        + "AND categories.category_id IN (" + this._getCategoryInStatementWithPlaceholders(categoryIDs) + ") "
                        + "AND broadcasts.broadcasts_stations_id=:STATIONSID "
                        + "ORDER BY broadcasts.broadcasts_title COLLATE NOCASE;";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":BROADCASTSTITLE", "%" + searchText + "%");
                    statement.bindValue(":BROADCASTSDESCRIPTION", "%" + searchText + "%");
                    statement.bindValue(":CATEGORYNAME", "%" + searchText + "%");
                    statement.bindValue(":STATIONSID", stationID);
                    this._bindCategoryInStatementValues(statement, categoryIDs);
                    this.getListWithStatement(statement, this._getBroadcastFromSQLResults, callback);
                };
                SQLBroadcastsLocalRepository.prototype.getFilteredByCategories = function (categoryIDs, callback) {
                    if (categoryIDs.length < 1) {
                        return this.getList(callback);
                    }
                    var query = "SELECT broadcasts.* FROM broadcasts "
                        + "JOIN broadcasts_categories ON ("
                        + "broadcasts.broadcasts_stations_id = broadcasts_categories.broadcasts_categories_stations_id "
                        + "AND broadcasts.broadcasts_id = broadcasts_categories.broadcasts_categories_broadcasts_id) "
                        + "JOIN categories ON (categories.category_id = broadcasts_categories.broadcasts_categories_categories_id) "
                        + "WHERE categories.category_id IN (" + this._getCategoryInStatementWithPlaceholders(categoryIDs) + ") "
                        + "ORDER BY broadcasts.broadcasts_title COLLATE NOCASE;";
                    var statement = this.getContext().query(query);
                    this._bindCategoryInStatementValues(statement, categoryIDs);
                    this.getListWithStatement(statement, this._getBroadcastFromSQLResults, callback);
                };
                SQLBroadcastsLocalRepository.prototype.getFilteredByCategoriesForStation = function (stationID, categoryIDs, callback) {
                    if (categoryIDs.length < 1) {
                        return this.getListByStationID(stationID, callback);
                    }
                    var query = "SELECT broadcasts.* FROM broadcasts "
                        + "JOIN broadcasts_categories ON ("
                        + "broadcasts.broadcasts_stations_id = broadcasts_categories.broadcasts_categories_stations_id "
                        + "AND broadcasts.broadcasts_id = broadcasts_categories.broadcasts_categories_broadcasts_id) "
                        + "JOIN categories ON (categories.category_id = broadcasts_categories.broadcasts_categories_categories_id) "
                        + "WHERE categories.category_id IN (" + this._getCategoryInStatementWithPlaceholders(categoryIDs) + ") "
                        + "AND broadcasts.broadcasts_stations_id=:STATIONSID "
                        + "ORDER BY broadcasts.broadcasts_title COLLATE NOCASE;";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":STATIONSID", stationID);
                    this._bindCategoryInStatementValues(statement, categoryIDs);
                    this.getListWithStatement(statement, this._getBroadcastFromSQLResults, callback);
                };
                SQLBroadcastsLocalRepository.prototype._getBroadcastFromSQLResults = function (results) {
                    var broadcast = new entities.BroadcastsEntity();
                    broadcast.id = parseInt(results.getValue("broadcasts_id"), 10);
                    broadcast.stationID = parseInt(results.getValue("broadcasts_stations_id"), 10);
                    broadcast.title = results.getValue("broadcasts_title");
                    broadcast.description = results.getValue("broadcasts_description");
                    broadcast.isFavorite = results.getValue("broadcasts_is_favorite") === "1";
                    return broadcast;
                };
                SQLBroadcastsLocalRepository.prototype._getCategoryInStatementWithPlaceholders = function (categoryIDs) {
                    var query = "";
                    for (var i = 0, length = categoryIDs.length; i < length; ++i) {
                        if (query !== "") {
                            query += ",";
                        }
                        query += ":CATEGORY" + i;
                    }
                    return query;
                };
                SQLBroadcastsLocalRepository.prototype._bindCategoryInStatementValues = function (statement, categoryIDs) {
                    for (var i = 0, length = categoryIDs.length; i < length; ++i) {
                        statement.bindValue(":CATEGORY" + i, categoryIDs[i]);
                    }
                };
                return SQLBroadcastsLocalRepository;
            }(dal_local.BaseSQLRepository));
            stationdetail.SQLBroadcastsLocalRepository = SQLBroadcastsLocalRepository;
        })(stationdetail = dal_local.stationdetail || (dal_local.stationdetail = {}));
    })(dal_local = freeradios.dal_local || (freeradios.dal_local = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local_mock;
    (function (dal_local_mock) {
        var stationdetail;
        (function (stationdetail) {
            var MockCategoriesLocalRepository = (function () {
                function MockCategoriesLocalRepository() {
                }
                MockCategoriesLocalRepository.prototype.getCategoryList = function (callback) {
                    callback(MockCategoriesLocalRepository._categoryList);
                };
                MockCategoriesLocalRepository.prototype.getSingle = function (id, callback) {
                    this.getCategoryList(function (categories) {
                        var entity = null;
                        for (var i = 0, length = categories.length; i < length; ++i) {
                            var currentCategory = categories[i];
                            if (currentCategory.id === id) {
                                entity = currentCategory;
                                break;
                            }
                        }
                        callback(entity);
                    });
                };
                MockCategoriesLocalRepository.prototype.getSingleByName = function (name, callback) {
                    this.getCategoryList(function (categories) {
                        var entity = null;
                        for (var i = 0, length = categories.length; i < length; ++i) {
                            var currentCategory = categories[i];
                            if (currentCategory.name === name) {
                                entity = currentCategory;
                                break;
                            }
                        }
                        callback(entity);
                    });
                };
                MockCategoriesLocalRepository.prototype.getForBroadcast = function (stationID, broadcastID, callback) {
                    var connections = stationdetail.MockBroadcastsLocalRepository.categoryConnections;
                    var results = new Array();
                    for (var i = 0, length = connections.length; i < length; ++i) {
                        var currentConnection = connections[i];
                        if (currentConnection.stationID === stationID && currentConnection.broadcastsID === broadcastID) {
                            results.push(MockCategoriesLocalRepository._categoryList[currentConnection.categoriesID]);
                        }
                    }
                    callback(results);
                };
                MockCategoriesLocalRepository._categoryList = [
                    { id: 1, name: "Alternative" },
                    { id: 2, name: "Elektronika" },
                    { id: 3, name: "HipHop" },
                    { id: 4, name: "Jazz" },
                    { id: 5, name: "Klassik" },
                    { id: 6, name: "Reggae" },
                    { id: 7, name: "R'n'B / Black" },
                    { id: 8, name: "Singer-Songwriter" },
                    { id: 9, name: "U-Musi & Schlager" },
                    { id: 10, name: "Volksmusik" },
                    { id: 11, name: "World" },
                    { id: 12, name: "Wort" }
                ];
                return MockCategoriesLocalRepository;
            }());
            stationdetail.MockCategoriesLocalRepository = MockCategoriesLocalRepository;
        })(stationdetail = dal_local_mock.stationdetail || (dal_local_mock.stationdetail = {}));
    })(dal_local_mock = freeradios.dal_local_mock || (freeradios.dal_local_mock = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local;
    (function (dal_local) {
        var stationdetail;
        (function (stationdetail) {
            var entities = freeradios.business.entities.stationdetail;
            var SQLCategoriesLocalRepository = (function (_super) {
                __extends(SQLCategoriesLocalRepository, _super);
                function SQLCategoriesLocalRepository() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SQLCategoriesLocalRepository.prototype.getCategoryList = function (callback) {
                    var statement = this.getContext().query("SELECT * FROM categories ORDER BY category_name COLLATE NOCASE;");
                    this.getListWithStatement(statement, this._getCategoryFromSQLResults, callback);
                };
                SQLCategoriesLocalRepository.prototype.getSingle = function (id, callback) {
                    var statement = this.getContext().query("SELECT * FROM categories WHERE category_id=:CATEGORYID LIMIT 1;");
                    statement.bindValue(":CATEGORYID", id);
                    this.getSingleWithStatement(statement, this._getCategoryFromSQLResults, callback);
                };
                SQLCategoriesLocalRepository.prototype.getSingleByName = function (name, callback) {
                    var statement = this.getContext().query("SELECT * FROM categories WHERE category_name=:CATEGORYNAME LIMIT 1;");
                    statement.bindValue(":CATEGORYNAME", name);
                    this.getSingleWithStatement(statement, this._getCategoryFromSQLResults, callback);
                };
                SQLCategoriesLocalRepository.prototype.getForBroadcast = function (stationID, broadcastID, callback) {
                    var query = "SELECT categories.* "
                        + "FROM categories "
                        + "JOIN broadcasts_categories ON (broadcasts_categories.broadcasts_categories_categories_id = categories.category_id) "
                        + "WHERE broadcasts_categories.broadcasts_categories_stations_id = :STATIONSID "
                        + "AND broadcasts_categories.broadcasts_categories_broadcasts_id = :BROADCASTSID "
                        + "GROUP BY categories.category_id "
                        + "ORDER BY categories.category_name COLLATE NOCASE;";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":STATIONSID", stationID);
                    statement.bindValue(":BROADCASTSID", broadcastID);
                    this.getListWithStatement(statement, this._getCategoryFromSQLResults, callback);
                };
                SQLCategoriesLocalRepository.prototype._getCategoryFromSQLResults = function (results) {
                    var category = new entities.CategoriesEntity();
                    category.id = parseInt(results.getValue("category_id"), 10);
                    category.name = results.getValue("category_name");
                    return category;
                };
                return SQLCategoriesLocalRepository;
            }(dal_local.BaseSQLRepository));
            stationdetail.SQLCategoriesLocalRepository = SQLCategoriesLocalRepository;
        })(stationdetail = dal_local.stationdetail || (dal_local.stationdetail = {}));
    })(dal_local = freeradios.dal_local || (freeradios.dal_local = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local_mock;
    (function (dal_local_mock) {
        var stationdetail;
        (function (stationdetail) {
            var MockBroadcasts2CategoriesLocalRepository = (function () {
                function MockBroadcasts2CategoriesLocalRepository() {
                }
                MockBroadcasts2CategoriesLocalRepository.prototype.saveConnection = function (connection, callback) {
                    callback(true);
                };
                MockBroadcasts2CategoriesLocalRepository.prototype.saveConnectionsArray = function (connections, callback) {
                    callback(true);
                };
                MockBroadcasts2CategoriesLocalRepository.prototype.deleteByStationID = function (stationID, callback) {
                    callback(true);
                };
                return MockBroadcasts2CategoriesLocalRepository;
            }());
            stationdetail.MockBroadcasts2CategoriesLocalRepository = MockBroadcasts2CategoriesLocalRepository;
        })(stationdetail = dal_local_mock.stationdetail || (dal_local_mock.stationdetail = {}));
    })(dal_local_mock = freeradios.dal_local_mock || (freeradios.dal_local_mock = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local;
    (function (dal_local) {
        var stationdetail;
        (function (stationdetail) {
            var SQLBroadcasts2CategoriesLocalRepository = (function (_super) {
                __extends(SQLBroadcasts2CategoriesLocalRepository, _super);
                function SQLBroadcasts2CategoriesLocalRepository() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SQLBroadcasts2CategoriesLocalRepository.prototype.saveConnectionsArray = function (connections, callback) {
                    this.getContext().beginTransaction();
                    for (var i = 0, length = connections.length; i < length; ++i) {
                        this.saveConnection(connections[i], function (success) { });
                    }
                    this.getContext().commitTransaction(function (success) {
                        callback(success);
                    });
                };
                SQLBroadcasts2CategoriesLocalRepository.prototype.saveConnection = function (connection, callback) {
                    if (isNaN(connection.broadcastsID) || isNaN(connection.stationID) || isNaN(connection.categoriesID)) {
                        return;
                    }
                    var query = "INSERT INTO broadcasts_categories "
                        + "(broadcasts_categories_stations_id, broadcasts_categories_broadcasts_id, broadcasts_categories_categories_id) VALUES "
                        + "(:STATIONSID, :BROADCASTSID, :CATEGORYID);";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":BROADCASTSID", connection.broadcastsID);
                    statement.bindValue(":STATIONSID", connection.stationID);
                    statement.bindValue(":CATEGORYID", connection.categoriesID);
                    this.getContext().executeNonResults(statement, callback);
                };
                SQLBroadcasts2CategoriesLocalRepository.prototype.deleteByStationID = function (stationID, callback) {
                    var statement = this.getContext().query("DELETE FROM broadcasts_categories WHERE broadcasts_categories_stations_id=:STATIONID;");
                    statement.bindValue(":STATIONID", stationID);
                    this.getContext().executeNonResults(statement, callback);
                };
                return SQLBroadcasts2CategoriesLocalRepository;
            }(dal_local.BaseSQLRepository));
            stationdetail.SQLBroadcasts2CategoriesLocalRepository = SQLBroadcasts2CategoriesLocalRepository;
        })(stationdetail = dal_local.stationdetail || (dal_local.stationdetail = {}));
    })(dal_local = freeradios.dal_local || (freeradios.dal_local = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local_mock;
    (function (dal_local_mock) {
        var stationdetail;
        (function (stationdetail) {
            var MockMediaChannelsLocalRepository = (function () {
                function MockMediaChannelsLocalRepository() {
                }
                MockMediaChannelsLocalRepository.prototype.saveMediaChannelsArray = function (mediaChannels, callback) {
                    callback(true);
                };
                MockMediaChannelsLocalRepository.prototype.saveMediaChannel = function (mediaChannel, callback) {
                    callback(true);
                };
                MockMediaChannelsLocalRepository.prototype.deleteByStationID = function (stationID, callback) {
                    callback(true);
                };
                MockMediaChannelsLocalRepository.prototype.getList = function (callback) {
                    callback([
                        {
                            stationID: 0, type: "ukw", frequency: "100,1", frequencyUnit: "MHz", city: "Freudenstadt Station #0", operator: "MediaBroadcast",
                            power: "1", powerUnit: "kW", rdsid: "FDS100,1", transmitTimesFrom: "00:00:00", transmitTimesTo: "23:59:59",
                            latitude: 48.445190, longitude: 8.530226, transmitterReceptionArea: "48.494866 8.417647 48.539524 8.437176 48.538778 8.492046 48.594002 8.602148 48.526676 8.649936 48.449179 8.692174 48.392013 8.545043 48.326153 8.564997 48.310266 8.368171 48.461093 8.401893 48.494866 8.417647"
                        },
                        {
                            stationID: 1, type: "ukw", frequency: "100,1", frequencyUnit: "MHz", city: "Freudenstadt Station #1", operator: "MediaBroadcast",
                            power: "1", powerUnit: "kW", rdsid: "FDS100,1", transmitTimesFrom: "00:00:00", transmitTimesTo: "23:59:59",
                            latitude: 48.445190, longitude: 8.530226, transmitterReceptionArea: "48.494866 8.417647 48.539524 8.437176 48.538778 8.492046 48.594002 8.602148 48.526676 8.649936 48.449179 8.692174 48.392013 8.545043 48.326153 8.564997 48.310266 8.368171 48.461093 8.401893 48.494866 8.417647"
                        },
                        {
                            stationID: 2, type: "ukw", frequency: "100,1", frequencyUnit: "MHz", city: "Freudenstadt Station #2", operator: "MediaBroadcast",
                            power: "1", powerUnit: "kW", rdsid: "FDS100,1", transmitTimesFrom: "00:00:00", transmitTimesTo: "23:59:59",
                            latitude: 48.445190, longitude: 8.530226, transmitterReceptionArea: "48.494866 8.417647 48.539524 8.437176 48.538778 8.492046 48.594002 8.602148 48.526676 8.649936 48.449179 8.692174 48.392013 8.545043 48.326153 8.564997 48.310266 8.368171 48.461093 8.401893 48.494866 8.417647"
                        }
                    ]);
                };
                MockMediaChannelsLocalRepository.prototype.getListByStationID = function (stationID, callback) {
                    this.getList(function (mediaChannels) {
                        var filtered = new Array();
                        for (var i = 0, length = mediaChannels.length; i < length; ++i) {
                            var currentMediaChannel = mediaChannels[i];
                            if (currentMediaChannel.stationID === stationID) {
                                filtered.push(currentMediaChannel);
                            }
                        }
                        callback(filtered);
                    });
                };
                return MockMediaChannelsLocalRepository;
            }());
            stationdetail.MockMediaChannelsLocalRepository = MockMediaChannelsLocalRepository;
        })(stationdetail = dal_local_mock.stationdetail || (dal_local_mock.stationdetail = {}));
    })(dal_local_mock = freeradios.dal_local_mock || (freeradios.dal_local_mock = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local;
    (function (dal_local) {
        var stationdetail;
        (function (stationdetail) {
            var entities = freeradios.business.entities.stationdetail;
            var SQLMediaChannelsLocalRepository = (function (_super) {
                __extends(SQLMediaChannelsLocalRepository, _super);
                function SQLMediaChannelsLocalRepository() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SQLMediaChannelsLocalRepository.prototype.saveMediaChannelsArray = function (mediaChannels, callback) {
                    this.getContext().beginTransaction();
                    for (var i = 0, length = mediaChannels.length; i < length; ++i) {
                        this.saveMediaChannel(mediaChannels[i], function (success) { });
                    }
                    this.getContext().commitTransaction(function (success) {
                        callback(success);
                    });
                };
                SQLMediaChannelsLocalRepository.prototype.saveMediaChannel = function (mediaChannel, callback) {
                    if (isNaN(mediaChannel.stationID)) {
                        return;
                    }
                    var query = "INSERT INTO mediachannels "
                        + "(mediachannels_stations_id, mediachannels_type, mediachannels_frequency, mediachannels_frequencyunit, mediachannels_city, mediachannels_operator, "
                        + "mediachannels_power, mediachannels_powerunit, mediachannels_rdsid, mediachannels_transmit_times_from, mediachannels_transmit_times_to, "
                        + "mediachannels_transmitter_location_latitude, mediachannels_transmitter_location_longitude, mediachannels_receptionarea) VALUES "
                        + "(:STATIONSID, :TYPE, :FREQUENCY, :FREQUENCYUNIT, :CITY, :OPERATOR, "
                        + ":POWER, :POWERUNIT, :RDSID, :TRANSMITTIMESFROM, :TRANSMITTIMESTO, "
                        + ":LATITUDE, :LONGITUDE, :RECEPTIONAREA);";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":STATIONSID", mediaChannel.stationID);
                    statement.bindValue(":TYPE", mediaChannel.type || "");
                    statement.bindValue(":FREQUENCY", mediaChannel.frequency || "");
                    statement.bindValue(":FREQUENCYUNIT", mediaChannel.frequencyUnit || "");
                    statement.bindValue(":CITY", mediaChannel.city || "");
                    statement.bindValue(":OPERATOR", mediaChannel.operator || "");
                    statement.bindValue(":POWER", mediaChannel.power || "");
                    statement.bindValue(":POWERUNIT", mediaChannel.powerUnit || "");
                    statement.bindValue(":RDSID", mediaChannel.rdsid || "");
                    statement.bindValue(":TRANSMITTIMESFROM", mediaChannel.transmitTimesFrom || "00:00");
                    statement.bindValue(":TRANSMITTIMESTO", mediaChannel.transmitTimesTo || "00:00");
                    statement.bindValue(":LATITUDE", mediaChannel.latitude || 0);
                    statement.bindValue(":LONGITUDE", mediaChannel.longitude || 0);
                    statement.bindValue(":RECEPTIONAREA", mediaChannel.transmitterReceptionArea || "");
                    this.getContext().executeNonResults(statement, callback);
                };
                SQLMediaChannelsLocalRepository.prototype.deleteByStationID = function (stationID, callback) {
                    var statement = this.getContext().query("DELETE FROM mediachannels WHERE mediachannels_stations_id=:STATIONID;");
                    statement.bindValue(":STATIONID", stationID);
                    this.getContext().executeNonResults(statement, callback);
                };
                SQLMediaChannelsLocalRepository.prototype.getList = function (callback) {
                    var statement = this.getContext().query("SELECT * FROM mediachannels ORDER BY mediachannels_stations_id;");
                    this.getListWithStatement(statement, this._getMediaChannelFromSQLResults, callback);
                };
                SQLMediaChannelsLocalRepository.prototype.getListByStationID = function (stationID, callback) {
                    var statement = this.getContext().query("SELECT * FROM mediachannels WHERE mediachannels_stations_id=:STATIONID;");
                    statement.bindValue(":STATIONID", stationID);
                    this.getListWithStatement(statement, this._getMediaChannelFromSQLResults, callback);
                };
                SQLMediaChannelsLocalRepository.prototype._getMediaChannelFromSQLResults = function (results) {
                    var mediaChannel = new entities.MediaChannelsEntity();
                    mediaChannel.stationID = parseInt(results.getValue("mediachannels_stations_id"), 10);
                    mediaChannel.type = results.getValue("mediachannels_type");
                    mediaChannel.frequency = results.getValue("mediachannels_frequency");
                    mediaChannel.frequencyUnit = results.getValue("mediachannels_frequencyunit");
                    mediaChannel.city = results.getValue("mediachannels_city");
                    mediaChannel.operator = results.getValue("mediachannels_operator");
                    mediaChannel.power = results.getValue("mediachannels_power");
                    mediaChannel.powerUnit = results.getValue("mediachannels_powerunit");
                    mediaChannel.rdsid = results.getValue("mediachannels_rdsid");
                    mediaChannel.transmitTimesFrom = results.getValue("mediachannels_transmit_times_from");
                    mediaChannel.transmitTimesTo = results.getValue("mediachannels_transmit_times_to");
                    mediaChannel.latitude = parseFloat(results.getValue("mediachannels_transmitter_location_latitude"));
                    mediaChannel.longitude = parseFloat(results.getValue("mediachannels_transmitter_location_longitude"));
                    mediaChannel.transmitterReceptionArea = results.getValue("mediachannels_receptionarea");
                    return mediaChannel;
                };
                return SQLMediaChannelsLocalRepository;
            }(dal_local.BaseSQLRepository));
            stationdetail.SQLMediaChannelsLocalRepository = SQLMediaChannelsLocalRepository;
        })(stationdetail = dal_local.stationdetail || (dal_local.stationdetail = {}));
    })(dal_local = freeradios.dal_local || (freeradios.dal_local = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local_mock;
    (function (dal_local_mock) {
        var stationdetail;
        (function (stationdetail) {
            var MockStationDetailLocalRepository = (function () {
                function MockStationDetailLocalRepository() {
                }
                MockStationDetailLocalRepository.prototype.saveStationDetailsArray = function (stationDetails, callback) {
                    callback(true);
                };
                MockStationDetailLocalRepository.prototype.saveStationDetail = function (stationDetail, callback) {
                    callback(true);
                };
                MockStationDetailLocalRepository.prototype.deleteByStationID = function (stationID, callback) {
                    callback(true);
                };
                MockStationDetailLocalRepository.prototype.getByStationID = function (stationID, callback) {
                    this.getList(function (entities) {
                        var entity = null;
                        for (var i = 0, length = entities.length; i < length; ++i) {
                            var currentEntity = entities[i];
                            if (currentEntity.stationID === stationID) {
                                entity = currentEntity;
                                break;
                            }
                        }
                        callback(entity);
                    });
                };
                MockStationDetailLocalRepository.prototype.getList = function (callback) {
                    callback([
                        {
                            stationID: 0,
                            displayName: 'Radio StHörfunk',
                            fullName: 'Radio StHörfunk',
                            logoSource: '/img/05_other/logos/05.3_logo-sthoerfunk.png',
                            baseColor: '#0D2C5A',
                            city: 'Freudenstadt',
                            studioStreet: 'Forststrasse',
                            studioStreetNumber: '23',
                            studioCity: 'Freudenstadt',
                            studioZIP: '72250',
                            latitude: 48.466813,
                            longitude: 8.410399,
                            studioStudioPhone: '+49 7441 88 22 2',
                            studioOfficePhone: '+49 7441 88 22 1',
                            studioStudioEMail: 'info@radio-fds.de',
                            studioOfficeEMail: 'info@radio-fds.de',
                            studioOpenTimeFrom: '12:00:00',
                            studioOpenTimeTo: '18:00:00',
                            website: 'http://www.radio-fds.de',
                            lastUpdate: new Date('2015-02-09T12:55:00.6875000+02:00')
                        },
                        {
                            stationID: 1,
                            displayName: 'FluxFM',
                            fullName: 'FluxFM',
                            logoSource: '/img/05_other/logos/05.3_logo-freudenstadt.png',
                            baseColor: '#0D2C5A',
                            city: 'Freudenstadt',
                            studioStreet: 'Forststrasse',
                            studioStreetNumber: '23',
                            studioCity: 'Freudenstadt',
                            studioZIP: '72250',
                            latitude: 48.466813,
                            longitude: 8.410399,
                            studioStudioPhone: '+49 7441 88 22 2',
                            studioOfficePhone: '+49 7441 88 22 1',
                            studioStudioEMail: 'info@radio-fds.de',
                            studioOfficeEMail: 'info@radio-fds.de',
                            studioOpenTimeFrom: '12:00:00',
                            studioOpenTimeTo: '18:00:00',
                            website: 'http://www.radio-fds.de',
                            lastUpdate: new Date('2015-02-09T12:55:00.6875000+02:00')
                        },
                        {
                            stationID: 2,
                            displayName: 'freeFM',
                            fullName: 'freeFMk',
                            logoSource: '/img/05_other/logos/05.3_logo-freeFM.png',
                            baseColor: '#0D2C5A',
                            city: 'Freudenstadt',
                            studioStreet: 'Forststrasse',
                            studioStreetNumber: '23',
                            studioCity: 'Freudenstadt',
                            studioZIP: '72250',
                            latitude: 48.466813,
                            longitude: 8.410399,
                            studioStudioPhone: '+49 7441 88 22 2',
                            studioOfficePhone: '+49 7441 88 22 1',
                            studioStudioEMail: 'info@radio-fds.de',
                            studioOfficeEMail: 'info@radio-fds.de',
                            studioOpenTimeFrom: '12:00:00',
                            studioOpenTimeTo: '18:00:00',
                            website: 'http://www.radio-fds.de',
                            lastUpdate: new Date('2015-02-09T12:55:00.6875000+02:00')
                        }
                    ]);
                };
                MockStationDetailLocalRepository.prototype.searchInDisplayNameAndFullNameAndCity = function (searchText, callback) {
                    this.getList(function (stationDetails) {
                        var searchRegExp = new RegExp(searchText, 'i');
                        var filteredStationsDetails = new Array();
                        for (var i = 0, length = stationDetails.length; i < length; ++i) {
                            var currentStationDetail = stationDetails[i];
                            if (searchRegExp.test(currentStationDetail.fullName) ||
                                searchRegExp.test(currentStationDetail.displayName) ||
                                searchRegExp.test(currentStationDetail.city)) {
                                filteredStationsDetails.push(currentStationDetail);
                            }
                        }
                        callback(filteredStationsDetails);
                    });
                };
                return MockStationDetailLocalRepository;
            }());
            stationdetail.MockStationDetailLocalRepository = MockStationDetailLocalRepository;
        })(stationdetail = dal_local_mock.stationdetail || (dal_local_mock.stationdetail = {}));
    })(dal_local_mock = freeradios.dal_local_mock || (freeradios.dal_local_mock = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local;
    (function (dal_local) {
        var stationdetail;
        (function (stationdetail) {
            var entities = freeradios.business.entities.stationdetail;
            var SQLStationDetailLocalRepository = (function (_super) {
                __extends(SQLStationDetailLocalRepository, _super);
                function SQLStationDetailLocalRepository() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SQLStationDetailLocalRepository.prototype.saveStationDetailsArray = function (stationDetails, callback) {
                    this.getContext().beginTransaction();
                    for (var i = 0, length = stationDetails.length; i < length; ++i) {
                        this.saveStationDetail(stationDetails[i], function (success) { });
                    }
                    this.getContext().commitTransaction(function (success) {
                        callback(success);
                    });
                };
                SQLStationDetailLocalRepository.prototype.saveStationDetail = function (stationDetail, callback) {
                    if (isNaN(stationDetail.stationID)) {
                        return;
                    }
                    var query = "INSERT INTO stations_detail "
                        + "(stations_detail_stations_id, stations_detail_displayname, stations_detail_fullname, stations_detail_logosrc, stations_detail_basecolor, "
                        + "stations_detail_city, stations_detail_studio_street, stations_detail_studio_street_number, stations_detail_studio_city, stations_detail_studio_zip, "
                        + "stations_detail_studio_latitude, stations_detail_studio_longitude, stations_detail_studio_studio_phone, stations_detail_studio_office_phone, "
                        + "stations_detail_studio_studio_email, stations_detail_studio_office_email, stations_detail_studio_open_time_from, stations_detail_studio_open_time_to, "
                        + "stations_detail_studio_website, stations_detail_studio_lastupdate) VALUES "
                        + "(:STATIONSID, :DISPLAYNAME, :FULLNAME, :LOGOSRC, :BASECOLOR, "
                        + ":CITY, :STUDIOSTREET, :STUDIOSTREETNUMBER, :STUDIOCITY, :STUDIOZIP, "
                        + ":STUDIOLATITUDE, :STUDIOLONGITUDE, :STUDIOPHONE, :OFFICEPHONE, "
                        + ":STUDIOEMAIL, :OFFICEEMAIL, :OPENTIMEFROM, :OPENTIMETO, "
                        + ":WEBSITE, :LASTUPDATE);";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":STATIONSID", stationDetail.stationID);
                    statement.bindValue(":DISPLAYNAME", stationDetail.displayName || "");
                    statement.bindValue(":FULLNAME", stationDetail.fullName || "");
                    statement.bindValue(":LOGOSRC", stationDetail.logoSource || "");
                    statement.bindValue(":BASECOLOR", stationDetail.baseColor || "");
                    statement.bindValue(":CITY", stationDetail.city || "");
                    statement.bindValue(":STUDIOSTREET", stationDetail.studioStreet || "");
                    statement.bindValue(":STUDIOSTREETNUMBER", stationDetail.studioStreetNumber || "");
                    statement.bindValue(":STUDIOCITY", stationDetail.studioCity || "");
                    statement.bindValue(":STUDIOZIP", stationDetail.studioZIP || "");
                    statement.bindValue(":STUDIOLATITUDE", stationDetail.latitude || 0);
                    statement.bindValue(":STUDIOLONGITUDE", stationDetail.longitude || 0);
                    statement.bindValue(":STUDIOPHONE", stationDetail.studioStudioPhone || "");
                    statement.bindValue(":OFFICEPHONE", stationDetail.studioOfficePhone || "");
                    statement.bindValue(":STUDIOEMAIL", stationDetail.studioStudioEMail || "");
                    statement.bindValue(":OFFICEEMAIL", stationDetail.studioOfficeEMail || "");
                    statement.bindValue(":OPENTIMEFROM", stationDetail.studioOpenTimeFrom || "");
                    statement.bindValue(":OPENTIMETO", stationDetail.studioOpenTimeTo || "");
                    statement.bindValue(":WEBSITE", stationDetail.website || "");
                    statement.bindValue(":LASTUPDATE", stationDetail.lastUpdate || new Date(0));
                    this.getContext().executeNonResults(statement, callback);
                };
                SQLStationDetailLocalRepository.prototype.deleteByStationID = function (stationID, callback) {
                    var statement = this.getContext().query("DELETE FROM stations_detail WHERE stations_detail_stations_id=:STATIONID;");
                    statement.bindValue(":STATIONID", stationID);
                    this.getContext().executeNonResults(statement, callback);
                };
                SQLStationDetailLocalRepository.prototype.getByStationID = function (stationID, callback) {
                    var statement = this.getContext().query("SELECT * FROM stations_detail WHERE stations_detail_stations_id=:STATIONID LIMIT 1;");
                    statement.bindValue(":STATIONID", stationID);
                    this.getSingleWithStatement(statement, this._getStationDetailFromSQLResults, callback);
                };
                SQLStationDetailLocalRepository.prototype.getList = function (callback) {
                    var statement = this.getContext().query("SELECT * FROM stations_detail ORDER BY stations_detail_displayname COLLATE NOCASE;");
                    this.getListWithStatement(statement, this._getStationDetailFromSQLResults, callback);
                };
                SQLStationDetailLocalRepository.prototype.searchInDisplayNameAndFullNameAndCity = function (searchText, callback) {
                    var query = "SELECT * FROM stations_detail WHERE "
                        + "stations_detail_displayname LIKE :DISPLAYNAME "
                        + "OR stations_detail_fullname LIKE :FULLNAME "
                        + "OR stations_detail_city LIKE :CITY "
                        + "OR stations_detail_studio_city LIKE :STUDIOCITY "
                        + "ORDER BY stations_detail_displayname COLLATE NOCASE;";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":DISPLAYNAME", "%" + searchText + "%");
                    statement.bindValue(":FULLNAME", "%" + searchText + "%");
                    statement.bindValue(":CITY", "%" + searchText + "%");
                    statement.bindValue(":STUDIOCITY", "%" + searchText + "%");
                    this.getListWithStatement(statement, this._getStationDetailFromSQLResults, callback);
                };
                SQLStationDetailLocalRepository.prototype._getStationDetailFromSQLResults = function (results) {
                    var stationDetail = new entities.StationDetailEntity();
                    stationDetail.stationID = parseInt(results.getValue("stations_detail_stations_id"), 10);
                    stationDetail.displayName = results.getValue("stations_detail_displayname");
                    stationDetail.fullName = results.getValue("stations_detail_fullname");
                    stationDetail.logoSource = results.getValue("stations_detail_logosrc");
                    stationDetail.baseColor = results.getValue("stations_detail_basecolor");
                    stationDetail.city = results.getValue("stations_detail_city");
                    stationDetail.studioStreet = results.getValue("stations_detail_studio_street");
                    stationDetail.studioStreetNumber = results.getValue("stations_detail_studio_street_number");
                    stationDetail.studioCity = results.getValue("stations_detail_studio_city");
                    stationDetail.studioZIP = results.getValue("stations_detail_studio_zip");
                    stationDetail.latitude = parseFloat(results.getValue("stations_detail_studio_latitude"));
                    stationDetail.longitude = parseFloat(results.getValue("stations_detail_studio_longitude"));
                    stationDetail.studioStudioPhone = results.getValue("stations_detail_studio_studio_phone");
                    stationDetail.studioOfficePhone = results.getValue("stations_detail_studio_office_phone");
                    stationDetail.studioStudioEMail = results.getValue("stations_detail_studio_studio_email");
                    ;
                    stationDetail.studioOfficeEMail = results.getValue("stations_detail_studio_office_email");
                    stationDetail.studioOpenTimeFrom = results.getValue("stations_detail_studio_open_time_from");
                    stationDetail.studioOpenTimeTo = results.getValue("stations_detail_studio_open_time_to");
                    stationDetail.website = results.getValue("stations_detail_studio_website");
                    stationDetail.lastUpdate = new Date(results.getValue("stations_detail_studio_lastupdate"));
                    return stationDetail;
                };
                return SQLStationDetailLocalRepository;
            }(dal_local.BaseSQLRepository));
            stationdetail.SQLStationDetailLocalRepository = SQLStationDetailLocalRepository;
        })(stationdetail = dal_local.stationdetail || (dal_local.stationdetail = {}));
    })(dal_local = freeradios.dal_local || (freeradios.dal_local = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local_mock;
    (function (dal_local_mock) {
        var stationdetail;
        (function (stationdetail) {
            var entities = freeradios.business.entities.stationdetail;
            var MockTransmitTimeslLocalRepository = (function () {
                function MockTransmitTimeslLocalRepository() {
                }
                MockTransmitTimeslLocalRepository.prototype.saveTransmitTimesArray = function (transmitTimes, callback) {
                    callback(true);
                };
                MockTransmitTimeslLocalRepository.prototype.saveTransmitTime = function (transmitTime, callback) {
                    callback(true);
                };
                MockTransmitTimeslLocalRepository.prototype.deleteByStationID = function (stationID, callback) {
                    callback(true);
                };
                MockTransmitTimeslLocalRepository.prototype.getList = function (callback) {
                    callback(MockTransmitTimeslLocalRepository._baseList);
                };
                MockTransmitTimeslLocalRepository.prototype.getListForDayAndBroadcasts = function (day, broadcasts, callback) {
                    this.getList(function (transmitTimes) {
                        var filtered = new Array();
                        for (var i = 0, length = transmitTimes.length; i < length; ++i) {
                            var currentTransmitTime = transmitTimes[i];
                            if (currentTransmitTime.day === day) {
                                for (var j = 0, lengthJ = broadcasts.length; j < lengthJ; ++j) {
                                    var currentBroadcast = broadcasts[j];
                                    if (currentBroadcast.stationID === currentTransmitTime.stationID && currentBroadcast.id === currentTransmitTime.broadcastsID) {
                                        filtered.push(currentTransmitTime);
                                        break;
                                    }
                                }
                            }
                        }
                        callback(filtered);
                    });
                };
                MockTransmitTimeslLocalRepository.prototype.getListByStationID = function (stationID, callback) {
                    this.getList(function (transmitTimes) {
                        var filtered = new Array();
                        for (var i = 0, length = transmitTimes.length; i < length; ++i) {
                            var currentTransmitTime = transmitTimes[i];
                            if (currentTransmitTime.stationID === stationID) {
                                filtered.push(currentTransmitTime);
                            }
                        }
                        callback(filtered);
                    });
                };
                MockTransmitTimeslLocalRepository.prototype.getListByStationIDAndBroadcastID = function (stationID, broadcastID, callback) {
                    this.getList(function (transmitTimes) {
                        var filtered = new Array();
                        for (var i = 0, length = transmitTimes.length; i < length; ++i) {
                            var currentTransmitTime = transmitTimes[i];
                            if (currentTransmitTime.stationID === stationID && currentTransmitTime.broadcastsID === broadcastID) {
                                filtered.push(currentTransmitTime);
                            }
                        }
                        callback(filtered);
                    });
                };
                MockTransmitTimeslLocalRepository._baseList = [
                    {
                        stationID: 0, broadcastsID: 1, recurrence: true, rerun: false, day: "DO", priority: 0, timeFrom: "03:00:00", timeTo: "04:00:00",
                        week1: true, week2: true, week3: true, week4: true, week5: true, firstWeek: false, lastWeek: false, timeType: entities.enums.TransmitTimesTimeType.weekly,
                        dateOnceFrom: "", dateOnceTo: ""
                    },
                    {
                        stationID: 1, broadcastsID: 7, recurrence: true, rerun: false, day: "MO", priority: 0, timeFrom: "08:00:00", timeTo: "19:00:00",
                        week1: true, week2: true, week3: true, week4: true, week5: true, firstWeek: false, lastWeek: false, timeType: entities.enums.TransmitTimesTimeType.weekOfMonth,
                        dateOnceFrom: "", dateOnceTo: ""
                    },
                    {
                        stationID: 2, broadcastsID: 3, recurrence: true, rerun: false, day: "MO", priority: 0, timeFrom: "08:00:00", timeTo: "19:00:00",
                        week1: true, week2: true, week3: true, week4: true, week5: true, firstWeek: false, lastWeek: false, timeType: entities.enums.TransmitTimesTimeType.weekly,
                        dateOnceFrom: "", dateOnceTo: ""
                    }
                ];
                return MockTransmitTimeslLocalRepository;
            }());
            stationdetail.MockTransmitTimeslLocalRepository = MockTransmitTimeslLocalRepository;
        })(stationdetail = dal_local_mock.stationdetail || (dal_local_mock.stationdetail = {}));
    })(dal_local_mock = freeradios.dal_local_mock || (freeradios.dal_local_mock = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local;
    (function (dal_local) {
        var stationdetail;
        (function (stationdetail) {
            var entities = freeradios.business.entities.stationdetail;
            var enums = freeradios.business.entities.stationdetail.enums;
            var SQLTransmitTimesLocalRepository = (function (_super) {
                __extends(SQLTransmitTimesLocalRepository, _super);
                function SQLTransmitTimesLocalRepository() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SQLTransmitTimesLocalRepository.prototype.saveTransmitTimesArray = function (transmitTimes, callback) {
                    this.getContext().beginTransaction();
                    for (var i = 0, length = transmitTimes.length; i < length; ++i) {
                        this.saveTransmitTime(transmitTimes[i], function (success) { });
                    }
                    this.getContext().commitTransaction(function (success) {
                        callback(success);
                    });
                };
                SQLTransmitTimesLocalRepository.prototype.saveTransmitTime = function (transmitTime, callback) {
                    if (isNaN(transmitTime.stationID) || isNaN(transmitTime.broadcastsID)) {
                        return;
                    }
                    var query = "INSERT INTO transmit_times "
                        + "(transmit_times_stations_id, transmit_times_broadcasts_id, transmit_times_recurrence, transmit_times_rerun, transmit_times_day, "
                        + "transmit_times_priority, transmit_times_time_from, transmit_times_time_to, transmit_times_week1, transmit_times_week2, "
                        + "transmit_times_week3, transmit_times_week4, transmit_times_week5, transmit_times_time_type, transmit_times_first_week, transmit_times_last_week, "
                        + "transmit_times_date_once_from, transmit_times_date_once_to) VALUES "
                        + "(:STATIONSID, :BROADCASTSID, :RECURRENCE, :RERUN, :DAY, "
                        + ":PRIORITY, :TIMEFROM, :TIMETO, :WEEK1, :WEEK2, "
                        + ":WEEK3, :WEEK4, :WEEK5, :TIMETYPE, :FIRSTWEEK, :LASTWEEK, "
                        + ":DATEONCEFROM, :DATEONCETO);";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":STATIONSID", transmitTime.stationID);
                    statement.bindValue(":BROADCASTSID", transmitTime.broadcastsID);
                    statement.bindValue(":RECURRENCE", transmitTime.recurrence || false);
                    statement.bindValue(":RERUN", transmitTime.rerun || false);
                    statement.bindValue(":DAY", transmitTime.day || "");
                    statement.bindValue(":PRIORITY", transmitTime.priority || 0);
                    statement.bindValue(":TIMEFROM", transmitTime.timeFrom || "");
                    statement.bindValue(":TIMETO", transmitTime.timeTo || "");
                    statement.bindValue(":WEEK1", transmitTime.week1 || false);
                    statement.bindValue(":WEEK2", transmitTime.week2 || false);
                    statement.bindValue(":WEEK3", transmitTime.week3 || false);
                    statement.bindValue(":WEEK4", transmitTime.week4 || false);
                    statement.bindValue(":WEEK5", transmitTime.week5 || false);
                    statement.bindValue(":TIMETYPE", transmitTime.timeType);
                    statement.bindValue(":FIRSTWEEK", transmitTime.firstWeek || false);
                    statement.bindValue(":LASTWEEK", transmitTime.lastWeek || false);
                    statement.bindValue(":DATEONCEFROM", transmitTime.dateOnceFrom || "");
                    statement.bindValue(":DATEONCETO", transmitTime.dateOnceTo || "");
                    this.getContext().executeNonResults(statement, callback);
                };
                SQLTransmitTimesLocalRepository.prototype.deleteByStationID = function (stationID, callback) {
                    var statement = this.getContext().query("DELETE FROM transmit_times WHERE transmit_times_stations_id=:STATIONID;");
                    statement.bindValue(":STATIONID", stationID);
                    this.getContext().executeNonResults(statement, callback);
                };
                SQLTransmitTimesLocalRepository.prototype.getList = function (callback) {
                    var statement = this.getContext().query("SELECT * FROM transmit_times ORDER BY transmit_times_stations_id, transmit_times_broadcasts_id;");
                    this.getListWithStatement(statement, this._getTransmitTimeFromSQLResults, callback);
                };
                SQLTransmitTimesLocalRepository.prototype.getListForDayAndBroadcasts = function (day, broadcasts, callback) {
                    var bindings = {};
                    var wherePart = "";
                    for (var i = 0, length = broadcasts.length; i < length; ++i) {
                        var broadcast = broadcasts[i];
                        if (wherePart !== "") {
                            wherePart += " OR ";
                        }
                        wherePart += "(transmit_times_stations_id=:STATIONID" + i + " AND transmit_times_broadcasts_id=:BROADCASTSID" + i + ")";
                        bindings[":STATIONID" + i] = broadcast.stationID;
                        bindings[":BROADCASTSID" + i] = broadcast.id;
                    }
                    var statement = this.getContext().query("SELECT * FROM transmit_times WHERE transmit_times_day=:TRANSMITTIMESDAY AND (" + wherePart + ") ORDER BY transmit_times_stations_id, transmit_times_broadcasts_id;");
                    statement.bindValue(":TRANSMITTIMESDAY", day);
                    for (var key in bindings) {
                        statement.bindValue(key, bindings[key]);
                    }
                    this.getListWithStatement(statement, this._getTransmitTimeFromSQLResults, callback);
                };
                SQLTransmitTimesLocalRepository.prototype.getListByStationID = function (stationID, callback) {
                    var query = "SELECT * FROM transmit_times "
                        + "WHERE transmit_times_stations_id=:STATIONSID "
                        + "ORDER BY transmit_times_stations_id, transmit_times_broadcasts_id;";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":STATIONSID", stationID);
                    this.getListWithStatement(statement, this._getTransmitTimeFromSQLResults, callback);
                };
                SQLTransmitTimesLocalRepository.prototype.getListByStationIDAndBroadcastID = function (stationID, broadcastID, callback) {
                    var query = "SELECT * FROM transmit_times "
                        + "WHERE transmit_times_stations_id=:STATIONSID "
                        + "AND transmit_times_broadcasts_id=:BROADCASTSID "
                        + "ORDER BY transmit_times_stations_id, transmit_times_broadcasts_id;";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":STATIONSID", stationID);
                    statement.bindValue(":BROADCASTSID", broadcastID);
                    this.getListWithStatement(statement, this._getTransmitTimeFromSQLResults, callback);
                };
                SQLTransmitTimesLocalRepository.prototype._getTransmitTimeFromSQLResults = function (results) {
                    var transmitTime = new entities.TransmitTimesEntity();
                    transmitTime.stationID = parseInt(results.getValue("transmit_times_stations_id"), 10);
                    transmitTime.broadcastsID = parseInt(results.getValue("transmit_times_broadcasts_id"), 10);
                    transmitTime.recurrence = results.getValue("transmit_times_recurrence") === "1";
                    transmitTime.rerun = results.getValue("transmit_times_rerun") === "1";
                    transmitTime.day = results.getValue("transmit_times_day");
                    transmitTime.priority = parseInt(results.getValue("transmit_times_priority"), 10);
                    transmitTime.timeFrom = results.getValue("transmit_times_time_from");
                    transmitTime.timeTo = results.getValue("transmit_times_time_to");
                    transmitTime.week1 = results.getValue("transmit_times_week1") === "1";
                    transmitTime.week2 = results.getValue("transmit_times_week2") === "1";
                    transmitTime.week3 = results.getValue("transmit_times_week3") === "1";
                    transmitTime.week4 = results.getValue("transmit_times_week4") === "1";
                    transmitTime.week5 = results.getValue("transmit_times_week5") === "1";
                    transmitTime.firstWeek = results.getValue("transmit_times_first_week") === "1";
                    transmitTime.lastWeek = results.getValue("transmit_times_last_week") === "1";
                    transmitTime.dateOnceFrom = results.getValue("transmit_times_date_once_from");
                    transmitTime.dateOnceTo = results.getValue("transmit_times_date_once_to");
                    if (transmitTime.timeFrom.charAt(0) == ":") {
                        transmitTime.timeFrom = "00" + results.getValue("transmit_times_time_from");
                    }
                    if (transmitTime.timeTo.charAt(0) == ":") {
                        transmitTime.timeTo = "00" + results.getValue("transmit_times_time_to");
                    }
                    switch (results.getValue("transmit_times_time_type")) {
                        case "1":
                            transmitTime.timeType = enums.TransmitTimesTimeType.weekOfMonth;
                            break;
                        case "2":
                            transmitTime.timeType = enums.TransmitTimesTimeType.daily;
                            break;
                        case "3":
                            transmitTime.timeType = enums.TransmitTimesTimeType.once;
                            break;
                        default: transmitTime.timeType = enums.TransmitTimesTimeType.weekly;
                    }
                    return transmitTime;
                };
                return SQLTransmitTimesLocalRepository;
            }(dal_local.BaseSQLRepository));
            stationdetail.SQLTransmitTimesLocalRepository = SQLTransmitTimesLocalRepository;
        })(stationdetail = dal_local.stationdetail || (dal_local.stationdetail = {}));
    })(dal_local = freeradios.dal_local || (freeradios.dal_local = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local_mock;
    (function (dal_local_mock) {
        var stationdetail;
        (function (stationdetail) {
            var MockWebstreamsEntitylLocalRepository = (function () {
                function MockWebstreamsEntitylLocalRepository() {
                }
                MockWebstreamsEntitylLocalRepository.prototype.saveWebstreamsArray = function (webstreams, callback) {
                    callback(true);
                };
                MockWebstreamsEntitylLocalRepository.prototype.saveWebstream = function (webstream, callback) {
                    callback(true);
                };
                MockWebstreamsEntitylLocalRepository.prototype.deleteByStationID = function (stationID, callback) {
                    callback(true);
                };
                MockWebstreamsEntitylLocalRepository.prototype.getList = function (callback) {
                    callback([
                        {
                            stationID: 0,
                            transmitTimesFrom: "00:00:00",
                            transmitTimesTo: "23:59:59",
                            url: "http://stream.sthoerfunk.de:7000/sthoerfunk.ogg",
                            format: "audio/ogg",
                            quality: "128kbps"
                        },
                        {
                            stationID: 1,
                            transmitTimesFrom: "00:00:00",
                            transmitTimesTo: "23:59:59",
                            url: "http://fluxfm.radio.de/",
                            format: "text/html",
                            quality: "128kbps"
                        },
                        {
                            stationID: 2,
                            transmitTimesFrom: "00:00:00",
                            transmitTimesTo: "23:59:59",
                            url: "http://stream.freefm.de:8100/listen.pls",
                            format: "audio/mpeg",
                            quality: "128kbps"
                        }
                    ]);
                };
                MockWebstreamsEntitylLocalRepository.prototype.getListByStationID = function (stationID, callback) {
                    this.getList(function (webstreams) {
                        var filtered = new Array();
                        for (var i = 0, length = webstreams.length; i < length; ++i) {
                            var currentWebstream = webstreams[i];
                            if (currentWebstream.stationID === stationID) {
                                filtered.push(currentWebstream);
                            }
                        }
                        callback(filtered);
                    });
                };
                return MockWebstreamsEntitylLocalRepository;
            }());
            stationdetail.MockWebstreamsEntitylLocalRepository = MockWebstreamsEntitylLocalRepository;
        })(stationdetail = dal_local_mock.stationdetail || (dal_local_mock.stationdetail = {}));
    })(dal_local_mock = freeradios.dal_local_mock || (freeradios.dal_local_mock = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local;
    (function (dal_local) {
        var stationdetail;
        (function (stationdetail) {
            var entities = freeradios.business.entities.stationdetail;
            var SQLWebstreamsLocalRepository = (function (_super) {
                __extends(SQLWebstreamsLocalRepository, _super);
                function SQLWebstreamsLocalRepository() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SQLWebstreamsLocalRepository.prototype.saveWebstreamsArray = function (webstreams, callback) {
                    this.getContext().beginTransaction();
                    for (var i = 0, length = webstreams.length; i < length; ++i) {
                        this.saveWebstream(webstreams[i], function (success) { });
                    }
                    this.getContext().commitTransaction(function (success) {
                        callback(success);
                    });
                };
                SQLWebstreamsLocalRepository.prototype.saveWebstream = function (webstream, callback) {
                    if (isNaN(webstream.stationID)) {
                        return;
                    }
                    var query = "INSERT INTO webstreams "
                        + "(webstreams_stations_id, webstreams_transmit_times_from, webstreams_transmit_times_to, webstreams_url, webstreams_format, webstreams_quality) VALUES "
                        + "(:STATIONSID, :TRANSMITTIMESFROM, :TRANSMITTIMESTO, :URL, :FORMAT, :QUALITY);";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":STATIONSID", webstream.stationID);
                    statement.bindValue(":TRANSMITTIMESFROM", webstream.transmitTimesFrom || "");
                    statement.bindValue(":TRANSMITTIMESTO", webstream.transmitTimesTo || "");
                    statement.bindValue(":URL", webstream.url || "");
                    statement.bindValue(":FORMAT", webstream.format || "");
                    statement.bindValue(":QUALITY", webstream.quality || "");
                    this.getContext().executeNonResults(statement, callback);
                };
                SQLWebstreamsLocalRepository.prototype.deleteByStationID = function (stationID, callback) {
                    var statement = this.getContext().query("DELETE FROM webstreams WHERE webstreams_stations_id=:STATIONID;");
                    statement.bindValue(":STATIONID", stationID);
                    this.getContext().executeNonResults(statement, callback);
                };
                SQLWebstreamsLocalRepository.prototype.getList = function (callback) {
                    var statement = this.getContext().query("SELECT * FROM webstreams ORDER BY webstreams_stations_id;");
                    this.getListWithStatement(statement, this._getWebstreamFromSQLResults, callback);
                };
                SQLWebstreamsLocalRepository.prototype.getListByStationID = function (stationID, callback) {
                    var statement = this.getContext().query("SELECT * FROM webstreams WHERE webstreams_stations_id=:STATIONID;");
                    statement.bindValue(":STATIONID", stationID);
                    this.getListWithStatement(statement, this._getWebstreamFromSQLResults, callback);
                };
                SQLWebstreamsLocalRepository.prototype._getWebstreamFromSQLResults = function (results) {
                    var webstream = new entities.WebstreamsEntity();
                    webstream.stationID = parseInt(results.getValue("webstreams_stations_id"), 10);
                    webstream.transmitTimesFrom = results.getValue("webstreams_transmit_times_from");
                    webstream.transmitTimesTo = results.getValue("webstreams_transmit_times_to");
                    webstream.url = results.getValue("webstreams_url");
                    webstream.format = results.getValue("webstreams_format");
                    webstream.quality = results.getValue("webstreams_quality");
                    return webstream;
                };
                return SQLWebstreamsLocalRepository;
            }(dal_local.BaseSQLRepository));
            stationdetail.SQLWebstreamsLocalRepository = SQLWebstreamsLocalRepository;
        })(stationdetail = dal_local.stationdetail || (dal_local.stationdetail = {}));
    })(dal_local = freeradios.dal_local || (freeradios.dal_local = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var dal_local;
    (function (dal_local) {
        var favorites;
        (function (favorites_2) {
            var entities = freeradios.business.entities.favorites;
            var SQLFavoritesLocalRepository = (function (_super) {
                __extends(SQLFavoritesLocalRepository, _super);
                function SQLFavoritesLocalRepository() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SQLFavoritesLocalRepository.prototype.saveBroadcastFavorite = function (favorite, callback) {
                    if (isNaN(favorite.stationID) || isNaN(favorite.broadcastsID)) {
                        return;
                    }
                    var query = "INSERT INTO broadcasts_favorites "
                        + "(broadcasts_favorites_stations_id, broadcasts_favorites_broadcasts_id) VALUES "
                        + "(:STATIONSID, :BROADCASTSID);";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":STATIONSID", favorite.stationID);
                    statement.bindValue(":BROADCASTSID", favorite.broadcastsID);
                    this.getContext().executeNonResults(statement, callback);
                };
                SQLFavoritesLocalRepository.prototype.deleteBroadcastFavorite = function (favorite, callback) {
                    var query = "DELETE FROM broadcasts_favorites "
                        + "WHERE broadcasts_favorites_stations_id=:STATIONSID "
                        + "AND broadcasts_favorites_broadcasts_id=:BROADCASTSID;";
                    var statement = this.getContext().query(query);
                    statement.bindValue(":STATIONSID", favorite.stationID);
                    statement.bindValue(":BROADCASTSID", favorite.broadcastsID);
                    this.getContext().executeNonResults(statement, callback);
                };
                SQLFavoritesLocalRepository.prototype.getList = function (callback) {
                    var statement = this.getContext().query("SELECT * FROM broadcasts_favorites GROUP BY broadcasts_favorites_stations_id, broadcasts_favorites_broadcasts_id;");
                    this.getListWithStatement(statement, this._getFavoriteFromSQLResults, callback);
                };
                SQLFavoritesLocalRepository.prototype.getListForStation = function (stationID, callback) {
                    var statement = this.getContext().query("SELECT * FROM broadcasts_favorites WHERE broadcasts_favorites_stations_id=:STATIONSID GROUP BY broadcasts_favorites_stations_id, broadcasts_favorites_broadcasts_id;");
                    statement.bindValue(":STATIONSID", stationID);
                    this.getListWithStatement(statement, this._getFavoriteFromSQLResults, callback);
                };
                SQLFavoritesLocalRepository.prototype._getFavoriteFromSQLResults = function (results) {
                    var favorite = new entities.BroadcastsFavoritesEntity();
                    favorite.broadcastsID = parseInt(results.getValue("broadcasts_favorites_broadcasts_id"), 10);
                    favorite.stationID = parseInt(results.getValue("broadcasts_favorites_stations_id"), 10);
                    return favorite;
                };
                return SQLFavoritesLocalRepository;
            }(dal_local.BaseSQLRepository));
            favorites_2.SQLFavoritesLocalRepository = SQLFavoritesLocalRepository;
        })(favorites = dal_local.favorites || (dal_local.favorites = {}));
    })(dal_local = freeradios.dal_local || (freeradios.dal_local = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var view;
        (function (view) {
            var handlebarsview;
            (function (handlebarsview) {
                var helpers;
                (function (helpers) {
                    var HBConditionHelper = (function () {
                        function HBConditionHelper() {
                        }
                        HBConditionHelper.ifInArray = function (needle, haystack, options) {
                            for (var i = 0, length = haystack.length; i < length; ++i) {
                                if (needle === haystack[i]) {
                                    return options.fn(this);
                                }
                            }
                            return options.inverse(this);
                        };
                        return HBConditionHelper;
                    }());
                    helpers.HBConditionHelper = HBConditionHelper;
                })(helpers = handlebarsview.helpers || (handlebarsview.helpers = {}));
            })(handlebarsview = view.handlebarsview || (view.handlebarsview = {}));
        })(view = presentation.view || (presentation.view = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var view;
        (function (view) {
            var handlebarsview;
            (function (handlebarsview) {
                var helpers;
                (function (helpers) {
                    var HBDateHelper = (function () {
                        function HBDateHelper() {
                        }
                        HBDateHelper.timeHourAndMinute = function (timeString) {
                            if (timeString.length > 5) {
                                return timeString.substring(0, 5);
                            }
                            return timeString;
                        };
                        HBDateHelper.dateNumeric = function (date) {
                            var dateString = HBDateHelper._formatDateSegment(date.getDate())
                                + "." + HBDateHelper._formatDateSegment(date.getMonth() + 1)
                                + "." + date.getFullYear();
                            return dateString;
                        };
                        HBDateHelper.dateFull = function (date) {
                            var dateString = HBDateHelper._formatDateSegment(date.getDate())
                                + ". " + HBDateHelper._monthNames[date.getMonth()]
                                + " " + date.getFullYear();
                            return dateString;
                        };
                        HBDateHelper.dateTimeNumeric = function (date) {
                            var dateTimeString = HBDateHelper.dateNumeric(date)
                                + ", " + HBDateHelper._formatDateSegment(date.getHours())
                                + ":" + HBDateHelper._formatDateSegment(date.getMinutes())
                                + "Uhr";
                            return dateTimeString;
                        };
                        HBDateHelper.dateTimeFull = function (date) {
                            var dateTimeString = HBDateHelper.dateFull(date)
                                + ", " + HBDateHelper._formatDateSegment(date.getHours())
                                + ":" + HBDateHelper._formatDateSegment(date.getMinutes())
                                + "Uhr";
                            return dateTimeString;
                        };
                        HBDateHelper._formatDateSegment = function (segment) {
                            return segment < 10 ? "0" + segment : String(segment);
                        };
                        HBDateHelper._monthNames = [
                            "Januar",
                            "Februar",
                            "März",
                            "April",
                            "Mai",
                            "Juni",
                            "Juli",
                            "August",
                            "September",
                            "Oktober",
                            "November",
                            "Dezember"
                        ];
                        return HBDateHelper;
                    }());
                    helpers.HBDateHelper = HBDateHelper;
                })(helpers = handlebarsview.helpers || (handlebarsview.helpers = {}));
            })(handlebarsview = view.handlebarsview || (view.handlebarsview = {}));
        })(view = presentation.view || (presentation.view = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var view;
        (function (view) {
            var handlebarsview;
            (function (handlebarsview) {
                var helpers;
                (function (helpers) {
                    var HBStringHelper = (function () {
                        function HBStringHelper() {
                        }
                        HBStringHelper.shortenString = function (text, maxLength) {
                            var numericMaxLength = parseInt(maxLength, 10);
                            if (text.length > numericMaxLength) {
                                return text.substring(0, numericMaxLength - 3) + "...";
                            }
                            return text;
                        };
                        return HBStringHelper;
                    }());
                    helpers.HBStringHelper = HBStringHelper;
                })(helpers = handlebarsview.helpers || (handlebarsview.helpers = {}));
            })(handlebarsview = view.handlebarsview || (view.handlebarsview = {}));
        })(view = presentation.view || (presentation.view = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var view;
        (function (view) {
            var handlebarsview;
            (function (handlebarsview) {
                var helpers;
                (function (helpers) {
                    var HBTransmitTimeHelper = (function () {
                        function HBTransmitTimeHelper() {
                        }
                        HBTransmitTimeHelper.transmitTimeStringInfo = function (transmitTime) {
                            var dateString;
                            if (transmitTime.timeType === freeradios.business.entities.stationdetail.enums.TransmitTimesTimeType.weekly) {
                                dateString = "Wöchentlich " + transmitTime.day;
                            }
                            else {
                                var weeks = new Array();
                                if (transmitTime.week1 || transmitTime.firstWeek) {
                                    weeks.push("1.");
                                }
                                if (transmitTime.week2) {
                                    weeks.push("2.");
                                }
                                if (transmitTime.week3) {
                                    weeks.push("3.");
                                }
                                if (transmitTime.week4) {
                                    weeks.push("4.");
                                }
                                if (transmitTime.week5) {
                                    weeks.push("5.");
                                }
                                if (transmitTime.lastWeek) {
                                    weeks.push("letzten");
                                }
                                var weeksString;
                                if (weeks.length > 1) {
                                    weeksString = weeks.slice(0, weeks.length - 1).join(", ");
                                    weeksString += " und " + weeks[weeks.length - 1];
                                }
                                else {
                                    weeksString = weeks[0];
                                }
                                dateString = "Jeden " + weeksString + " " + transmitTime.day + " im Monat";
                            }
                            return dateString + " | " + helpers.HBDateHelper.timeHourAndMinute(transmitTime.timeFrom) + " - " + helpers.HBDateHelper.timeHourAndMinute(transmitTime.timeTo);
                        };
                        return HBTransmitTimeHelper;
                    }());
                    helpers.HBTransmitTimeHelper = HBTransmitTimeHelper;
                })(helpers = handlebarsview.helpers || (handlebarsview.helpers = {}));
            })(handlebarsview = view.handlebarsview || (view.handlebarsview = {}));
        })(view = presentation.view || (presentation.view = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var view;
        (function (view_1) {
            var handlebarsview;
            (function (handlebarsview) {
                var HandlebarsView = (function () {
                    function HandlebarsView() {
                        this._templatePath = null;
                        this._masterView = null;
                        this._assignments = {};
                        this._templateCode = "";
                        this._updateCallbacks = new Array();
                        this._registerHelpers();
                    }
                    HandlebarsView.prototype.setTemplatePath = function (path) {
                        this._templatePath = path;
                    };
                    HandlebarsView.prototype.setMasterView = function (view) {
                        this._masterView = view;
                    };
                    HandlebarsView.prototype.assign = function (key, value) {
                        this._assignments[key] = value;
                    };
                    HandlebarsView.prototype.render = function (callback) {
                        if (this._templatePath === null) {
                            throw "Template path must be set before rendering.";
                        }
                        if (HandlebarsView._templateCache[this._templatePath] !== undefined) {
                            this._renderWithTemplateCode(HandlebarsView._templateCache[this._templatePath], callback);
                        }
                        else {
                            (function (self) {
                                self._fetchTemplateCode(function (html) {
                                    self._renderWithTemplateCode(html, callback);
                                });
                            }(this));
                        }
                    };
                    HandlebarsView.prototype.updateView = function (partSelector) {
                        var templateCode = $("<div>" + this._templateCode + "</div>").find(partSelector).wrap("<div></div>").parent().html();
                        var node = $(partSelector);
                        var htmlCode = this._buildHTMLCode(templateCode, partSelector);
                        node.replaceWith(htmlCode);
                        this._triggerUpdateCallbacks(partSelector);
                    };
                    HandlebarsView.prototype.updateAssignments = function (parentSelector) {
                        var htmlCode = this._buildHTMLCode(this._templateCode, parentSelector);
                        var parent = $(parentSelector);
                        parent.html(htmlCode);
                        this._triggerUpdateCallbacks(parentSelector);
                    };
                    HandlebarsView.prototype.addUpdateCallback = function (callback) {
                        this._updateCallbacks.push(callback);
                    };
                    HandlebarsView.prototype.preloadTemplate = function (path, partSelectors) {
                        if (HandlebarsView._templateCache[path] !== undefined) {
                            var templateCode = HandlebarsView._templateCache[path];
                            this._cacheTemplate(templateCode, path);
                            if (partSelectors !== undefined) {
                                for (var i = 0, length = partSelectors.length; i < length; ++i) {
                                    var partSelector = partSelectors[i];
                                    var partTemplateCode = $("<div>" + templateCode + "</div>").find(partSelector).wrap("<div></div>").parent().html();
                                    this._cacheTemplate(partTemplateCode, path, partSelector);
                                }
                            }
                        }
                        else {
                            (function (self) {
                                self._fetchTemplateCode(function (html) {
                                    self.preloadTemplate(path, partSelectors);
                                }, path);
                            }(this));
                        }
                    };
                    HandlebarsView.prototype._triggerUpdateCallbacks = function (partSelector) {
                        for (var i = 0, length = this._updateCallbacks.length; i < length; ++i) {
                            this._updateCallbacks[i](partSelector);
                        }
                    };
                    HandlebarsView.prototype._fetchTemplateCode = function (callback, path) {
                        if (path === undefined) {
                            path = this._templatePath;
                        }
                        (function (self) {
                            $.ajax({
                                url: path,
                                dataType: "html",
                                type: "GET",
                                success: function (templateCode) {
                                    HandlebarsView._templateCache[path] = templateCode;
                                    callback(templateCode);
                                }
                            });
                        }(this));
                    };
                    HandlebarsView.prototype._renderWithTemplateCode = function (templateCode, callback) {
                        this._templateCode = templateCode;
                        var htmlCode = this._buildHTMLCode(templateCode);
                        if (this._masterView !== null) {
                            this._masterView.assign("content", htmlCode);
                            this._masterView.render(callback);
                        }
                        else {
                            callback(htmlCode);
                        }
                    };
                    HandlebarsView.prototype._buildHTMLCode = function (templateCode, partSelector) {
                        var template = this._cacheTemplate(templateCode, this._templatePath, partSelector);
                        return template(this._assignments);
                    };
                    HandlebarsView.prototype._cacheTemplate = function (templateCode, path, partSelector) {
                        if (partSelector === undefined) {
                            partSelector = "";
                        }
                        var cacheKey = path + partSelector;
                        if (HandlebarsView._templateDelegateCache[cacheKey] === undefined) {
                            var options = {
                                data: false,
                                compat: false,
                                knownHelpers: this._getKnownHelpers(),
                                knownHelpersOnly: true,
                                trackIds: false,
                                assumeObjects: true
                            };
                            var templateSpec;
                            eval("templateSpec=" + Handlebars.precompile(templateCode, options));
                            HandlebarsView._templateDelegateCache[cacheKey] = Handlebars.template(templateSpec);
                        }
                        return HandlebarsView._templateDelegateCache[cacheKey];
                    };
                    HandlebarsView.prototype._getKnownHelpers = function () {
                        var knownHelpers = {
                            ifInArray: true,
                            timeHourAndMinute: true,
                            dateNumeric: true,
                            dateFull: true,
                            dateTimeNumeric: true,
                            dateTimeFull: true,
                            shortenString: true,
                            transmitTimeStringInfo: true
                        };
                        return knownHelpers;
                    };
                    HandlebarsView.prototype._registerHelpers = function () {
                        Handlebars.registerHelper("ifInArray", handlebarsview.helpers.HBConditionHelper.ifInArray);
                        Handlebars.registerHelper("timeHourAndMinute", handlebarsview.helpers.HBDateHelper.timeHourAndMinute);
                        Handlebars.registerHelper("dateNumeric", handlebarsview.helpers.HBDateHelper.dateNumeric);
                        Handlebars.registerHelper("dateFull", handlebarsview.helpers.HBDateHelper.dateFull);
                        Handlebars.registerHelper("dateTimeNumeric", handlebarsview.helpers.HBDateHelper.dateTimeNumeric);
                        Handlebars.registerHelper("dateTimeFull", handlebarsview.helpers.HBDateHelper.dateTimeFull);
                        Handlebars.registerHelper("shortenString", handlebarsview.helpers.HBStringHelper.shortenString);
                        Handlebars.registerHelper("transmitTimeStringInfo", handlebarsview.helpers.HBTransmitTimeHelper.transmitTimeStringInfo);
                    };
                    HandlebarsView._templateCache = {};
                    HandlebarsView._templateDelegateCache = {};
                    return HandlebarsView;
                }());
                handlebarsview.HandlebarsView = HandlebarsView;
            })(handlebarsview = view_1.handlebarsview || (view_1.handlebarsview = {}));
        })(view = presentation.view || (presentation.view = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var navigation;
        (function (navigation) {
            var URLParameters = (function () {
                function URLParameters() {
                }
                URLParameters.buildURL = function (routeName, parameters) {
                    var queryString = "";
                    for (var key in parameters) {
                        if (queryString === "") {
                            queryString += "?";
                        }
                        else {
                            queryString += "&";
                        }
                        queryString += key + "=" + parameters[key];
                    }
                    return routeName + queryString;
                };
                URLParameters.getParametersFromURL = function (url) {
                    var parameters = {};
                    var queryString = this.getQueryStringFromURL(url);
                    while (queryString.indexOf("?") === 0) {
                        queryString = queryString.substr(1);
                    }
                    if (queryString.replace(/[ \r\n\t]/g, "") === "") {
                        return parameters;
                    }
                    var keysAndValues = queryString.split("&");
                    for (var i = 0, length = keysAndValues.length; i < length; ++i) {
                        var keyValuePair = keysAndValues[i].split("=");
                        parameters[keyValuePair[0]] = keyValuePair[1];
                    }
                    return parameters;
                };
                URLParameters.getQueryStringFromURL = function (url) {
                    var questionmarkPosition = url.indexOf("?");
                    if (questionmarkPosition >= 0) {
                        return url.substring(questionmarkPosition);
                    }
                    else {
                        return "";
                    }
                };
                URLParameters.getRouteNameFromURL = function (url) {
                    var questionmarkPosition = url.indexOf("?");
                    if (questionmarkPosition >= 0) {
                        return url.substring(0, questionmarkPosition);
                    }
                    else {
                        return url;
                    }
                };
                URLParameters.getParameterBoolean = function (key) {
                    var stringValue = this.getParameter(key);
                    return stringValue === "true" || stringValue === "1";
                };
                URLParameters.getParameterNumber = function (key) {
                    var stringValue = this.getParameter(key);
                    return stringValue === null ? 0 : parseFloat(stringValue);
                };
                URLParameters.getParameter = function (key) {
                    var hash = window.location.hash.toString();
                    var startPosition = hash.indexOf("?" + key + "=");
                    if (startPosition < 0) {
                        startPosition = hash.indexOf("&" + key + "=");
                    }
                    if (startPosition >= 0) {
                        return URLParameters._getParameterWithPosition(hash, startPosition + key.length + 2);
                    }
                    return null;
                };
                URLParameters._getParameterWithPosition = function (hash, valueStart) {
                    var hashPart = hash.substring(valueStart);
                    var ampPosition = hashPart.indexOf("&");
                    if (hashPart.indexOf("&") >= 0) {
                        return hashPart.substr(0, hashPart.indexOf("&"));
                    }
                    return hashPart;
                };
                return URLParameters;
            }());
            navigation.URLParameters = URLParameters;
        })(navigation = utilities.navigation || (utilities.navigation = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var router;
        (function (router) {
            var RouteEntry = (function () {
                function RouteEntry(controllerType, transition) {
                    this._controllerType = controllerType;
                    this._transition = transition;
                    this._parameters = {};
                }
                RouteEntry.prototype.setParameter = function (key, value) {
                    this._parameters[key] = String(value);
                };
                RouteEntry.prototype.getURL = function (oldURL) {
                    var routeName = freeradios.utilities.navigation.URLParameters.getRouteNameFromURL(oldURL);
                    var oldParameters = freeradios.utilities.navigation.URLParameters.getParametersFromURL(oldURL);
                    for (var key in this._parameters) {
                        oldParameters[key] = this._parameters[key];
                    }
                    return freeradios.utilities.navigation.URLParameters.buildURL(routeName, oldParameters);
                };
                RouteEntry.prototype.instanceController = function () {
                    return new this._controllerType();
                };
                RouteEntry.prototype.getTransition = function () {
                    return this._transition;
                };
                return RouteEntry;
            }());
            router.RouteEntry = RouteEntry;
        })(router = presentation.router || (presentation.router = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var transition;
        (function (transition) {
            var standard;
            (function (standard) {
                var StandardSlideTransition = (function () {
                    function StandardSlideTransition() {
                    }
                    StandardSlideTransition.prototype.play = function (mainContainerID, lastHTML, nextHTML, reverse, finishCallback) {
                        var mainContainer = $("#" + mainContainerID);
                        var sign = reverse ? "+" : "-";
                        this._prepareElements(mainContainer, nextHTML, reverse, sign);
                        this._playAnimation(mainContainer, nextHTML, sign, finishCallback);
                    };
                    StandardSlideTransition.prototype._prepareElements = function (mainContainer, nextHTML, reverse, sign) {
                        var lastPage = $("<div class=\"slideTransitionPage last\"></div>");
                        mainContainer.children().wrapAll(lastPage);
                        var nextPage = $("<div class=\"slideTransitionPage next\">" + nextHTML + "</div>");
                        if (reverse) {
                            lastPage.addClass("reverse");
                            nextPage.addClass("reverse");
                        }
                        mainContainer.append(nextPage);
                        var pageWrapper = $("<div class=\"slideTransitionPageWrapper\"></div>");
                        mainContainer.children().wrapAll(pageWrapper);
                    };
                    StandardSlideTransition.prototype._playAnimation = function (mainContainer, nextHTML, sign, finishCallback) {
                        var callbackFired = false;
                        $(".slideTransitionPage").animate({
                            left: sign + "=" + $(window).width() + "px"
                        }, 300, "swing", function () {
                            if (!callbackFired) {
                                callbackFired = true;
                                mainContainer.children().remove();
                                mainContainer.append(nextHTML);
                                finishCallback();
                            }
                        });
                    };
                    return StandardSlideTransition;
                }());
                standard.StandardSlideTransition = StandardSlideTransition;
            })(standard = transition.standard || (transition.standard = {}));
        })(transition = presentation.transition || (presentation.transition = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var runtime;
        (function (runtime) {
            var RuntimeInfo = (function () {
                function RuntimeInfo() {
                }
                RuntimeInfo.isExecutingInBrowser = function () {
                    var phonegapObject = window.phonegap || null;
                    var PhoneGapObject = window.PhoneGap || null;
                    var cordovaObject = window.cordova || null;
                    var CordovaObject = window.Cordova || null;
                    return !(phonegapObject !== null || PhoneGapObject !== null || cordovaObject !== null || CordovaObject !== null);
                };
                RuntimeInfo.isAndroid = function () {
                    return /android/i.test(navigator.userAgent.toString().toLowerCase());
                };
                RuntimeInfo.isIOS = function () {
                    return !RuntimeInfo.isExecutingInBrowser() && !RuntimeInfo.isAndroid();
                };
                RuntimeInfo.initDevice = function () {
                };
                return RuntimeInfo;
            }());
            runtime.RuntimeInfo = RuntimeInfo;
        })(runtime = utilities.runtime || (utilities.runtime = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var location;
        (function (location) {
            var GeolocationHelper = (function () {
                function GeolocationHelper(updateInterval) {
                    this._latitude = null;
                    this._longitude = null;
                    this._setIntervalHandle = null;
                    this._updateInterval = updateInterval;
                    this.setEnabled(this._loadSetting("geolocation_enabled") !== "false");
                }
                GeolocationHelper.prototype.setEnabled = function (state) {
                    if (state) {
                        this._saveSetting('geolocation_enabled', 'true');
                        this._createListeners();
                    }
                    else {
                        this._saveSetting('geolocation_enabled', 'false');
                        this._uncreateListeners();
                        this._latitude = null;
                        this._longitude = null;
                    }
                    this._enabled = state;
                };
                GeolocationHelper.prototype.getEnabled = function () {
                    return this._enabled;
                };
                GeolocationHelper.prototype.getLatitude = function () {
                    return this._latitude;
                };
                GeolocationHelper.prototype.getLongitude = function () {
                    return this._longitude;
                };
                GeolocationHelper.prototype._createListeners = function () {
                    if (this._setIntervalHandle === null) {
                        (function (self) {
                            self._setIntervalHandle = setInterval(function () {
                                self._updateLocation();
                            }, self._updateInterval);
                            self._updateLocation();
                        }(this));
                    }
                };
                GeolocationHelper.prototype._uncreateListeners = function () {
                    if (this._setIntervalHandle !== null) {
                        clearInterval(this._setIntervalHandle);
                        this._setIntervalHandle = null;
                    }
                };
                GeolocationHelper.prototype._updateLocation = function () {
                    if (this._enabled) {
                        (function (self) {
                            if (!freeradios.utilities.runtime.RuntimeInfo.isExecutingInBrowser()) {
                                navigator.geolocation.getCurrentPosition(function (position) {
                                    self._latitude = position.coords.latitude;
                                    self._longitude = position.coords.longitude;
                                }, function (error) {
                                    self._latitude = null;
                                    self._longitude = null;
                                    self.setEnabled(false);
                                }, { timeout: 5000 });
                            }
                        }(this));
                    }
                    else {
                        this._latitude = null;
                        this._longitude = null;
                    }
                };
                GeolocationHelper.prototype._saveSetting = function (key, value) {
                    localStorage.setItem(key, value);
                };
                GeolocationHelper.prototype._loadSetting = function (key) {
                    return localStorage.getItem(key);
                };
                return GeolocationHelper;
            }());
            location.GeolocationHelper = GeolocationHelper;
        })(location = presentation.location || (presentation.location = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var runtime;
        (function (runtime) {
            var PlatformEvent = (function () {
                function PlatformEvent() {
                }
                PlatformEvent.bindClickListener = function (selector, callback) {
                    PlatformEvent.bindClickListenerJQuery($(selector), function (e, target) {
                        callback();
                    });
                };
                PlatformEvent.bindClickListenerJQuery = function (elements, callback) {
                    if (runtime.RuntimeInfo.isExecutingInBrowser()) {
                        elements.click(function (e) {
                            callback(e, $(e.target));
                        });
                    }
                    else {
                        var dragging = false;
                        var moveStarted = false;
                        var moved = 0;
                        var lastX = 0;
                        var lastY = 0;
                        $("body").on("touchmove", function (e) {
                            var originalEvent = e.originalEvent;
                            var touch = originalEvent.touches[0];
                            var x = touch.pageX;
                            var y = touch.pageY;
                            if (moved > 3) {
                                dragging = true;
                            }
                            else if (moveStarted) {
                                moved += Math.abs(x - lastX) + Math.abs(y - lastY);
                            }
                            else {
                                moveStarted = true;
                            }
                            lastX = x;
                            lastY = y;
                        });
                        $("body").on("touchend", function () {
                            dragging = false;
                            moveStarted = false;
                            moved = 0;
                        });
                        $("body").on("touchcancel", function () {
                            dragging = false;
                            moveStarted = false;
                            moved = 0;
                        });
                        elements.on("touchend", function (e) {
                            if (!dragging) {
                                var originalEvent = e.originalEvent;
                                var x = e.originalEvent.changedTouches[0].pageX - window.pageXOffset;
                                var y = e.originalEvent.changedTouches[0].pageY - window.pageYOffset;
                                var target = $(document.elementFromPoint(x, y));
                                if (target !== null && (target.is(elements) || target.parents().is(elements))) {
                                    callback(e, target);
                                }
                                dragging = false;
                                moved = 0;
                                moveStarted = false;
                            }
                        });
                    }
                };
                return PlatformEvent;
            }());
            runtime.PlatformEvent = PlatformEvent;
        })(runtime = utilities.runtime || (utilities.runtime = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var controller;
        (function (controller) {
            var di = freeradios.utilities.di;
            var MasterController = (function () {
                function MasterController(pageTitle, childTemplatePath, view, masterView) {
                    this._pageTitle = pageTitle;
                    this._view = di.DIContainer.get("freeradios.presentation.view.IView", view);
                    this._view.setTemplatePath(childTemplatePath);
                    this._masterView = di.DIContainer.get("freeradios.presentation.view.IView", masterView);
                    this._masterView.setTemplatePath("templates/master.html");
                    this._view.setMasterView(this._masterView);
                    this._router = null;
                }
                MasterController.prototype.setRouter = function (router) {
                    this._router = router;
                };
                MasterController.prototype.getRouter = function () {
                    return this._router;
                };
                MasterController.prototype.getView = function () {
                    return this._view;
                };
                MasterController.prototype.getMasterView = function () {
                    return this._masterView;
                };
                MasterController.prototype.createView = function (callback) {
                    if (this._router.getHistory().hasEntries()) {
                        this._masterView.assign("logoCSSClass", "hidden");
                        this._masterView.assign("backButtonCSSClass", "");
                    }
                    else {
                        this._masterView.assign("backButtonCSSClass", "hidden");
                        this._masterView.assign("logoCSSClass", "");
                    }
                    this._masterView.assign("popupCSSClass", "hidden");
                    this._masterView.assign("pageTitle", this._pageTitle);
                    callback(this._view);
                };
                MasterController.prototype.destroyView = function () {
                    this._view = null;
                    this._masterView = null;
                };
                MasterController.prototype.onready = function () {
                    $("*[data-popup-menu-show]").each(function () {
                        freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(this), function () {
                            $(".popup").slideDown(500, "swing");
                        });
                    });
                    $("*[data-popup-menu-close]").each(function () {
                        freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(this), function () {
                            $(".popup").slideUp(500, "swing");
                        });
                    });
                };
                return MasterController;
            }());
            controller.MasterController = MasterController;
        })(controller = presentation.controller || (presentation.controller = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var service;
        (function (service) {
            var station;
            (function (station_4) {
                var di = freeradios.utilities.di;
                var StationService = (function () {
                    function StationService(repository) {
                        this._repository = di.DIContainer.get("freeradios.business.contracts.station.IStationLocalRepository", repository);
                    }
                    StationService.prototype.getByID = function (id, callback) {
                        this._repository.getByID(id, callback);
                    };
                    StationService.prototype.getStationList = function (callback) {
                        this._repository.getStationList(callback);
                    };
                    StationService.prototype.search = function (searchText, callback) {
                        this._repository.searchInNameAndCity(searchText, callback);
                    };
                    return StationService;
                }());
                station_4.StationService = StationService;
            })(station = service.station || (service.station = {}));
        })(service = business.service || (business.service = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var service;
        (function (service) {
            var station;
            (function (station) {
                var di = freeradios.utilities.di;
                var StationSyncService = (function () {
                    function StationSyncService(localRepository, webRepository) {
                        this._localRepository = di.DIContainer.get("freeradios.business.contracts.station.IStationLocalRepository", localRepository);
                        this._webRepository = di.DIContainer.get("freeradios.business.contracts.station.IStationWebRepository", webRepository);
                    }
                    StationSyncService.prototype.sync = function (callback) {
                        (function (self) {
                            self._webRepository.getStationList(function (stations) {
                                self._localRepository.deleteAll(function (success) {
                                    self._localRepository.saveStationArray(stations, function (success) {
                                        callback(success);
                                    });
                                });
                            }, function () {
                                callback(false);
                            });
                        }(this));
                    };
                    return StationSyncService;
                }());
                station.StationSyncService = StationSyncService;
            })(station = service.station || (service.station = {}));
        })(service = business.service || (business.service = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var service;
        (function (service) {
            var stationdetail;
            (function (stationdetail) {
                var di = freeradios.utilities.di;
                var StationDetailSyncService = (function () {
                    function StationDetailSyncService(webRepository, localRepositoryBroadcasts, localRepositoryBroadcasts2Categories, localRepositoryCategories, localRepositoryMediaChannels, localRepositoryStationDetail, localRepositoryTransmitTimes, localRepositoryWebstreams) {
                        this._webRepository = di.DIContainer.get("freeradios.business.contracts.stationdetail.IStationDetailWebRepository", webRepository);
                        this._localRepositoryBroadcasts = di.DIContainer.get("freeradios.business.contracts.stationdetail.IBroadcastsLocalRepository", localRepositoryBroadcasts);
                        this._localRepositoryBroadcasts2Categories = di.DIContainer.get("freeradios.business.contracts.stationdetail.IBroadcasts2CategoriesLocalRepository", localRepositoryBroadcasts2Categories);
                        this._localRepositoryCategories = di.DIContainer.get("freeradios.business.contracts.stationdetail.ICategoriesLocalRepository", localRepositoryCategories);
                        this._localRepositoryMediaChannels = di.DIContainer.get("freeradios.business.contracts.stationdetail.IMediaChannelsLocalRepository", localRepositoryMediaChannels);
                        this._localRepositoryStationDetail = di.DIContainer.get("freeradios.business.contracts.stationdetail.IStationDetailLocalRepository", localRepositoryStationDetail);
                        this._localRepositoryTransmitTimes = di.DIContainer.get("freeradios.business.contracts.stationdetail.ITransmitTimesLocalRepository", localRepositoryTransmitTimes);
                        this._localRepositoryWebstreams = di.DIContainer.get("freeradios.business.contracts.stationdetail.IWebstreamsLocalRepository", localRepositoryWebstreams);
                    }
                    StationDetailSyncService.prototype.sync = function (station, callback) {
                        (function (self) {
                            self._updateLocalCategories(function () {
                                self._webRepository.loadData(station.xmlURI, function () {
                                    self._syncStationDetails(station.id, callback);
                                }, function () {
                                    callback(false);
                                });
                            });
                        }(this));
                    };
                    StationDetailSyncService.prototype._requiresUpdate = function (stationID, stationDetailWebEntity, callback) {
                        if (stationDetailWebEntity === null) {
                            callback(false);
                        }
                        else {
                            this._localRepositoryStationDetail.getByStationID(stationID, function (stationDetailLocalEntity) {
                                if (stationDetailLocalEntity === null) {
                                    callback(true);
                                }
                                else {
                                    callback(stationDetailLocalEntity.lastUpdate.getTime() !== stationDetailWebEntity.lastUpdate.getTime());
                                }
                            });
                        }
                    };
                    StationDetailSyncService.prototype._syncStationDetails = function (stationID, callback) {
                        (function (self) {
                            self._localRepositoryStationDetail.deleteByStationID(stationID, function (success) {
                                var stationDetailEntity = self._webRepository.getStationDetailEntity(stationID);
                                self._requiresUpdate(stationID, stationDetailEntity, function (updateRequired) {
                                    self._localRepositoryStationDetail.saveStationDetail(stationDetailEntity, function (success) {
                                        if (success) {
                                            if (updateRequired) {
                                                self._syncMediaChannels(stationID, callback);
                                            }
                                            else {
                                                callback(true);
                                            }
                                        }
                                        else {
                                            callback(false);
                                        }
                                    });
                                });
                            });
                        }(this));
                    };
                    StationDetailSyncService.prototype._syncMediaChannels = function (stationID, callback) {
                        (function (self) {
                            self._localRepositoryMediaChannels.deleteByStationID(stationID, function (success) {
                                self._localRepositoryMediaChannels.saveMediaChannelsArray(self._webRepository.getMediaChannelsEntities(stationID), function (success) {
                                    if (success) {
                                        self._syncWebstreams(stationID, callback);
                                    }
                                    else {
                                        callback(false);
                                    }
                                });
                            });
                        }(this));
                    };
                    StationDetailSyncService.prototype._syncWebstreams = function (stationID, callback) {
                        (function (self) {
                            self._localRepositoryWebstreams.deleteByStationID(stationID, function (success) {
                                self._localRepositoryWebstreams.saveWebstreamsArray(self._webRepository.getWebstreamsEntities(stationID), function (success) {
                                    if (success) {
                                        self._syncBroadcasts(stationID, callback);
                                    }
                                    else {
                                        callback(false);
                                    }
                                });
                            });
                        }(this));
                    };
                    StationDetailSyncService.prototype._syncBroadcasts = function (stationID, callback) {
                        (function (self) {
                            self._localRepositoryBroadcasts.deleteByStationID(stationID, function (success) {
                                var broadcasts = self._webRepository.getBroadcastsEntities(stationID);
                                self._localRepositoryBroadcasts.saveBroadcastsArray(broadcasts, function (success) {
                                    if (success) {
                                        self._reflagFavorites(stationID, function (success) {
                                            if (success) {
                                                self._syncBroadcasts2Categories(stationID, callback);
                                            }
                                            else {
                                                callback(false);
                                            }
                                        });
                                    }
                                    else {
                                        callback(false);
                                    }
                                });
                            });
                        }(this));
                    };
                    StationDetailSyncService.prototype._reflagFavorites = function (stationID, callback) {
                        (function (self) {
                            self._localRepositoryBroadcasts.reflagIsFavoriteFromBroadcastsFavorites(stationID, function (success) {
                                callback(success);
                            });
                        }(this));
                    };
                    StationDetailSyncService.prototype._syncBroadcasts2Categories = function (stationID, callback) {
                        (function (self) {
                            self._localRepositoryBroadcasts2Categories.deleteByStationID(stationID, function (success) {
                                self._localRepositoryBroadcasts2Categories.saveConnectionsArray(self._webRepository.getBroadcasts2CategoriesEntity(self._getCategoryNamesToEntities(), stationID), function (success) {
                                    if (success) {
                                        self._syncTransmitTimes(stationID, callback);
                                    }
                                    else {
                                        callback(false);
                                    }
                                });
                            });
                        }(this));
                    };
                    StationDetailSyncService.prototype._syncTransmitTimes = function (stationID, callback) {
                        (function (self) {
                            self._localRepositoryTransmitTimes.deleteByStationID(stationID, function (success) {
                                self._localRepositoryTransmitTimes.saveTransmitTimesArray(self._webRepository.getTransmitTimeEntities(stationID), function (success) {
                                    callback(success);
                                });
                            });
                        }(this));
                    };
                    StationDetailSyncService.prototype._updateLocalCategories = function (callback) {
                        (function (self) {
                            self._localRepositoryCategories.getCategoryList(function (categories) {
                                self._categoryNamesToEntities = {};
                                for (var i = 0, length = categories.length; i < length; ++i) {
                                    var category = categories[i];
                                    self._categoryNamesToEntities[category.name] = category;
                                }
                                callback();
                            });
                        }(this));
                    };
                    StationDetailSyncService.prototype._getCategoryNamesToEntities = function () {
                        return this._categoryNamesToEntities;
                    };
                    return StationDetailSyncService;
                }());
                stationdetail.StationDetailSyncService = StationDetailSyncService;
            })(stationdetail = service.stationdetail || (service.stationdetail = {}));
        })(service = business.service || (business.service = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var sync;
        (function (sync) {
            var SyncManager = (function () {
                function SyncManager() {
                }
                SyncManager.sync = function () {
                    var stationSyncService = new freeradios.business.service.station.StationSyncService();
                    var stationService = new freeradios.business.service.station.StationService();
                    stationSyncService.sync(function (success) {
                        var stationDetailService = new freeradios.business.service.stationdetail.StationDetailSyncService();
                        var stations = stationService.getStationList(function (stations) {
                            SyncManager._syncNextStationDetail(stationDetailService, stations, 0, stations.length);
                        });
                    });
                };
                SyncManager.addUpdatableController = function (controller) {
                    SyncManager._updateableControllers.push(controller);
                };
                SyncManager.removeUpdatableController = function (controller) {
                    for (var i = 0, length = SyncManager._updateableControllers.length; i < length; ++i) {
                        var currentController = SyncManager._updateableControllers[i];
                        if (currentController === controller) {
                            SyncManager._updateableControllers.splice(i, 1);
                            this.removeUpdatableController(controller);
                            break;
                        }
                    }
                };
                SyncManager._syncNextStationDetail = function (stationDetailService, stations, index, length) {
                    if (index < length) {
                        stationDetailService.sync(stations[index], function (success) {
                            SyncManager._syncNextStationDetail(stationDetailService, stations, index + 1, length);
                        });
                    }
                    else {
                        SyncManager._triggerControllerUpdates();
                    }
                };
                SyncManager._triggerControllerUpdates = function () {
                    for (var i = 0, length = SyncManager._updateableControllers.length; i < length; ++i) {
                        SyncManager._updateableControllers[i].updateController();
                    }
                };
                SyncManager._updateableControllers = new Array();
                return SyncManager;
            }());
            sync.SyncManager = SyncManager;
        })(sync = presentation.sync || (presentation.sync = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var controller;
        (function (controller) {
            var MasterUpdatableController = (function (_super) {
                __extends(MasterUpdatableController, _super);
                function MasterUpdatableController() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                MasterUpdatableController.prototype.onready = function () {
                    _super.prototype.onready.call(this);
                    presentation.sync.SyncManager.addUpdatableController(this);
                };
                MasterUpdatableController.prototype.destroyView = function () {
                    _super.prototype.destroyView.call(this);
                    presentation.sync.SyncManager.removeUpdatableController(this);
                };
                MasterUpdatableController.prototype.updateController = function () {
                    (function (self) {
                        var view = self.getView();
                        self.updateViewAssignments(view, function () {
                            view.updateAssignments(".content");
                            self.bindListeners();
                        });
                    }(this));
                };
                MasterUpdatableController.prototype.updateViewAssignments = function (view, finishCallback) {
                    throw "Method \"updateViewAssignments\" must be implemented!";
                };
                MasterUpdatableController.prototype.bindListeners = function () {
                    throw "Method \"bindListeners\" must be implemented!";
                };
                return MasterUpdatableController;
            }(controller.MasterController));
            controller.MasterUpdatableController = MasterUpdatableController;
        })(controller = presentation.controller || (presentation.controller = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var audio;
        (function (audio) {
            var LiveStreamOverlay = (function () {
                function LiveStreamOverlay() {
                }
                LiveStreamOverlay.show = function (stationName) {
                    this._createLayer();
                    this._layer.find(".positionedText").text(stationName + " - Livestream");
                    this._layer.fadeIn();
                    $("#container").addClass("withCurrentLiveStream");
                };
                LiveStreamOverlay.hide = function () {
                    if (this._layer !== null) {
                        this._layer.remove();
                        this._layer = null;
                        $("#container").removeClass("withCurrentLiveStream");
                    }
                };
                LiveStreamOverlay._createLayer = function () {
                    if (this._layer === null) {
                        this._layer = $("<div class=\"currentLiveStream\"><div class=\"text\"><span class=\"positionedText\"></span></div><a class=\"close\"></a></div>");
                        this._layer.hide();
                        (function (self) {
                            self._layer.find(".close").click(function () {
                                self.hide();
                                audio.StreamPlayer.stop();
                            });
                        }(this));
                        $(document.body).append(this._layer);
                    }
                };
                LiveStreamOverlay._layer = null;
                return LiveStreamOverlay;
            }());
            audio.LiveStreamOverlay = LiveStreamOverlay;
        })(audio = utilities.audio || (utilities.audio = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var audio;
        (function (audio) {
            var LoadingSpinner = (function () {
                function LoadingSpinner() {
                }
                LoadingSpinner.show = function () {
                    this._createLayer();
                    this._layer.show();
                };
                LoadingSpinner.hide = function () {
                    if (this._layer !== null) {
                        this._layer.remove();
                        this._layer = null;
                    }
                };
                LoadingSpinner._createLayer = function () {
                    if (this._layer === null) {
                        this._layer = $("<div class=\"liveStreamSpinnerLayer\"><div class=\"text\">Lade Livestream...</div></div>");
                        this._layer.hide();
                        $(document.body).append(this._layer);
                    }
                };
                LoadingSpinner._layer = null;
                return LoadingSpinner;
            }());
            audio.LoadingSpinner = LoadingSpinner;
        })(audio = utilities.audio || (utilities.audio = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var audio;
        (function (audio) {
            var helpers;
            (function (helpers) {
                var AudioPlayerFactory = (function () {
                    function AudioPlayerFactory() {
                    }
                    AudioPlayerFactory.create = function () {
                        var audioElement = document.createElement("audio");
                        document.body.appendChild(audioElement);
                        return audioElement;
                    };
                    AudioPlayerFactory.destroy = function (audioPlayer) {
                        if (document.body.contains(audioPlayer)) {
                            document.body.removeChild(audioPlayer);
                        }
                    };
                    return AudioPlayerFactory;
                }());
                helpers.AudioPlayerFactory = AudioPlayerFactory;
            })(helpers = audio.helpers || (audio.helpers = {}));
        })(audio = utilities.audio || (utilities.audio = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var audio;
        (function (audio) {
            var formatplayers;
            (function (formatplayers) {
                var SoundFileFormatPlayer = (function () {
                    function SoundFileFormatPlayer(url) {
                        this._player = audio.helpers.AudioPlayerFactory.create();
                        this._player.addEventListener("loadeddata", function () {
                            audio.LoadingSpinner.hide();
                        });
                        this._player.src = url;
                    }
                    SoundFileFormatPlayer.prototype.play = function () {
                        audio.LoadingSpinner.show();
                        this._player.play();
                    };
                    SoundFileFormatPlayer.prototype.stop = function () {
                        this._player.pause();
                        audio.LoadingSpinner.hide();
                    };
                    SoundFileFormatPlayer.prototype.destruct = function () {
                        audio.helpers.AudioPlayerFactory.destroy(this._player);
                        this._player = null;
                    };
                    return SoundFileFormatPlayer;
                }());
                formatplayers.SoundFileFormatPlayer = SoundFileFormatPlayer;
            })(formatplayers = audio.formatplayers || (audio.formatplayers = {}));
        })(audio = utilities.audio || (utilities.audio = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var audio;
        (function (audio) {
            var formatplayers;
            (function (formatplayers) {
                var PlsFormatPlayer = (function () {
                    function PlsFormatPlayer(url) {
                        this._player = audio.helpers.AudioPlayerFactory.create();
                        this._player.addEventListener("loadeddata", function () {
                            audio.LoadingSpinner.hide();
                        });
                        this._player.play();
                        (function (self) {
                            self._loadPlayerURL(url, function (streamURL) {
                                self._initPlayer(streamURL);
                            });
                        }(this));
                    }
                    PlsFormatPlayer.prototype.play = function () {
                        audio.LoadingSpinner.show();
                        if (!this._player.paused) {
                            this._player.play();
                        }
                    };
                    PlsFormatPlayer.prototype.stop = function () {
                        audio.LoadingSpinner.hide();
                        this._player.pause();
                    };
                    PlsFormatPlayer.prototype.destruct = function () {
                        audio.helpers.AudioPlayerFactory.destroy(this._player);
                        this._player = null;
                    };
                    PlsFormatPlayer.prototype._initPlayer = function (playerURL) {
                        var dotPosition = playerURL.lastIndexOf(".");
                        var extension = dotPosition >= 0 ? playerURL.substr(dotPosition + 1).toLowerCase : "";
                        switch (extension) {
                            case "ogg":
                            case "mp3":
                            case "wav":
                                this._player.src = playerURL;
                                break;
                            case "pls":
                                this._player.src = playerURL + ";";
                                break;
                            default:
                                this._player.src = playerURL + ";";
                                break;
                        }
                    };
                    PlsFormatPlayer.prototype._loadPlayerURL = function (plsURL, callback) {
                        $.ajax({
                            url: plsURL,
                            type: "GET",
                            dataType: "text",
                            async: true,
                            success: function (data) {
                                var playerUrl = data.replace(/[\r\t ]*/g, "").substr(data.indexOf("File1=") + 6);
                                var linebreakPos = playerUrl.indexOf("\n");
                                if (linebreakPos >= 0) {
                                    playerUrl = playerUrl.substr(0, linebreakPos);
                                }
                                callback(playerUrl.replace(/[\r\t\n ]*/, ''));
                            }
                        });
                    };
                    return PlsFormatPlayer;
                }());
                formatplayers.PlsFormatPlayer = PlsFormatPlayer;
            })(formatplayers = audio.formatplayers || (audio.formatplayers = {}));
        })(audio = utilities.audio || (utilities.audio = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var web;
        (function (web) {
            var LinkHandler = (function () {
                function LinkHandler() {
                }
                LinkHandler.openURLInBrowser = function (url) {
                    if (utilities.runtime.RuntimeInfo.isExecutingInBrowser()) {
                        window.open(url, "_blank");
                    }
                    else if (navigator.userAgent.match(/android/i)) {
                        navigator.app.loadUrl(url, { openExternal: true });
                    }
                    else {
                        window.open(url, "_system");
                    }
                };
                LinkHandler.openEMailClient = function (mailAddress) {
                    if (utilities.runtime.RuntimeInfo.isExecutingInBrowser()) {
                        window.open("mailto:" + mailAddress, "_self");
                    }
                    else if (navigator.userAgent.match(/android/i)) {
                        navigator.app.loadUrl("mailto:" + mailAddress);
                    }
                    else {
                        window.open("mailto:" + mailAddress, "_system");
                    }
                };
                LinkHandler.callPhoneNumber = function (phoneNumber) {
                    if (utilities.runtime.RuntimeInfo.isExecutingInBrowser()) {
                        alert("Calling phone number \"" + phoneNumber + "\" is not possible in a web browser.");
                    }
                    else if (navigator.userAgent.match(/android/i)) {
                        navigator.app.loadUrl("tel:" + phoneNumber);
                    }
                    else {
                        window.open("tel:" + phoneNumber, "_system");
                    }
                };
                return LinkHandler;
            }());
            web.LinkHandler = LinkHandler;
        })(web = utilities.web || (utilities.web = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var audio;
        (function (audio) {
            var formatplayers;
            (function (formatplayers) {
                var BrowserFormatPlayer = (function () {
                    function BrowserFormatPlayer(url) {
                        this._url = url;
                    }
                    BrowserFormatPlayer.prototype.play = function () {
                        utilities.web.LinkHandler.openURLInBrowser(this._url);
                    };
                    BrowserFormatPlayer.prototype.stop = function () {
                    };
                    BrowserFormatPlayer.prototype.destruct = function () {
                    };
                    return BrowserFormatPlayer;
                }());
                formatplayers.BrowserFormatPlayer = BrowserFormatPlayer;
            })(formatplayers = audio.formatplayers || (audio.formatplayers = {}));
        })(audio = utilities.audio || (utilities.audio = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var audio;
        (function (audio) {
            var StreamPlayer = (function () {
                function StreamPlayer() {
                }
                StreamPlayer.play = function (url, stationName) {
                    this.stop();
                    this._formatPlayer = this._createPlayer(url, stationName);
                    if (this._formatPlayer !== null) {
                        this._formatPlayer.play();
                    }
                };
                StreamPlayer.stop = function () {
                    if (this._formatPlayer !== null) {
                        this._formatPlayer.stop();
                        this._formatPlayer.destruct();
                        this._formatPlayer = null;
                    }
                };
                StreamPlayer._createPlayer = function (url, stationName) {
                    var dotPosition = url.lastIndexOf(".");
                    var extension = dotPosition >= 0 ? url.substr(dotPosition + 1).toLowerCase() : "";
                    switch (extension) {
                        case "ogg":
                        case "mp3":
                        case "wav":
                            audio.LiveStreamOverlay.show(stationName);
                            return new audio.formatplayers.SoundFileFormatPlayer(url);
                        case "pls":
                            if (utilities.runtime.RuntimeInfo.isExecutingInBrowser()) {
                                alert("Can't fetch PLS stream in browser. Please try another stream.");
                                return null;
                            }
                            else {
                                audio.LiveStreamOverlay.show(stationName);
                                return new audio.formatplayers.PlsFormatPlayer(url);
                            }
                        default:
                            audio.LiveStreamOverlay.hide();
                            return new audio.formatplayers.BrowserFormatPlayer(url);
                    }
                };
                StreamPlayer._formatPlayer = null;
                return StreamPlayer;
            }());
            audio.StreamPlayer = StreamPlayer;
        })(audio = utilities.audio || (utilities.audio = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var controller;
        (function (controller_1) {
            var home;
            (function (home) {
                var stationService = freeradios.business.service.station;
                var MapController = (function (_super) {
                    __extends(MapController, _super);
                    function MapController(view, masterView) {
                        var _this = _super.call(this, "Freie Radios", "templates/home/map.html", view, masterView) || this;
                        _this.markers = [];
                        _this.mapMarkers = [];
                        _this.map = null;
                        _this._stationService = new stationService.StationService();
                        return _this;
                    }
                    MapController.prototype.createView = function (callback) {
                        _super.prototype.createView.call(this, function (view) {
                            callback(view);
                        });
                    };
                    MapController.prototype.updateViewAssignments = function (view, finishCallback) {
                        finishCallback();
                    };
                    MapController.prototype.destroyView = function () {
                        _super.prototype.destroyView.call(this);
                    };
                    MapController.prototype.onready = function () {
                        _super.prototype.onready.call(this);
                        this.bindListeners();
                    };
                    MapController.prototype.bindListeners = function () {
                        var that = this;
                        this._stationService.getStationList(function (stations) {
                            that.markers = stations;
                            that.initMap();
                            that.initInfoMarker();
                            that.initZoomControl();
                        });
                    };
                    MapController.prototype.initMap = function () {
                        this._initMapOverlay();
                        var styles = this.getStyle();
                        var latlng = new google.maps.LatLng(48.400574, 9.991202);
                        var styledMap = new google.maps.StyledMapType(styles, { name: "Styled Map" });
                        var markerURL = "img/01_map/01.1_POI.png";
                        var mapOptions = {
                            zoom: 6,
                            zoomControl: false,
                            zoomControlOptions: {
                                style: google.maps.ZoomControlStyle.SMALL,
                                position: google.maps.ControlPosition.RIGHT_TOP
                            },
                            disableDoubleClickZoom: true,
                            panControl: false,
                            mapTypeControl: false,
                            streetViewControl: false,
                            center: latlng,
                            mapTypeId: google.maps.MapTypeId.TERRAIN
                        };
                        this.map = new google.maps.Map(document.getElementById("map"), mapOptions);
                        this.map.mapTypes.set('map_style', styledMap);
                        this.map.setMapTypeId('map_style');
                        var that = this;
                        for (var i = 0; i < this.markers.length; i++) {
                            var markerData = this.markers[i];
                            var marker = new google.maps.Marker({
                                position: new google.maps.LatLng(markerData.latitude, markerData.longitude),
                                map: this.map,
                                title: markerData.name,
                                icon: { url: markerURL, size: new google.maps.Size(95, 80), scaledSize: new google.maps.Size(95, 80), anchor: new google.maps.Point(24, 80) }
                            });
                            (function (marker, markerData) {
                                google.maps.event.addListener(marker, "click", function () {
                                    var markerPosition = this.position;
                                    if (markerData.eventIsOn != true) {
                                        that.map.addListener("zoom_changed", function () {
                                            that.infoMarker.changePosition(markerPosition);
                                            markerData.eventIsOn = true;
                                        });
                                    }
                                    that.infoMarker.changePosition(this.position);
                                    that.infoMarker.setVisible(true);
                                    that.infoMarker.setName(markerData.name);
                                    that.infoMarker.setInfo(markerData.city + " | " + markerData.frequency);
                                    that.infoMarker.setStream(markerData.streamURL);
                                    that.infoMarker.setStationID(markerData.id);
                                    that.infoMarker.anchor = new google.maps.Point(100, 0);
                                    for (var j = 0; j < that.mapMarkers.length; j++) {
                                        that.mapMarkers[j].setVisible(true);
                                    }
                                    this.setVisible(false);
                                });
                            }(marker, markerData));
                            this.mapMarkers.push(marker);
                        }
                    };
                    MapController.prototype._initMapOverlay = function () {
                        if ($("#mapOverlay").length === 0) {
                            var mapOverlay = $("<div id=\"mapOverlay\"></div>");
                            mapOverlay.css({
                                width: $(window).width() + "px",
                                height: $(window).height() + "px"
                            });
                            $("#container").append(mapOverlay);
                        }
                    };
                    MapController.prototype.initInfoMarker = function () {
                        var markerInfoURL = "img/01_map/01.1_POI-pressed.png";
                        var playURL = "img/01_map/01.1_POI-pressed-play.png";
                        cM.prototype = new google.maps.OverlayView();
                        this.infoMarker = new cM(this.map);
                        var that = this;
                        function cM(map) {
                            this.map = map;
                            this.div = null;
                            this.title = null;
                            this.setMap(map);
                            this.draw = function () { };
                            this.changePosition = function (pos) {
                                var point = this.getProjection().fromLatLngToDivPixel(pos);
                                var width = parseInt(window.getComputedStyle(this.div).width.replace("px", "")) / 2;
                                var height = parseInt(window.getComputedStyle(this.div).height.replace("px", ""));
                                this.div.style.left = point.x - width + 30 + "px";
                                this.div.style.top = point.y - height + "px";
                            };
                            this.setVisible = function (bool) {
                                if (bool) {
                                    this.div.style.display = "block";
                                }
                                else {
                                    this.div.style.display = "none";
                                }
                            };
                            this.setName = function (name) { this.name.innerHTML = name; this.title = name; };
                            this.setInfo = function (info) { this.info.innerHTML = info; };
                            this.setStream = function (stream) { this.stream = stream; };
                            this.setStationID = function (stationID) { this.stationID = stationID; };
                        }
                        var controller = this;
                        cM.prototype.onAdd = function () {
                            this.div = document.createElement("div");
                            this.div.style.width = "303px";
                            this.div.style.height = "83px";
                            this.div.style.position = "absolute";
                            this.img = document.createElement("img");
                            this.img.src = markerInfoURL;
                            this.img.style.width = "285px";
                            this.img.style.height = "83px";
                            this.div.appendChild(this.img);
                            this.container = document.createElement("div");
                            this.container.style.position = "absolute";
                            this.container.style.top = "0";
                            this.container.style.left = "0";
                            this.container.style.display = "flex";
                            this.container.style.width = "inherit";
                            this.container.style.height = "inherit";
                            this.div.appendChild(this.container);
                            this.infos = document.createElement("div");
                            var that = this;
                            google.maps.event.addDomListener(this.infos, "click", function () {
                                controller.getRouter().followURL("broadcastinfo?station_id=" + that.stationID);
                            });
                            this.infos.style.width = "240px";
                            this.infos.style.height = "80px";
                            this.container.appendChild(this.infos);
                            this.name = document.createElement("p");
                            this.name.style.fontFamily = "SourceSansProBold";
                            this.name.style.fontSize = "18px";
                            this.name.innerHTML = "FreeFM";
                            this.name.style.position = "absolute";
                            this.name.style.color = "#fff";
                            this.name.style.top = "-8px";
                            this.name.style.left = "40px";
                            this.infos.appendChild(this.name);
                            this.info = document.createElement("span");
                            this.info.style.fontFamily = "SourceSansProLight";
                            this.info.style.fontSize = "15px";
                            this.info.innerHTML = "Ulm";
                            this.info.style.position = "absolute";
                            this.info.style.color = "#999CA0";
                            this.info.style.top = "35px";
                            this.info.style.left = "40px";
                            this.infos.appendChild(this.info);
                            this.play = document.createElement("img");
                            this.play.src = playURL;
                            this.play.style.width = "63px";
                            this.play.style.height = "63px";
                            this.play.style.position = "absolute";
                            this.play.style.right = "13px";
                            this.play.style.borderBottomRightRadius = "3px";
                            this.play.style.borderTopRightRadius = "3px";
                            var that = this;
                            google.maps.event.addDomListener(this.play, "click", function () {
                                var streamURL = that.stream;
                                var stationName = that.title;
                                freeradios.utilities.audio.StreamPlayer.play(streamURL, stationName);
                            });
                            this.div.appendChild(this.play);
                            var panes = this.getPanes();
                            panes.overlayLayer.appendChild(this.div);
                            panes.overlayMouseTarget.appendChild(this.div);
                            this.setVisible(false);
                        };
                        google.maps.event.addListener(this.map, "click", function (e) {
                            if (e.preventDefault) {
                                e.preventDefault();
                            }
                            if (e.stopPropagation) {
                                e.stoppropagation();
                            }
                            that.infoMarker.setVisible(false);
                            for (var i = 0; i < that.mapMarkers.length; i++) {
                                that.mapMarkers[i].setVisible(true);
                            }
                        });
                    };
                    MapController.prototype.initZoomControl = function () {
                        var zoomControl = document.createElement("div");
                        zoomControl.classList.add("zoomControl");
                        zoomControl.style.position = "fixed";
                        zoomControl.style.paddingTop = "15px";
                        zoomControl.style.paddingRight = "10px";
                        var zoomIn = document.createElement("div");
                        zoomIn.classList.add("zoomIn");
                        var zoomOut = document.createElement("div");
                        zoomOut.classList.add("zoomOut");
                        zoomIn.style.backgroundImage = "url(img/01_map/01.1_button_zoom-in.png)";
                        zoomIn.style.backgroundRepeat = "no-repeat";
                        zoomIn.style.backgroundSize = "100%";
                        zoomIn.style.width = "";
                        zoomIn.style.height = "";
                        zoomIn.style.margin = "";
                        zoomOut.style.backgroundImage = "url(img/01_map/01.1_button_zoom-out.png)";
                        zoomOut.style.width = "";
                        zoomOut.style.height = "";
                        zoomOut.style.margin = "";
                        zoomOut.style.backgroundRepeat = "no-repeat";
                        zoomOut.style.backgroundSize = "100%";
                        zoomControl.appendChild(zoomIn);
                        zoomControl.appendChild(zoomOut);
                        var that = this;
                        google.maps.event.addDomListener(zoomIn, 'click', function () {
                            that.map.setZoom(that.map.getZoom() + 1);
                        });
                        google.maps.event.addDomListener(zoomOut, 'click', function () {
                            that.map.setZoom(that.map.getZoom() - 1);
                        });
                        this.map.controls[google.maps.ControlPosition.RIGHT_TOP].push(zoomControl);
                    };
                    MapController.prototype.getStyle = function () {
                        var styles = [
                            {
                                featureType: "landscape",
                                stylers: [
                                    { color: "#EDEDED" }
                                ]
                            },
                            {
                                featureType: "road",
                                stylers: [
                                    { color: "#CCCCCC" }
                                ]
                            },
                            {
                                featureType: "road",
                                elementType: "labels",
                                stylers: [
                                    { visibility: "off" }
                                ]
                            },
                            {
                                featureType: "poi",
                                stylers: [
                                    { color: "#EDEDED" }
                                ]
                            },
                            {
                                featureType: "administrative.country",
                                elementType: "geometry",
                                stylers: [
                                    { color: "#111111" }
                                ]
                            },
                            {
                                featureType: "administrative.province",
                                elementType: "geometry.stroke",
                                stylers: [
                                    { color: "#808080" }
                                ]
                            },
                            {
                                featureType: "water",
                                stylers: [
                                    { color: "#111111" }
                                ]
                            }
                        ];
                        return styles;
                    };
                    return MapController;
                }(controller_1.MasterUpdatableController));
                home.MapController = MapController;
            })(home = controller_1.home || (controller_1.home = {}));
        })(controller = presentation.controller || (presentation.controller = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var location;
        (function (location) {
            var di = freeradios.utilities.di;
            var DistanceSorting = (function () {
                function DistanceSorting(helper) {
                    this._helper = di.DIContainer.get("freeradios.presentation.location.GeolocationHelper", helper);
                }
                DistanceSorting.prototype.sortStationDetailsByCurrentDistance = function (stationDetails) {
                    return this._sortArrayByCurrentDistance(stationDetails);
                };
                DistanceSorting.prototype.sortMediaChannelsByCurrentDistance = function (mediaChannels) {
                    return this._sortArrayByCurrentDistance(mediaChannels);
                };
                DistanceSorting.prototype.sortStationsByCurrentDistance = function (stations) {
                    return this._sortArrayByCurrentDistance(stations);
                };
                DistanceSorting.prototype._sortArrayByCurrentDistance = function (dataArray) {
                    var latitude = this._helper.getLatitude();
                    var longitude = this._helper.getLongitude();
                    if (latitude !== null && longitude !== null) {
                        return DistanceSorting._sortArrayByDistance(dataArray, latitude, longitude);
                    }
                    return dataArray;
                };
                DistanceSorting._sortArrayByDistance = function (dataArray, latitude, longitude) {
                    dataArray.sort(function (dataSetA, dataSetB) {
                        var distanceA = DistanceSorting._getDistance(dataSetA, latitude, longitude);
                        var distanceB = DistanceSorting._getDistance(dataSetB, latitude, longitude);
                        return distanceA - distanceB;
                    });
                    return dataArray;
                };
                DistanceSorting._getDistance = function (dataSet, latitude, longitude) {
                    var distanceTemp = Math.sin(DistanceSorting._degreesToRadians(dataSet.latitude)) * Math.sin(DistanceSorting._degreesToRadians(latitude))
                        + Math.cos(DistanceSorting._degreesToRadians(dataSet.latitude)) * Math.cos(DistanceSorting._degreesToRadians(latitude))
                            * Math.cos(DistanceSorting._degreesToRadians(dataSet.longitude) - DistanceSorting._degreesToRadians(longitude));
                    return Math.acos(distanceTemp) * 6380;
                };
                DistanceSorting._degreesToRadians = function (degrees) {
                    return degrees * Math.PI / 180;
                };
                return DistanceSorting;
            }());
            location.DistanceSorting = DistanceSorting;
        })(location = presentation.location || (presentation.location = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var controller;
        (function (controller) {
            var home;
            (function (home) {
                var stationService = freeradios.business.service.station;
                var ListController = (function (_super) {
                    __extends(ListController, _super);
                    function ListController(view, masterView, geolocationHelper) {
                        var _this = _super.call(this, "Freie Radios", "templates/home/list.html", view, masterView) || this;
                        _this._stationService = new stationService.StationService();
                        _this._distanceSorting = new presentation.location.DistanceSorting();
                        _this._geolocationHelper = freeradios.utilities.di.DIContainer.get("freeradios.presentation.location.GeolocationHelper", geolocationHelper);
                        _this._sortByDistance = freeradios.utilities.navigation.URLParameters.getParameterBoolean("sort_by_distance") && _this._geolocationHelper.getEnabled();
                        _this._searchText = freeradios.utilities.navigation.URLParameters.getParameter("search") || "";
                        return _this;
                    }
                    ListController.prototype.createView = function (callback) {
                        var self = this;
                        _super.prototype.createView.call(this, function (view) {
                            self.updateViewAssignments(view, function () {
                                callback(view);
                            });
                        });
                    };
                    ListController.prototype.sortByName = function (stations) {
                        return stations.sort(function (s1, s2) {
                            return s1.name.toLowerCase().localeCompare(s2.name.toLowerCase());
                        });
                    };
                    ListController.prototype.updateViewAssignments = function (view, finishCallback) {
                        (function (self) {
                            if (self._searchText.replace(/[ \r\n\t]/g, "").length > 0) {
                                self._stationService.search(self._searchText, function (stations) {
                                    if (self._sortByDistance) {
                                        stations = self._distanceSorting.sortStationsByCurrentDistance(stations);
                                    }
                                    else {
                                        stations = self.sortByName(stations);
                                    }
                                    view.assign("searchText", self._searchText);
                                    view.assign("sortByDistance", self._sortByDistance);
                                    view.assign("stations", stations);
                                    finishCallback();
                                });
                            }
                            else {
                                self._stationService.getStationList(function (stations) {
                                    if (self._sortByDistance) {
                                        stations = self._distanceSorting.sortStationsByCurrentDistance(stations);
                                    }
                                    else {
                                        stations = self.sortByName(stations);
                                    }
                                    view.assign("stations", stations);
                                    finishCallback();
                                });
                            }
                        }(this));
                    };
                    ListController.prototype.destroyView = function () {
                        _super.prototype.destroyView.call(this);
                    };
                    ListController.prototype.onready = function () {
                        _super.prototype.onready.call(this);
                        this.bindListeners();
                    };
                    ListController.prototype.bindListeners = function () {
                        if (!this._geolocationHelper.getEnabled()) {
                            $("#searchMethod").hide();
                        }
                        (function (self) {
                            $("#searchInput").keyup(function () {
                                self._searchText = $("#searchInput").val();
                                self.getRouter().setParameter("search", self._searchText);
                                self._updateList();
                            });
                            freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($("#searchIcon"), function () {
                                self._searchText = $("#searchInput").val();
                                self.getRouter().setParameter("search", self._searchText);
                                self._updateList();
                            });
                            freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($("#searchMethod"), function () {
                                if (self._geolocationHelper.getEnabled()) {
                                    self._sortByDistance = !self._sortByDistance;
                                    if (self._sortByDistance) {
                                        $("#searchMethod").attr("src", "img/02_list/toggle-button_ABC.png");
                                    }
                                    else {
                                        $("#searchMethod").attr("src", "img/02_list/toggle-button_location.png");
                                    }
                                    self.getRouter().setParameter("sort_by_distance", self._sortByDistance);
                                    self._updateList();
                                }
                            });
                            freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($("#searchClose"), function () {
                                $("#searchInput").val("");
                                self.getRouter().setParameter("search", "");
                                self._searchText = "";
                                self._updateList();
                            });
                            $("#searchInput").focus(function () {
                                $("#searchClose").css("visibility", "visible");
                            });
                            freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(document.body), function (e) {
                                if (e.originalEvent.target !== $("#searchClose").get(0) && e.originalEvent.target !== $("#searchInput").get(0)) {
                                    $("#searchClose").css("visibility", "hidden");
                                }
                            });
                        }(this));
                    };
                    ListController.prototype._updateList = function () {
                        var view = this.getView();
                        this.updateViewAssignments(view, function () {
                            view.updateView("#stationList");
                        });
                    };
                    return ListController;
                }(controller.MasterUpdatableController));
                home.ListController = ListController;
            })(home = controller.home || (controller.home = {}));
        })(controller = presentation.controller || (presentation.controller = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var date;
        (function (date_1) {
            var entities = freeradios.business.entities.stationdetail;
            var TransmitTimesDateHelper = (function () {
                function TransmitTimesDateHelper() {
                }
                TransmitTimesDateHelper.isTransmitTimeNow = function (transmitTime) {
                    return this.isDateInTransmitTime(new Date(), transmitTime);
                };
                TransmitTimesDateHelper.isDateInTransmitTime = function (date, transmitTime) {
                    if (transmitTime.timeType == entities.enums.TransmitTimesTimeType.daily) {
                        return this._isTimeBetweenTransmitTimes(date, transmitTime.timeFrom, transmitTime.timeTo);
                    }
                    else if (transmitTime.timeType == entities.enums.TransmitTimesTimeType.once) {
                        var dateTime = date.getTime();
                        var dateOnceFromTime = new Date(transmitTime.dateOnceFrom).getTime();
                        var dateOnceToTime = new Date(transmitTime.dateOnceTo).getTime();
                        return dateTime >= dateOnceFromTime && dateTime <= dateOnceToTime;
                    }
                    else if (transmitTime.timeType === entities.enums.TransmitTimesTimeType.weekly) {
                        return this._getDayOfWeekFromAbbreviation(transmitTime.day) === date.getDay()
                            && this._isTimeBetweenTransmitTimes(date, transmitTime.timeFrom, transmitTime.timeTo);
                    }
                    else {
                        return this._getDayOfWeekFromAbbreviation(transmitTime.day) === date.getDay()
                            && this._isTransmitTimeWeekActive(date, transmitTime)
                            && this._isTimeBetweenTransmitTimes(date, transmitTime.timeFrom, transmitTime.timeTo);
                    }
                };
                TransmitTimesDateHelper.isTransmitTimeOfDay = function (day, transmitTime) {
                    if (transmitTime.timeType == entities.enums.TransmitTimesTimeType.daily) {
                        return true;
                    }
                    else if (transmitTime.timeType == entities.enums.TransmitTimesTimeType.once) {
                        var dateOnceFrom = new Date(transmitTime.dateOnceFrom);
                        return dateOnceFrom.getDay() === day.getDay();
                    }
                    else if (transmitTime.timeType === entities.enums.TransmitTimesTimeType.weekly) {
                        return this._getDayOfWeekFromAbbreviation(transmitTime.day) === day.getDay();
                    }
                    else {
                        return this._getDayOfWeekFromAbbreviation(transmitTime.day) === day.getDay()
                            && this._isTransmitTimeWeekActive(day, transmitTime);
                    }
                };
                TransmitTimesDateHelper.sortTransmitTimes = function (transmitTimes) {
                    transmitTimes.sort(function (time1, time2) {
                        var day1 = TransmitTimesDateHelper._getDayOfWeekFromAbbreviationStartingOnMonday(time1.day);
                        var day2 = TransmitTimesDateHelper._getDayOfWeekFromAbbreviationStartingOnMonday(time2.day);
                        if (day1 !== day2) {
                            return day1 - day2;
                        }
                        else {
                            return time1.timeFrom.localeCompare(time2.timeFrom);
                        }
                    });
                    return transmitTimes;
                };
                TransmitTimesDateHelper.doTimesIntersect = function (time1From, time1To, time2From, time2To) {
                    var returnValue = this._isTimeStringBetweenTransmitTimes(time1From, time2From, time2To, true, true)
                        || this._isTimeStringBetweenTransmitTimes(time1To, time2From, time2To, true, true)
                        || this._isTimeStringBetweenTransmitTimes(time2From, time1From, time1To, false, true)
                        || this._isTimeStringBetweenTransmitTimes(time2To, time1From, time1To, true, true);
                    return returnValue;
                };
                TransmitTimesDateHelper.getDayStringFromDate = function (date) {
                    switch (date.getDay()) {
                        case 0: return "SO";
                        case 1: return "MO";
                        case 2: return "DI";
                        case 3: return "MI";
                        case 4: return "DO";
                        case 5: return "FR";
                        case 6: return "SA";
                        default: return null;
                    }
                };
                TransmitTimesDateHelper.getTimeStringFromDate = function (date) {
                    var hour = date.getHours();
                    var minute = date.getMinutes();
                    var dateString = hour < 10 ? '0' + hour + ':' : hour + ':';
                    dateString += minute < 10 ? '0' + minute + ':' : minute;
                    return dateString;
                };
                TransmitTimesDateHelper.parseDateOnceString = function (dateString) {
                    return dateString.replace(/T/g, ' ').replace(/[\-\+]\d\d:\d\d/g, '');
                };
                TransmitTimesDateHelper._isTimeStringBetweenTransmitTimes = function (timeString, timeFrom, timeTo, excludeStart, excludeEnd) {
                    var hoursAndMinutes = this._getHoursAndMinutesFromTimeString(timeString);
                    var hours = hoursAndMinutes[0];
                    var minutes = hoursAndMinutes[1];
                    var hoursAndMinutesFrom = this._getHoursAndMinutesFromTimeString(timeFrom);
                    var fromHours = hoursAndMinutesFrom[0];
                    var fromMinutes = hoursAndMinutesFrom[1];
                    var hoursAndMinutesTo = this._getHoursAndMinutesFromTimeString(timeTo);
                    var toHours = hoursAndMinutesTo[0];
                    var toMinutes = hoursAndMinutesTo[1];
                    return this._isHourAndMinuteBetweenHourAndMinute(hours, minutes, fromHours, fromMinutes, toHours, toMinutes, excludeStart, excludeEnd);
                };
                TransmitTimesDateHelper._isTimeBetweenTransmitTimes = function (date, timeFrom, timeTo, excludeStart, excludeEnd) {
                    var dateHours = date.getHours();
                    var dateMinutes = date.getMinutes();
                    var hoursAndMinutesFrom = this._getHoursAndMinutesFromTimeString(timeFrom);
                    var fromHours = hoursAndMinutesFrom[0];
                    var fromMinutes = hoursAndMinutesFrom[1];
                    var hoursAndMinutesTo = this._getHoursAndMinutesFromTimeString(timeTo);
                    var toHours = hoursAndMinutesTo[0];
                    var toMinutes = hoursAndMinutesTo[1];
                    return this._isHourAndMinuteBetweenHourAndMinute(dateHours, dateMinutes, fromHours, fromMinutes, toHours, toMinutes, excludeStart, excludeEnd);
                };
                TransmitTimesDateHelper._isHourAndMinuteBetweenHourAndMinute = function (hours, minutes, fromHours, fromMinutes, toHours, toMinutes, excludeStart, excludeEnd) {
                    var returnValue;
                    if (excludeStart) {
                        returnValue = (hours > fromHours || hours === fromHours && minutes > fromMinutes);
                    }
                    else {
                        returnValue = (hours > fromHours || hours === fromHours && minutes >= fromMinutes);
                    }
                    if (excludeEnd) {
                        returnValue = returnValue && (hours < toHours || hours === toHours && minutes < toMinutes);
                    }
                    else {
                        returnValue = returnValue && (hours < toHours || hours === toHours && minutes <= toMinutes);
                    }
                    return returnValue;
                };
                TransmitTimesDateHelper._isTransmitTimeWeekActive = function (date, transmitTime) {
                    var weekOfMonth = this._getWeekOfMonth(date);
                    var isWeekActive = (weekOfMonth === 1 && transmitTime.week1)
                        || (weekOfMonth === 2 && transmitTime.week2)
                        || (weekOfMonth === 3 && transmitTime.week3)
                        || (weekOfMonth === 4 && transmitTime.week4)
                        || (weekOfMonth === 5 && transmitTime.week5)
                        || (weekOfMonth === 1 && transmitTime.firstWeek)
                        || (TransmitTimesDateHelper._isLastWeekOfMonth(date) && transmitTime.lastWeek);
                    return isWeekActive;
                };
                TransmitTimesDateHelper._getDayOfWeekFromAbbreviation = function (abbreviation) {
                    switch (abbreviation.toUpperCase()) {
                        case "SO": return 0;
                        case "MO": return 1;
                        case "DI": return 2;
                        case "MI": return 3;
                        case "DO": return 4;
                        case "FR": return 5;
                        case "SA": return 6;
                        default: return -1;
                    }
                };
                TransmitTimesDateHelper._getDayOfWeekFromAbbreviationStartingOnMonday = function (abbreviation) {
                    switch (abbreviation.toUpperCase()) {
                        case "MO": return 0;
                        case "DI": return 1;
                        case "MI": return 2;
                        case "DO": return 3;
                        case "FR": return 4;
                        case "SA": return 5;
                        case "SO": return 6;
                        default: return 0;
                    }
                };
                TransmitTimesDateHelper._getWeekOfMonth = function (date) {
                    var month = date.getMonth();
                    var year = date.getFullYear();
                    var firstWeekday = new Date(year, month, 1).getDay();
                    var lastDateOfMonth = new Date(year, month + 1, 0).getDate();
                    var offsetDate = date.getDate() + firstWeekday - 1;
                    var index = 1;
                    var weeksInMonth = index + Math.ceil((lastDateOfMonth + firstWeekday - 7) / 7);
                    var week = index + Math.floor(offsetDate / 7);
                    return week;
                };
                TransmitTimesDateHelper._getHoursAndMinutesFromTimeString = function (timeString) {
                    var timeParts = timeString.split(":");
                    var hoursAndMinutes = new Array();
                    if (timeParts[0].substring(0, 1) === "0") {
                        timeParts[0] = timeParts[0].substring(1);
                    }
                    if (timeParts[1].substring(0, 1) === "0") {
                        timeParts[1] = timeParts[1].substring(1);
                    }
                    hoursAndMinutes[0] = parseInt(timeParts[0], 10);
                    hoursAndMinutes[1] = parseInt(timeParts[1], 10);
                    return hoursAndMinutes;
                };
                TransmitTimesDateHelper._isLastWeekOfMonth = function (date) {
                    var nextDate = new Date(date.getTime() + 7 * 24 * 60 * 60 * 1000);
                    return date.getMonth() !== nextDate.getMonth();
                };
                return TransmitTimesDateHelper;
            }());
            date_1.TransmitTimesDateHelper = TransmitTimesDateHelper;
        })(date = utilities.date || (utilities.date = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var objects;
        (function (objects) {
            var ObjectHelper = (function () {
                function ObjectHelper() {
                }
                ObjectHelper.cloneObject = function (obj) {
                    if (obj === null || typeof (obj) !== "object") {
                        return obj;
                    }
                    var newObject = {};
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            newObject[key] = ObjectHelper.cloneObject(obj[key]);
                        }
                    }
                    return newObject;
                };
                return ObjectHelper;
            }());
            objects.ObjectHelper = ObjectHelper;
        })(objects = utilities.objects || (utilities.objects = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var businessentities;
        (function (businessentities) {
            var stationdetail;
            (function (stationdetail) {
                var BroadcastsEntityWithStationName = (function (_super) {
                    __extends(BroadcastsEntityWithStationName, _super);
                    function BroadcastsEntityWithStationName() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    return BroadcastsEntityWithStationName;
                }(business.entities.stationdetail.BroadcastsEntity));
                stationdetail.BroadcastsEntityWithStationName = BroadcastsEntityWithStationName;
            })(stationdetail = businessentities.stationdetail || (businessentities.stationdetail = {}));
        })(businessentities = business.businessentities || (business.businessentities = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var businessentities;
        (function (businessentities) {
            var stationdetail;
            (function (stationdetail) {
                var BroadcastsEntityWithTransmitTime = (function (_super) {
                    __extends(BroadcastsEntityWithTransmitTime, _super);
                    function BroadcastsEntityWithTransmitTime() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    return BroadcastsEntityWithTransmitTime;
                }(business.entities.stationdetail.BroadcastsEntity));
                stationdetail.BroadcastsEntityWithTransmitTime = BroadcastsEntityWithTransmitTime;
            })(stationdetail = businessentities.stationdetail || (businessentities.stationdetail = {}));
        })(businessentities = business.businessentities || (business.businessentities = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var businessentities;
        (function (businessentities) {
            var stationdetail;
            (function (stationdetail) {
                var BroadcastsEntityWithTransmitTimeAndStationName = (function (_super) {
                    __extends(BroadcastsEntityWithTransmitTimeAndStationName, _super);
                    function BroadcastsEntityWithTransmitTimeAndStationName() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    return BroadcastsEntityWithTransmitTimeAndStationName;
                }(stationdetail.BroadcastsEntityWithTransmitTime));
                stationdetail.BroadcastsEntityWithTransmitTimeAndStationName = BroadcastsEntityWithTransmitTimeAndStationName;
            })(stationdetail = businessentities.stationdetail || (businessentities.stationdetail = {}));
        })(businessentities = business.businessentities || (business.businessentities = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var service;
        (function (service) {
            var stationdetail;
            (function (stationdetail) {
                var di = freeradios.utilities.di;
                var date = freeradios.utilities.date;
                var BroadcastsService = (function () {
                    function BroadcastsService(broadcastsRepository, transmitTimesRepository, stationsRepository) {
                        this._broadcastsRepository = di.DIContainer.get("freeradios.business.contracts.stationdetail.IBroadcastsLocalRepository", broadcastsRepository);
                        this._transmitTimesRepository = di.DIContainer.get("freeradios.business.contracts.stationdetail.ITransmitTimesLocalRepository", transmitTimesRepository);
                        this._stationsRepository = di.DIContainer.get("freeradios.business.contracts.station.IStationLocalRepository", stationsRepository);
                    }
                    BroadcastsService.prototype.getCurrentBroadcast = function (stationID, callback) {
                        (function (self) {
                            self._transmitTimesRepository.getListByStationID(stationID, function (transmitTimes) {
                                var dateNow = new Date();
                                for (var i = 0, length = transmitTimes.length; i < length; ++i) {
                                    var currentTransmitTime = transmitTimes[i];
                                    if (date.TransmitTimesDateHelper.isTransmitTimeNow(currentTransmitTime)) {
                                        self._broadcastsRepository.getSingle(currentTransmitTime.stationID, currentTransmitTime.broadcastsID, function (broadcast) {
                                            callback(broadcast, currentTransmitTime.timeFrom, currentTransmitTime.timeTo);
                                        });
                                        return;
                                    }
                                }
                                callback(null, null, null);
                            });
                        }(this));
                    };
                    BroadcastsService.prototype.getList = function (callback) {
                        this._broadcastsRepository.getList(callback);
                    };
                    BroadcastsService.prototype.getForStation = function (stationID, callback) {
                        this._broadcastsRepository.getListByStationID(stationID, callback);
                    };
                    BroadcastsService.prototype.getSingle = function (stationID, broadcastID, callback) {
                        this._broadcastsRepository.getSingle(stationID, broadcastID, callback);
                    };
                    BroadcastsService.prototype.search = function (searchText, callback) {
                        this._broadcastsRepository.searchInTitleAndDescriptionAndCategories(searchText, callback);
                    };
                    BroadcastsService.prototype.searchForStation = function (stationID, searchText, callback) {
                        this._broadcastsRepository.searchInTitleAndDescriptionAndCategoriesForStation(stationID, searchText, callback);
                    };
                    BroadcastsService.prototype.searchFilteredByCategories = function (searchText, categoryIDs, callback) {
                        this._broadcastsRepository.searchInTitleAndDescriptionAndCategoriesFilteredByCategories(searchText, categoryIDs, callback);
                    };
                    BroadcastsService.prototype.searchFilteredByCategoriesForStation = function (stationID, searchText, categoryIDs, callback) {
                        this._broadcastsRepository.searchInTitleAndDescriptionAndCategoriesFilteredByCategoriesForStation(stationID, searchText, categoryIDs, callback);
                    };
                    BroadcastsService.prototype.getFilteredByCategories = function (categoryIDs, callback) {
                        this._broadcastsRepository.getFilteredByCategories(categoryIDs, callback);
                    };
                    BroadcastsService.prototype.getFilteredByCategoriesForStation = function (stationID, categoryIDs, callback) {
                        this._broadcastsRepository.getFilteredByCategoriesForStation(stationID, categoryIDs, callback);
                    };
                    BroadcastsService.prototype.getListWithStationName = function (callback) {
                        (function (self) {
                            self.getList(function (broadcasts) {
                                self._appendStationNames(broadcasts, callback);
                            });
                        }(this));
                    };
                    BroadcastsService.prototype.searchWithStationName = function (searchText, callback) {
                        (function (self) {
                            self._broadcastsRepository.searchInTitleAndDescriptionAndCategoriesAndStationName(searchText, function (broadcasts) {
                                self._appendStationNames(broadcasts, callback);
                            });
                        }(this));
                    };
                    BroadcastsService.prototype.getFilteredByCategoriesForStationWithStationName = function (stationID, categoryIDs, callback) {
                        (function (self) {
                            self.getFilteredByCategoriesForStation(stationID, categoryIDs, function (broadcasts) {
                                self._appendStationNames(broadcasts, callback);
                            });
                        }(this));
                    };
                    BroadcastsService.prototype.getFilteredByCategoriesForDayWithTimesAndStationName = function (day, categoryIDs, callback) {
                        (function (self) {
                            var dayString = freeradios.utilities.date.TransmitTimesDateHelper.getDayStringFromDate(day);
                            self.getFilteredByCategories(categoryIDs, function (broadcasts) {
                                self._transmitTimesRepository.getListForDayAndBroadcasts(dayString, broadcasts, function (transmitTimes) {
                                    self._appendStationNames(broadcasts, function (stationBroadcasts) {
                                        self._sharedGetListForDayWithTransmitTimes(day, stationBroadcasts, transmitTimes, callback);
                                    });
                                });
                            });
                        }(this));
                    };
                    BroadcastsService.prototype.getListForDayWithTransmitTimes = function (day, callback) {
                        (function (self) {
                            self.getList(function (broadcasts) {
                                self._transmitTimesRepository.getList(function (transmitTimes) {
                                    self._sharedGetListForDayWithTransmitTimes(day, broadcasts, transmitTimes, callback);
                                });
                            });
                        }(this));
                    };
                    BroadcastsService.prototype.getListForDayWithTimesForStation = function (stationID, day, callback) {
                        (function (self) {
                            self.getForStation(stationID, function (broadcasts) {
                                self._transmitTimesRepository.getListByStationID(stationID, function (transmitTimes) {
                                    self._sharedGetListForDayWithTransmitTimes(day, broadcasts, transmitTimes, callback);
                                });
                            });
                        }(this));
                    };
                    BroadcastsService.prototype._sharedGetListForDayWithTransmitTimes = function (day, broadcasts, transmitTimes, callback) {
                        var results = new Array();
                        for (var i = 0, lengthI = broadcasts.length; i < lengthI; ++i) {
                            var currentBroadcast = broadcasts[i];
                            for (var j = 0, lengthJ = transmitTimes.length; j < lengthJ; ++j) {
                                var currentTransmitTime = transmitTimes[j];
                                if (currentTransmitTime.stationID === currentBroadcast.stationID && currentTransmitTime.broadcastsID === currentBroadcast.id) {
                                    if (date.TransmitTimesDateHelper.isTransmitTimeOfDay(day, currentTransmitTime)) {
                                        var broadcastClone = freeradios.utilities.objects.ObjectHelper.cloneObject(currentBroadcast);
                                        broadcastClone.timeFrom = currentTransmitTime.timeFrom;
                                        broadcastClone.timeTo = currentTransmitTime.timeTo;
                                        results.push(broadcastClone);
                                    }
                                }
                            }
                        }
                        results.sort(function (broadcast1, broadcast2) {
                            return broadcast1.timeFrom.localeCompare(broadcast2.timeFrom);
                        });
                        callback(results);
                    };
                    BroadcastsService.prototype._appendStationNames = function (broadcasts, callback) {
                        this._stationsRepository.getStationList(function (stations) {
                            for (var i = 0, length = broadcasts.length; i < length; ++i) {
                                var currentBroadcast = broadcasts[i];
                                currentBroadcast.stationName = stations.filter(function (element) {
                                    return element.id === currentBroadcast.stationID;
                                })[0].name;
                            }
                            callback(broadcasts);
                        });
                    };
                    return BroadcastsService;
                }());
                stationdetail.BroadcastsService = BroadcastsService;
            })(stationdetail = service.stationdetail || (service.stationdetail = {}));
        })(service = business.service || (business.service = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var controller;
        (function (controller) {
            var home;
            (function (home) {
                var SearchController = (function (_super) {
                    __extends(SearchController, _super);
                    function SearchController(view, masterView, geolocationHelper) {
                        var _this = _super.call(this, "Suche", "templates/home/search.html", view, masterView) || this;
                        _this._stationService = new freeradios.business.service.station.StationService();
                        _this._broadcastsService = new freeradios.business.service.stationdetail.BroadcastsService();
                        _this._distanceSorting = new presentation.location.DistanceSorting();
                        _this._geolocationHelper = freeradios.utilities.di.DIContainer.get("freeradios.presentation.location.GeolocationHelper", geolocationHelper);
                        _this._sortByDistance = freeradios.utilities.navigation.URLParameters.getParameterBoolean("sort_by_distance") && _this._geolocationHelper.getEnabled();
                        _this._searchText = freeradios.utilities.navigation.URLParameters.getParameter("search") || "";
                        return _this;
                    }
                    SearchController.prototype.createView = function (callback) {
                        var self = this;
                        _super.prototype.createView.call(this, function (view) {
                            self.updateViewAssignments(view, function () {
                                callback(view);
                            });
                        });
                    };
                    SearchController.prototype.updateViewAssignments = function (view, finishCallback) {
                        (function (self) {
                            if (self._searchText.replace(/[ \r\n\t]/g, "").length > 0) {
                                self._stationService.search(self._searchText, function (stations) {
                                    self._broadcastsService.searchWithStationName(self._searchText, function (broadcasts) {
                                        if (self._sortByDistance) {
                                            stations = self._distanceSorting.sortStationsByCurrentDistance(stations);
                                        }
                                        view.assign("searchText", self._searchText);
                                        view.assign("sortByDistance", self._sortByDistance);
                                        view.assign("stations", stations);
                                        view.assign("broadcasts", broadcasts);
                                        finishCallback();
                                    });
                                });
                            }
                            else {
                                self._stationService.getStationList(function (stations) {
                                    self._broadcastsService.getListWithStationName(function (broadcasts) {
                                        if (self._sortByDistance) {
                                            stations = self._distanceSorting.sortStationsByCurrentDistance(stations);
                                        }
                                        view.assign("searchText", self._searchText);
                                        view.assign("sortByDistance", self._sortByDistance);
                                        view.assign("stations", stations);
                                        view.assign("broadcasts", broadcasts);
                                        finishCallback();
                                    });
                                });
                            }
                        }(this));
                    };
                    SearchController.prototype.destroyView = function () {
                        _super.prototype.destroyView.call(this);
                    };
                    SearchController.prototype.onready = function () {
                        _super.prototype.onready.call(this);
                        this.bindListeners();
                    };
                    SearchController.prototype.bindListeners = function () {
                        if (!this._geolocationHelper.getEnabled()) {
                            $("#searchMethod").hide();
                        }
                        (function (self) {
                            $("#searchInput").keyup(function () {
                                self._searchText = $("#searchInput").val();
                                self.getRouter().setParameter("search", self._searchText);
                                self._updateLists();
                            });
                            freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($("#searchIcon"), function () {
                                self._searchText = $("#searchInput").val();
                                self.getRouter().setParameter("search", self._searchText);
                                self._updateLists();
                            });
                            freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($("#searchMethod"), function () {
                                if (self._geolocationHelper.getEnabled()) {
                                    self._sortByDistance = !self._sortByDistance;
                                    if (self._sortByDistance) {
                                        $("#searchMethod").attr("src", "img/02_list/toggle-button_ABC.png");
                                    }
                                    else {
                                        $("#searchMethod").attr("src", "img/02_list/toggle-button_location.png");
                                    }
                                    self.getRouter().setParameter("sort_by_distance", self._sortByDistance);
                                    self._updateLists();
                                }
                            });
                            freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($("#searchClose"), function () {
                                $("#searchInput").val("");
                                self.getRouter().setParameter("search", "");
                                self._searchText = "";
                                self._updateLists();
                            });
                            $("#searchInput").focus(function () {
                                $("#searchClose").css("visibility", "visible");
                            });
                            freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(document.body), function (e) {
                                if (e.originalEvent.target !== $("#searchClose").get(0) && e.originalEvent.target !== $("#searchInput").get(0)) {
                                    $("#searchClose").css("visibility", "hidden");
                                }
                            });
                        }(this));
                    };
                    SearchController.prototype._updateLists = function () {
                        var view = this.getView();
                        this.updateViewAssignments(view, function () {
                            view.updateView("#listStations");
                            view.updateView("#listBroadcasts");
                        });
                    };
                    return SearchController;
                }(controller.MasterUpdatableController));
                home.SearchController = SearchController;
            })(home = controller.home || (controller.home = {}));
        })(controller = presentation.controller || (presentation.controller = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var service;
        (function (service) {
            var favorites;
            (function (favorites_3) {
                var di = freeradios.utilities.di;
                var entities = freeradios.business.entities;
                var BroadcastFavoritesService = (function () {
                    function BroadcastFavoritesService(favoritesRepository, broadcastsRepository, stationsRepository) {
                        this._favoritesRepository = di.DIContainer.get("freeradios.business.contracts.favorites.IBroadcastsFavoritesLocalRepository", favoritesRepository);
                        this._broadcastsRepository = di.DIContainer.get("freeradios.business.contracts.stationdetail.IBroadcastsLocalRepository", broadcastsRepository);
                        this._stationsRepository = di.DIContainer.get("freeradios.business.contracts.station.IStationLocalRepository", stationsRepository);
                    }
                    BroadcastFavoritesService.prototype.add = function (stationID, broadcastID, callback) {
                        (function (self) {
                            self._favoritesRepository.saveBroadcastFavorite(self._createFavoritesEntity(stationID, broadcastID), function (success) {
                                if (success) {
                                    self._broadcastsRepository.setIsFavorite(stationID, broadcastID, true, function (success) {
                                        if (callback) {
                                            callback(success);
                                        }
                                    });
                                }
                                else {
                                    callback(true);
                                }
                            });
                        }(this));
                    };
                    BroadcastFavoritesService.prototype.remove = function (stationID, broadcastID, callback) {
                        (function (self) {
                            self._favoritesRepository.deleteBroadcastFavorite(self._createFavoritesEntity(stationID, broadcastID), function (success) {
                                if (success) {
                                    self._broadcastsRepository.setIsFavorite(stationID, broadcastID, false, function (success) {
                                        if (callback) {
                                            callback(success);
                                        }
                                    });
                                }
                                else {
                                    callback(true);
                                }
                            });
                        }(this));
                    };
                    BroadcastFavoritesService.prototype.getList = function (callback) {
                        (function (self) {
                            self._favoritesRepository.getList(function (favorites) {
                                self._broadcastsRepository.getListForFavorites(favorites, callback);
                            });
                        }(this));
                    };
                    BroadcastFavoritesService.prototype.getListWithStationName = function (callback) {
                        (function (self) {
                            self._favoritesRepository.getList(function (favorites) {
                                self._broadcastsRepository.getListForFavorites(favorites, function (favoriteBroadcasts) {
                                    self._appendStationNames(favoriteBroadcasts, callback);
                                });
                            });
                        }(this));
                    };
                    BroadcastFavoritesService.prototype.getListForStation = function (stationID, callback) {
                        (function (self) {
                            self._favoritesRepository.getListForStation(stationID, function (favorites) {
                                self._broadcastsRepository.getListForFavorites(favorites, callback);
                            });
                        }(this));
                    };
                    BroadcastFavoritesService.prototype._createFavoritesEntity = function (stationID, broadcastID) {
                        var entity = new entities.favorites.BroadcastsFavoritesEntity();
                        entity.stationID = stationID;
                        entity.broadcastsID = broadcastID;
                        return entity;
                    };
                    BroadcastFavoritesService.prototype._appendStationNames = function (favoriteBroadcasts, callback) {
                        this._stationsRepository.getStationList(function (stations) {
                            for (var i = 0, length = favoriteBroadcasts.length; i < length; ++i) {
                                var currentBroadcast = favoriteBroadcasts[i];
                                currentBroadcast.stationName = stations.filter(function (element) {
                                    return element.id === currentBroadcast.stationID;
                                })[0].name;
                            }
                            callback(favoriteBroadcasts);
                        });
                    };
                    return BroadcastFavoritesService;
                }());
                favorites_3.BroadcastFavoritesService = BroadcastFavoritesService;
            })(favorites = service.favorites || (service.favorites = {}));
        })(service = business.service || (business.service = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var controller;
        (function (controller) {
            var home;
            (function (home) {
                var service = freeradios.business.service.favorites;
                var FavoriteController = (function (_super) {
                    __extends(FavoriteController, _super);
                    function FavoriteController(view, masterView) {
                        var _this = _super.call(this, "Favoriten", "templates/home/favorite.html", view, masterView) || this;
                        _this._favoritesService = new service.BroadcastFavoritesService();
                        return _this;
                    }
                    FavoriteController.prototype.createView = function (callback) {
                        var self = this;
                        _super.prototype.createView.call(this, function (view) {
                            self._favoritesService.getListWithStationName(function (broadcasts) {
                                view.assign("broadcasts", broadcasts);
                                callback(view);
                            });
                        });
                    };
                    FavoriteController.prototype.destroyView = function () {
                        _super.prototype.destroyView.call(this);
                    };
                    FavoriteController.prototype.onready = function () {
                        _super.prototype.onready.call(this);
                        this._bindDeleteListeners();
                    };
                    FavoriteController.prototype._bindDeleteListeners = function () {
                        (function (self) {
                            freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(".favoriteStarList"), function (e, target) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                e.stopPropagation();
                                var button = target;
                                var dialog = document.getElementsByClassName("remove-favorites-dialog")[0];
                                dialog.style.display = "block";
                                freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(".submitDialogButton"), function () {
                                    var dialog = document.getElementsByClassName("remove-favorites-dialog")[0];
                                    dialog.style.display = "none";
                                    self._delete(parseInt(button.attr("data-station-id"), 10), parseInt(button.attr("data-broadcasts-id"), 10), function () {
                                        button.parents(".stationListElement").remove();
                                    });
                                });
                                freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(".cancelDialogButton"), function () {
                                    var dialog = document.getElementsByClassName("remove-favorites-dialog")[0];
                                    dialog.style.display = "none";
                                });
                                return false;
                            });
                        }(this));
                    };
                    FavoriteController.prototype._delete = function (stationID, broadcastsID, callback) {
                        this._favoritesService.remove(stationID, broadcastsID, callback);
                    };
                    return FavoriteController;
                }(controller.MasterController));
                home.FavoriteController = FavoriteController;
            })(home = controller.home || (controller.home = {}));
        })(controller = presentation.controller || (presentation.controller = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var controller;
        (function (controller) {
            var home;
            (function (home) {
                var InfoController = (function (_super) {
                    __extends(InfoController, _super);
                    function InfoController(view, masterView) {
                        return _super.call(this, 'Info', 'templates/home/info.html', view, masterView) || this;
                    }
                    InfoController.prototype.createView = function (callback) {
                        _super.prototype.createView.call(this, function (view) {
                            view.assign('versionNumber', AppVersion.version);
                            view.assign('buildNumber', AppVersion.build);
                            callback(view);
                        });
                    };
                    InfoController.prototype.destroyView = function () {
                        _super.prototype.destroyView.call(this);
                    };
                    InfoController.prototype.onready = function () {
                        _super.prototype.onready.call(this);
                        $('*[data-open-in-browser]').each(function () {
                            freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(this), function () {
                                if (navigator.userAgent.match(/android/i)) {
                                    navigator.app.loadUrl('http://www.freie-radios.de/', { openExternal: true });
                                }
                                else {
                                    window.open('http://www.freie-radios.de/', '_system');
                                }
                            });
                        });
                        $('*[data-email-link]').each(function () {
                            freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(this), function () {
                                cordova.plugins.email.open({ to: ['freieradioapp@freefm.de'] });
                            });
                        });
                    };
                    return InfoController;
                }(controller.MasterController));
                home.InfoController = InfoController;
            })(home = controller.home || (controller.home = {}));
        })(controller = presentation.controller || (presentation.controller = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var controller;
        (function (controller) {
            var home;
            (function (home) {
                var LocateController = (function (_super) {
                    __extends(LocateController, _super);
                    function LocateController(view, masterView, geolocationHelper) {
                        var _this = _super.call(this, "Ortung", "templates/home/locate.html", view, masterView) || this;
                        _this._geolocationHelper = freeradios.utilities.di.DIContainer.get("freeradios.presentation.location.GeolocationHelper", geolocationHelper);
                        return _this;
                    }
                    LocateController.prototype.createView = function (callback) {
                        _super.prototype.createView.call(this, function (view) {
                            callback(view);
                        });
                    };
                    LocateController.prototype.destroyView = function () {
                        _super.prototype.destroyView.call(this);
                    };
                    LocateController.prototype.onready = function () {
                        _super.prototype.onready.call(this);
                        this._setSwitchState();
                        this._createSwitchListeners();
                    };
                    LocateController.prototype._setSwitchState = function () {
                        if (this._geolocationHelper.getEnabled()) {
                            $("#geolocationSwitch").addClass("active");
                            $("#geolocationSwitchCircle").css("left", "auto");
                        }
                        else {
                            $("#geolocationSwitchCircle").css("right", "auto");
                        }
                    };
                    LocateController.prototype._createSwitchListeners = function () {
                        (function (self) {
                            freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($("#geolocationSwitchLabel, #geolocationSwitch"), function () {
                                self._toggleSwitch();
                            });
                        }(this));
                    };
                    LocateController.prototype._toggleSwitch = function () {
                        var enabled = !this._geolocationHelper.getEnabled();
                        this._geolocationHelper.setEnabled(enabled);
                        var circleWidth = $("#geolocationSwitchCircle").width();
                        var switchWidth = $("#geolocationSwitch").width();
                        if (enabled) {
                            $("#geolocationSwitchCircle").animate({
                                left: (0.96 * switchWidth - circleWidth) + "px"
                            }, 300, "swing", function () {
                                $("#geolocationSwitch").addClass("active");
                                $("#geolocationSwitchCircle").removeAttr("style");
                            });
                        }
                        else {
                            $("#geolocationSwitchCircle").animate({
                                left: (0.04 * switchWidth) + "px"
                            }, 300, "swing", function () {
                                $("#geolocationSwitch").removeClass("active");
                                $("#geolocationSwitchCircle").removeAttr("style");
                            });
                        }
                    };
                    return LocateController;
                }(controller.MasterController));
                home.LocateController = LocateController;
            })(home = controller.home || (controller.home = {}));
        })(controller = presentation.controller || (presentation.controller = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var service;
        (function (service) {
            var stationdetail;
            (function (stationdetail) {
                var di = freeradios.utilities.di;
                var CategoriesService = (function () {
                    function CategoriesService(repository) {
                        this._repository = di.DIContainer.get("freeradios.business.contracts.stationdetail.ICategoriesLocalRepository", repository);
                    }
                    CategoriesService.prototype.getList = function (callback) {
                        this._repository.getCategoryList(callback);
                    };
                    CategoriesService.prototype.getSingle = function (id, callback) {
                        this._repository.getSingle(id, callback);
                    };
                    CategoriesService.prototype.getSingleByName = function (name, callback) {
                        this._repository.getSingleByName(name, callback);
                    };
                    CategoriesService.prototype.getIDMap = function (callback) {
                        this.getList(function (categories) {
                            var map = {};
                            for (var i = 0, length = categories.length; i < length; ++i) {
                                var currentCategory = categories[i];
                                map[currentCategory.id] = currentCategory;
                            }
                            callback(map);
                        });
                    };
                    CategoriesService.prototype.getNameMap = function (callback) {
                        this.getList(function (categories) {
                            var map = {};
                            for (var i = 0, length = categories.length; i < length; ++i) {
                                var currentCategory = categories[i];
                                map[currentCategory.name] = currentCategory;
                            }
                            callback(map);
                        });
                    };
                    CategoriesService.prototype.getForBroadcast = function (stationID, broadcastID, callback) {
                        this._repository.getForBroadcast(stationID, broadcastID, callback);
                    };
                    CategoriesService.prototype.getByIDList = function (categoryIDs, callback) {
                        (function (self) {
                            self.getIDMap(function (idMap) {
                                var categories = new Array();
                                for (var i = 0, length = categoryIDs.length; i < length; ++i) {
                                    categories.push(idMap[categoryIDs[i]]);
                                }
                                callback(categories);
                            });
                        }(this));
                    };
                    return CategoriesService;
                }());
                stationdetail.CategoriesService = CategoriesService;
            })(stationdetail = service.stationdetail || (service.stationdetail = {}));
        })(service = business.service || (business.service = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var controller;
        (function (controller) {
            var home;
            (function (home) {
                var ScheduleController = (function (_super) {
                    __extends(ScheduleController, _super);
                    function ScheduleController(view, masterView) {
                        var _this = _super.call(this, "Sendeplan", "templates/home/schedule.html", view, masterView) || this;
                        _this._broadcastsService = new freeradios.business.service.stationdetail.BroadcastsService();
                        _this._categoriesService = new freeradios.business.service.stationdetail.CategoriesService();
                        var dateTimeStamp = freeradios.utilities.navigation.URLParameters.getParameterNumber("date_timestamp");
                        _this._date = dateTimeStamp > 0 ? new Date(dateTimeStamp) : new Date();
                        _this._genresListIsOpen = false;
                        _this._selectedCategoryIDs = _this._getCategoryIDsFromParameters();
                        return _this;
                    }
                    ScheduleController.prototype.createView = function (callback) {
                        var self = this;
                        _super.prototype.createView.call(this, function (view) {
                            self.updateViewAssignments(view, function () {
                                callback(view);
                            });
                        });
                    };
                    ScheduleController.prototype.updateViewAssignments = function (view, finishCallback) {
                        (function (self) {
                            self._broadcastsService.getFilteredByCategoriesForDayWithTimesAndStationName(self._date, self._selectedCategoryIDs, function (broadcasts) {
                                self._categoriesService.getList(function (categories) {
                                    var transmitTimesToBroadcasts = self._groupBroadcastsByTransmitTimes(broadcasts);
                                    view.assign("broadcastDate", self._date);
                                    view.assign("dateTimeStamp", self._date.getTime());
                                    view.assign("isBroadcastDayToday", self._isBroadcastDayToday());
                                    view.assign("transmitTimesToBroadcasts", transmitTimesToBroadcasts);
                                    view.assign("categories", categories);
                                    view.assign("selectedCategoryIDs", self._selectedCategoryIDs);
                                    view.assign("categoriesQueryValue", JSON.stringify(self._selectedCategoryIDs));
                                    view.assign("genresListIsOpen", self._genresListIsOpen);
                                    finishCallback();
                                });
                            });
                        }(this));
                    };
                    ScheduleController.prototype.destroyView = function () {
                        _super.prototype.destroyView.call(this);
                    };
                    ScheduleController.prototype.onready = function () {
                        _super.prototype.onready.call(this);
                        this.bindListeners();
                    };
                    ScheduleController.prototype._switchDate = function (daysToAdd) {
                        var nextDate = new Date(this._date.getTime() + (daysToAdd * 24 * 60 * 60 * 1000));
                        this._date = nextDate;
                        this.getRouter().setParameter("date_timestamp", this._date.getTime());
                        this._updateList();
                    };
                    ScheduleController.prototype._updateList = function () {
                        (function (self) {
                            var view = self.getView();
                            self.updateViewAssignments(view, function () {
                                view.updateView("#list");
                                self.bindListeners();
                            });
                        }(this));
                    };
                    ScheduleController.prototype.bindListeners = function () {
                        (function (self) {
                            freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(".broadcast-navigation-arrow-back"), function () {
                                self._switchDate(-1);
                            });
                            freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(".broadcast-navigation-arrow-forward"), function () {
                                self._switchDate(1);
                            });
                            freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(".genres-item"), function (e, target) {
                                var categoryID = parseInt(target.attr("data-category-id"), 10);
                                if (target.hasClass("active")) {
                                    target.removeClass("active");
                                    for (var i = 0, length = self._selectedCategoryIDs.length; i < length; ++i) {
                                        if (self._selectedCategoryIDs[i] === categoryID) {
                                            self._selectedCategoryIDs.splice(i, 1);
                                            break;
                                        }
                                    }
                                }
                                else {
                                    target.addClass("active");
                                    self._selectedCategoryIDs.push(categoryID);
                                }
                                self.getRouter().setParameter("categories", JSON.stringify(self._selectedCategoryIDs));
                                self._updateList();
                            });
                            freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(".genres-title"), function () {
                                var title = $(".genres-title");
                                var list = $(".genres-list");
                                if (self._genresListIsOpen) {
                                    list.slideUp();
                                    title.find(".genres-icon").attr("src", "img/03_dropdown/03.1_dropdown-arrow.png");
                                }
                                else {
                                    list.slideDown();
                                    title.find(".genres-icon").attr("src", "img/03_dropdown/03.1_dropdown-arrow-active.png");
                                }
                                self._genresListIsOpen = !self._genresListIsOpen;
                            });
                        }(this));
                    };
                    ScheduleController.prototype._groupBroadcastsByTransmitTimes = function (broadcasts) {
                        var transmitTimes = [
                            { timeFrom: "00:00", timeTo: "00:59", displayTimeTo: "01:00" },
                            { timeFrom: "01:00", timeTo: "01:59", displayTimeTo: "02:00" },
                            { timeFrom: "02:00", timeTo: "05:59", displayTimeTo: "06:00" },
                            { timeFrom: "06:00", timeTo: "06:59", displayTimeTo: "07:00" },
                            { timeFrom: "07:00", timeTo: "07:59", displayTimeTo: "08:00" },
                            { timeFrom: "08:00", timeTo: "08:59", displayTimeTo: "09:00" },
                            { timeFrom: "09:00", timeTo: "09:59", displayTimeTo: "10:00" },
                            { timeFrom: "10:00", timeTo: "10:59", displayTimeTo: "11:00" },
                            { timeFrom: "11:00", timeTo: "11:59", displayTimeTo: "12:00" },
                            { timeFrom: "12:00", timeTo: "12:59", displayTimeTo: "13:00" },
                            { timeFrom: "13:00", timeTo: "13:59", displayTimeTo: "14:00" },
                            { timeFrom: "14:00", timeTo: "14:59", displayTimeTo: "15:00" },
                            { timeFrom: "15:00", timeTo: "15:59", displayTimeTo: "16:00" },
                            { timeFrom: "16:00", timeTo: "16:59", displayTimeTo: "17:00" },
                            { timeFrom: "17:00", timeTo: "17:59", displayTimeTo: "18:00" },
                            { timeFrom: "18:00", timeTo: "18:59", displayTimeTo: "19:00" },
                            { timeFrom: "19:00", timeTo: "19:59", displayTimeTo: "20:00" },
                            { timeFrom: "20:00", timeTo: "20:59", displayTimeTo: "21:00" },
                            { timeFrom: "21:00", timeTo: "21:59", displayTimeTo: "22:00" },
                            { timeFrom: "22:00", timeTo: "22:59", displayTimeTo: "23:00" },
                            { timeFrom: "23:00", timeTo: "23:59", displayTimeTo: "24:00" }
                        ];
                        var results = {};
                        for (var j = 0, lengthJ = transmitTimes.length; j < lengthJ; ++j) {
                            var currentTime = transmitTimes[j];
                            var timeString = currentTime.timeFrom + "|" + currentTime.timeTo;
                            results[timeString] =
                                {
                                    timeFrom: currentTime.timeFrom,
                                    timeTo: currentTime.displayTimeTo,
                                    checkTimeTo: currentTime.timeTo,
                                    broadcasts: new Array()
                                };
                        }
                        for (var i = 0, lengthI = broadcasts.length; i < lengthI; ++i) {
                            var currentBroadcast = broadcasts[i];
                            for (var j = 0, lengthJ = transmitTimes.length; j < lengthJ; ++j) {
                                var currentTime = transmitTimes[j];
                                if (freeradios.utilities.date.TransmitTimesDateHelper.doTimesIntersect(currentBroadcast.timeFrom, currentBroadcast.timeTo, currentTime.timeFrom, currentTime.timeTo)) {
                                    var timeString = currentTime.timeFrom + "|" + currentTime.timeTo;
                                    results[timeString].broadcasts.push(currentBroadcast);
                                }
                            }
                        }
                        return results;
                    };
                    ScheduleController.prototype._isBroadcastDayToday = function () {
                        var today = new Date();
                        var returnValue = this._date.getFullYear() === today.getFullYear()
                            && this._date.getMonth() === today.getMonth()
                            && this._date.getDate() === today.getDate();
                        return returnValue;
                    };
                    ScheduleController.prototype._getCategoryIDsFromParameters = function () {
                        var categoryIDs;
                        try {
                            categoryIDs = JSON.parse(freeradios.utilities.navigation.URLParameters.getParameter("categories"));
                        }
                        catch (e) {
                            categoryIDs = new Array();
                        }
                        if (categoryIDs === null) {
                            categoryIDs = new Array();
                        }
                        return categoryIDs;
                    };
                    return ScheduleController;
                }(controller.MasterUpdatableController));
                home.ScheduleController = ScheduleController;
            })(home = controller.home || (controller.home = {}));
        })(controller = presentation.controller || (presentation.controller = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var controller;
        (function (controller) {
            var home;
            (function (home) {
                var ScheduleDetailController = (function (_super) {
                    __extends(ScheduleDetailController, _super);
                    function ScheduleDetailController(view, masterView) {
                        var _this = _super.call(this, "Sendeplan", "templates/home/scheduledetail.html", view, masterView) || this;
                        _this._broadcastsService = new freeradios.business.service.stationdetail.BroadcastsService();
                        _this._categoriesService = new freeradios.business.service.stationdetail.CategoriesService();
                        return _this;
                    }
                    ScheduleDetailController.prototype.createView = function (callback) {
                        var self = this;
                        _super.prototype.createView.call(this, function (view) {
                            self.updateViewAssignments(view, function () {
                                callback(view);
                            });
                        });
                    };
                    ScheduleDetailController.prototype.updateViewAssignments = function (view, finishCallback) {
                        (function (self) {
                            var categoryIDs = self._getCategoryIDsFromParameters();
                            var date = new Date(freeradios.utilities.navigation.URLParameters.getParameterNumber("date_timestamp"));
                            var timeFrom = freeradios.utilities.navigation.URLParameters.getParameter("time_from");
                            var timeTo = freeradios.utilities.navigation.URLParameters.getParameter("time_to");
                            self._broadcastsService.getFilteredByCategoriesForDayWithTimesAndStationName(date, categoryIDs, function (broadcasts) {
                                self._categoriesService.getByIDList(categoryIDs, function (categories) {
                                    var filteredBroadcasts = self._filterBroadcastsForTime(timeFrom, timeTo, broadcasts);
                                    view.assign("broadcasts", filteredBroadcasts);
                                    view.assign("categories", categories);
                                    view.assign("timeFrom", timeFrom);
                                    view.assign("timeTo", timeTo);
                                    view.assign("broadcastDate", date);
                                    finishCallback();
                                });
                            });
                        }(this));
                    };
                    ScheduleDetailController.prototype.destroyView = function () {
                        _super.prototype.destroyView.call(this);
                    };
                    ScheduleDetailController.prototype.onready = function () {
                        _super.prototype.onready.call(this);
                    };
                    ScheduleDetailController.prototype.bindListeners = function () {
                    };
                    ScheduleDetailController.prototype._getCategoryIDsFromParameters = function () {
                        var categoryIDs;
                        try {
                            categoryIDs = JSON.parse(freeradios.utilities.navigation.URLParameters.getParameter("categories"));
                        }
                        catch (e) {
                            categoryIDs = new Array();
                        }
                        if (categoryIDs === null) {
                            categoryIDs = new Array();
                        }
                        return categoryIDs;
                    };
                    ScheduleDetailController.prototype._filterBroadcastsForTime = function (timeFrom, timeTo, broadcasts) {
                        var results = new Array();
                        for (var i = 0, length = broadcasts.length; i < length; ++i) {
                            var currentBroadcast = broadcasts[i];
                            if (freeradios.utilities.date.TransmitTimesDateHelper.doTimesIntersect(currentBroadcast.timeFrom, currentBroadcast.timeTo, timeFrom, timeTo)) {
                                results.push(currentBroadcast);
                            }
                        }
                        return results;
                    };
                    return ScheduleDetailController;
                }(controller.MasterUpdatableController));
                home.ScheduleDetailController = ScheduleDetailController;
            })(home = controller.home || (controller.home = {}));
        })(controller = presentation.controller || (presentation.controller = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var service;
        (function (service) {
            var stationdetail;
            (function (stationdetail) {
                var di = freeradios.utilities.di;
                var StationDetailService = (function () {
                    function StationDetailService(repository) {
                        this._repository = di.DIContainer.get("freeradios.business.contracts.stationdetail.IStationDetailLocalRepository", repository);
                    }
                    StationDetailService.prototype.getList = function (callback) {
                        this._repository.getList(callback);
                    };
                    StationDetailService.prototype.getForStation = function (stationID, callback) {
                        this._repository.getByStationID(stationID, callback);
                    };
                    StationDetailService.prototype.search = function (searchText, callback) {
                        this._repository.searchInDisplayNameAndFullNameAndCity(searchText, callback);
                    };
                    return StationDetailService;
                }());
                stationdetail.StationDetailService = StationDetailService;
            })(stationdetail = service.stationdetail || (service.stationdetail = {}));
        })(service = business.service || (business.service = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var service;
        (function (service) {
            var stationdetail;
            (function (stationdetail) {
                var di = freeradios.utilities.di;
                var MediaChannelsService = (function () {
                    function MediaChannelsService(repository) {
                        this._repository = di.DIContainer.get("freeradios.business.contracts.stationdetail.IMediaChannelsLocalRepository", repository);
                    }
                    MediaChannelsService.prototype.getList = function (callback) {
                        this._repository.getList(callback);
                    };
                    MediaChannelsService.prototype.getForStation = function (stationID, callback) {
                        this._repository.getListByStationID(stationID, callback);
                    };
                    MediaChannelsService.prototype.getMediaChannelTypes = function (stationID, callback) {
                        this.getForStation(stationID, function (mediaChannels) {
                            var mediaChannelTypes = new Array();
                            for (var i = 0, length = mediaChannels.length; i < length; ++i) {
                                var currentType = mediaChannels[i].type;
                                if (mediaChannelTypes.indexOf(currentType) < 0) {
                                    mediaChannelTypes.push(currentType);
                                }
                            }
                            callback(mediaChannelTypes);
                        });
                    };
                    return MediaChannelsService;
                }());
                stationdetail.MediaChannelsService = MediaChannelsService;
            })(stationdetail = service.stationdetail || (service.stationdetail = {}));
        })(service = business.service || (business.service = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var controller;
        (function (controller) {
            var home;
            (function (home) {
                var broadcasts;
                (function (broadcasts) {
                    var BroadcastInfoController = (function (_super) {
                        __extends(BroadcastInfoController, _super);
                        function BroadcastInfoController(view, masterView) {
                            var _this = _super.call(this, "Senderdetails", "templates/home/broadcasts/broadcastinfo.html", view, masterView) || this;
                            _this._stationService = new freeradios.business.service.station.StationService();
                            _this._stationDetailService = new freeradios.business.service.stationdetail.StationDetailService();
                            _this._mediaChannelsService = new freeradios.business.service.stationdetail.MediaChannelsService();
                            _this._broadcastsService = new freeradios.business.service.stationdetail.BroadcastsService();
                            _this._stationID = freeradios.utilities.navigation.URLParameters.getParameterNumber("station_id");
                            return _this;
                        }
                        BroadcastInfoController.prototype.createView = function (callback) {
                            var self = this;
                            _super.prototype.createView.call(this, function (view) {
                                self.updateViewAssignments(view, function () {
                                    callback(view);
                                });
                            });
                        };
                        BroadcastInfoController.prototype.updateViewAssignments = function (view, finishCallback) {
                            (function (self) {
                                self._stationService.getByID(self._stationID, function (station) {
                                    self._stationDetailService.getForStation(self._stationID, function (stationDetail) {
                                        if (stationDetail == null) {
                                            alert("Fehler bei der Verbindung zum Server oder fehlerhaften Daten. Bitte starten sie die App zu einem späteren Zeitpunkt erneut und versuchen sie es dann nochmal.");
                                            return;
                                        }
                                        self._mediaChannelsService.getMediaChannelTypes(self._stationID, function (mediaChannelTypes) {
                                            self._broadcastsService.getCurrentBroadcast(self._stationID, function (broadcast, timeFrom, timeTo) {
                                                view.assign("currentBroadcast", broadcast);
                                                view.assign("currentBroadcastTimeFrom", timeFrom);
                                                view.assign("currentBroadcastTimeTo", timeTo);
                                                view.assign("mediaChannelTypes", mediaChannelTypes);
                                                view.assign("station", station);
                                                stationDetail.city = station.city;
                                                view.assign("stationDetail", stationDetail);
                                                view.assign("stationID", self._stationID);
                                                finishCallback();
                                            });
                                        });
                                    });
                                });
                            }(this));
                        };
                        BroadcastInfoController.prototype.destroyView = function () {
                            _super.prototype.destroyView.call(this);
                        };
                        BroadcastInfoController.prototype.onready = function () {
                            _super.prototype.onready.call(this);
                            this.bindListeners();
                        };
                        BroadcastInfoController.prototype.bindListeners = function () {
                            var streamContainer = $(".broadcast-stream");
                            var streamURL = streamContainer.attr("data-stream-url");
                            var streamTitle = streamContainer.attr("data-stream-title");
                            freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery(streamContainer, function () {
                                freeradios.utilities.audio.StreamPlayer.play(streamURL, streamTitle);
                            });
                        };
                        return BroadcastInfoController;
                    }(controller.MasterUpdatableController));
                    broadcasts.BroadcastInfoController = BroadcastInfoController;
                })(broadcasts = home.broadcasts || (home.broadcasts = {}));
            })(home = controller.home || (controller.home = {}));
        })(controller = presentation.controller || (presentation.controller = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var controller;
        (function (controller) {
            var home;
            (function (home) {
                var broadcasts;
                (function (broadcasts_1) {
                    var BroadcastController = (function (_super) {
                        __extends(BroadcastController, _super);
                        function BroadcastController(view, masterView) {
                            var _this = _super.call(this, "Senderdetails", "templates/home/broadcasts/broadcast.html", view, masterView) || this;
                            _this._broadcastsService = new freeradios.business.service.stationdetail.BroadcastsService();
                            _this._stationID = freeradios.utilities.navigation.URLParameters.getParameterNumber("station_id");
                            var dateTimeStamp = freeradios.utilities.navigation.URLParameters.getParameterNumber("date_timestamp");
                            _this._date = dateTimeStamp > 0 ? new Date(dateTimeStamp) : new Date();
                            return _this;
                        }
                        BroadcastController.prototype.createView = function (callback) {
                            var self = this;
                            _super.prototype.createView.call(this, function (view) {
                                self.updateViewAssignments(view, function () {
                                    callback(view);
                                });
                            });
                        };
                        BroadcastController.prototype.updateViewAssignments = function (view, finishCallback) {
                            (function (self) {
                                self._broadcastsService.getListForDayWithTimesForStation(self._stationID, self._date, function (broadcasts) {
                                    view.assign("stationID", self._stationID);
                                    view.assign("broadcastDate", self._date);
                                    view.assign("isBroadcastDayToday", self._isBroadcastDayToday());
                                    view.assign("broadcasts", broadcasts);
                                    finishCallback();
                                });
                            }(this));
                        };
                        BroadcastController.prototype.destroyView = function () {
                            _super.prototype.destroyView.call(this);
                        };
                        BroadcastController.prototype.onready = function () {
                            _super.prototype.onready.call(this);
                            this.bindListeners();
                        };
                        BroadcastController.prototype.bindListeners = function () {
                            (function (self) {
                                freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(".broadcast-navigation-arrow-back"), function () {
                                    self._switchDate(-1);
                                });
                                freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(".broadcast-navigation-arrow-forward"), function () {
                                    self._switchDate(1);
                                });
                            }(this));
                        };
                        BroadcastController.prototype._switchDate = function (daysToAdd) {
                            var nextDate = new Date(this._date.getTime() + (daysToAdd * 24 * 60 * 60 * 1000));
                            this._date = nextDate;
                            this.getRouter().setParameter("date_timestamp", this._date.getTime());
                            this._updateList();
                        };
                        BroadcastController.prototype._updateList = function () {
                            (function (self) {
                                self._broadcastsService.getListForDayWithTimesForStation(self._stationID, self._date, function (broadcasts) {
                                    var view = self.getView();
                                    view.assign("stationID", self._stationID);
                                    view.assign("broadcastDate", self._date);
                                    view.assign("isBroadcastDayToday", self._isBroadcastDayToday());
                                    view.assign("broadcasts", broadcasts);
                                    view.updateView("#list");
                                    self.bindListeners();
                                });
                            }(this));
                        };
                        BroadcastController.prototype._isBroadcastDayToday = function () {
                            var today = new Date();
                            var returnValue = this._date.getFullYear() === today.getFullYear()
                                && this._date.getMonth() === today.getMonth()
                                && this._date.getDate() === today.getDate();
                            return returnValue;
                        };
                        return BroadcastController;
                    }(controller.MasterUpdatableController));
                    broadcasts_1.BroadcastController = BroadcastController;
                })(broadcasts = home.broadcasts || (home.broadcasts = {}));
            })(home = controller.home || (controller.home = {}));
        })(controller = presentation.controller || (presentation.controller = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var business;
    (function (business) {
        var service;
        (function (service) {
            var stationdetail;
            (function (stationdetail) {
                var di = freeradios.utilities.di;
                var TransmitTimesService = (function () {
                    function TransmitTimesService(repository) {
                        this._repository = di.DIContainer.get("freeradios.business.contracts.stationdetail.ITransmitTimesLocalRepository", repository);
                    }
                    TransmitTimesService.prototype.getList = function (callback) {
                        this._repository.getList(callback);
                    };
                    TransmitTimesService.prototype.getForStation = function (stationID, callback) {
                        this._repository.getListByStationID(stationID, callback);
                    };
                    TransmitTimesService.prototype.getForBroadcast = function (stationID, broadcastID, callback) {
                        this._repository.getListByStationIDAndBroadcastID(stationID, broadcastID, callback);
                    };
                    return TransmitTimesService;
                }());
                stationdetail.TransmitTimesService = TransmitTimesService;
            })(stationdetail = service.stationdetail || (service.stationdetail = {}));
        })(service = business.service || (business.service = {}));
    })(business = freeradios.business || (freeradios.business = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var controller;
        (function (controller) {
            var home;
            (function (home) {
                var broadcasts;
                (function (broadcasts) {
                    var BroadcastDetailController = (function (_super) {
                        __extends(BroadcastDetailController, _super);
                        function BroadcastDetailController(view, masterView) {
                            var _this = _super.call(this, "Senderdetails", "templates/home/broadcasts/broadcastdetail.html", view, masterView) || this;
                            _this._favoritesService = new freeradios.business.service.favorites.BroadcastFavoritesService();
                            _this._broadcastsService = new freeradios.business.service.stationdetail.BroadcastsService();
                            _this._transmitTimesService = new freeradios.business.service.stationdetail.TransmitTimesService();
                            _this._categoriesService = new freeradios.business.service.stationdetail.CategoriesService();
                            _this._stationID = freeradios.utilities.navigation.URLParameters.getParameterNumber("station_id");
                            _this._broadcastsID = freeradios.utilities.navigation.URLParameters.getParameterNumber("broadcasts_id");
                            return _this;
                        }
                        BroadcastDetailController.prototype.createView = function (callback) {
                            var self = this;
                            _super.prototype.createView.call(this, function (view) {
                                self.updateViewAssignments(view, function () {
                                    callback(view);
                                });
                            });
                        };
                        BroadcastDetailController.prototype.updateViewAssignments = function (view, finishCallback) {
                            (function (self) {
                                self._broadcastsService.getSingle(self._stationID, self._broadcastsID, function (broadcast) {
                                    self._transmitTimesService.getForBroadcast(self._stationID, self._broadcastsID, function (transmitTimes) {
                                        transmitTimes = freeradios.utilities.date.TransmitTimesDateHelper.sortTransmitTimes(transmitTimes);
                                        self._categoriesService.getForBroadcast(self._stationID, self._broadcastsID, function (categories) {
                                            view.assign("stationID", self._stationID);
                                            view.assign("broadcastsID", self._broadcastsID);
                                            view.assign("broadcast", broadcast);
                                            view.assign("transmitTimes", transmitTimes);
                                            view.assign("categories", categories);
                                            finishCallback();
                                        });
                                    });
                                });
                            }(this));
                        };
                        BroadcastDetailController.prototype.destroyView = function () {
                            _super.prototype.destroyView.call(this);
                        };
                        BroadcastDetailController.prototype.onready = function () {
                            _super.prototype.onready.call(this);
                            this.bindListeners();
                        };
                        BroadcastDetailController.prototype.bindListeners = function () {
                            this._initFavoritesButton();
                            this._initFavoritesDialogue();
                            this._initAccordion();
                        };
                        BroadcastDetailController.prototype._initFavoritesButton = function () {
                            (function (self) {
                                freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(".addToFavorites"), function () {
                                    self._favoritesService.add(self._stationID, self._broadcastsID, function () {
                                        var dialog = document.getElementsByClassName("favorites-dialog")[0];
                                        dialog.style.display = "block";
                                    });
                                });
                            }(this));
                        };
                        BroadcastDetailController.prototype._initFavoritesDialogue = function () {
                            (function (self) {
                                freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(".closeDialogButton"), function () {
                                    var dialog = document.getElementsByClassName("favorites-dialog")[0];
                                    dialog.style.display = "none";
                                });
                            }(this));
                        };
                        BroadcastDetailController.prototype._initAccordion = function () {
                            (function (self) {
                                freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(".programInfo-banner"), function (e, target) {
                                    var banner = target.hasClass("programInfo-banner") ? target : target.parents(".programInfo-banner");
                                    self._toggleAccordion(banner.find(".programInfo-accordionOpen"));
                                });
                            }(this));
                            this._toggleAccordion($(".programInfo-accordionOpen[data-accordion-for-id='programInfo-detail']"), 0);
                        };
                        BroadcastDetailController.prototype._toggleAccordion = function (accordionButton, animationDuration) {
                            var openID = accordionButton.attr("data-accordion-for-id");
                            var openContainer = $("#" + openID);
                            if (openContainer.is(":visible")) {
                                $("#" + openID).slideUp(animationDuration);
                                accordionButton.attr("src", "img/03_dropdown/03.1_dropdown-arrow.png");
                            }
                            else {
                                $("#" + openID).slideDown(animationDuration);
                                accordionButton.attr("src", "img/03_dropdown/03.1_dropdown-arrow-active.png");
                                var otherAccordionElements = $(".programInfo-data").not("#" + openID);
                                otherAccordionElements.slideUp(animationDuration);
                                otherAccordionElements.prev(".programInfo-banner").find(".programInfo-accordionOpen").attr("src", "img/03_dropdown/03.1_dropdown-arrow.png");
                                this._scrollTo(0, animationDuration);
                            }
                        };
                        BroadcastDetailController.prototype._scrollTo = function (top, animationDuration) {
                            $("html,body").animate({
                                scrollTop: top
                            }, animationDuration, "swing");
                        };
                        return BroadcastDetailController;
                    }(controller.MasterUpdatableController));
                    broadcasts.BroadcastDetailController = BroadcastDetailController;
                })(broadcasts = home.broadcasts || (home.broadcasts = {}));
            })(home = controller.home || (controller.home = {}));
        })(controller = presentation.controller || (presentation.controller = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var controller;
        (function (controller) {
            var home;
            (function (home) {
                var broadcasts;
                (function (broadcasts) {
                    var BroadcastContactController = (function (_super) {
                        __extends(BroadcastContactController, _super);
                        function BroadcastContactController(view, masterView) {
                            var _this = _super.call(this, "Senderdetails", "templates/home/broadcasts/broadcastcontact.html", view, masterView) || this;
                            _this._stationDetailService = new freeradios.business.service.stationdetail.StationDetailService();
                            _this._stationID = freeradios.utilities.navigation.URLParameters.getParameterNumber("station_id");
                            return _this;
                        }
                        BroadcastContactController.prototype.createView = function (callback) {
                            var self = this;
                            _super.prototype.createView.call(this, function (view) {
                                self.updateViewAssignments(view, function () {
                                    callback(view);
                                });
                            });
                        };
                        BroadcastContactController.prototype.updateViewAssignments = function (view, finishCallback) {
                            (function (self) {
                                self._stationDetailService.getForStation(self._stationID, function (stationDetail) {
                                    view.assign("stationDetail", stationDetail);
                                    view.assign("stationID", self._stationID);
                                    finishCallback();
                                });
                            }(this));
                        };
                        BroadcastContactController.prototype.bindListeners = function () {
                        };
                        BroadcastContactController.prototype.destroyView = function () {
                            _super.prototype.destroyView.call(this);
                        };
                        BroadcastContactController.prototype.onready = function () {
                            _super.prototype.onready.call(this);
                        };
                        return BroadcastContactController;
                    }(controller.MasterUpdatableController));
                    broadcasts.BroadcastContactController = BroadcastContactController;
                })(broadcasts = home.broadcasts || (home.broadcasts = {}));
            })(home = controller.home || (controller.home = {}));
        })(controller = presentation.controller || (presentation.controller = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var di = freeradios.utilities.di;
    var Config = (function () {
        function Config() {
        }
        Config.initErrorHandling = function () {
            window.onerror = function (message, filename, lineNumber) {
                alert(message);
            };
        };
        Config.createBindings = function () {
            this._createDALToBusinessLayerBindings();
            this._createPresentationLayerBindings();
        };
        Config.registerRoutes = function (router) {
            var slideTransition = new freeradios.presentation.transition.standard.StandardSlideTransition();
            router.registerRoute("map", new freeradios.presentation.router.RouteEntry(freeradios.presentation.controller.home.MapController, slideTransition));
            router.registerRoute("list", new freeradios.presentation.router.RouteEntry(freeradios.presentation.controller.home.ListController, slideTransition));
            router.registerRoute("search", new freeradios.presentation.router.RouteEntry(freeradios.presentation.controller.home.SearchController, slideTransition));
            router.registerRoute("favorite", new freeradios.presentation.router.RouteEntry(freeradios.presentation.controller.home.FavoriteController, slideTransition));
            router.registerRoute("locate", new freeradios.presentation.router.RouteEntry(freeradios.presentation.controller.home.LocateController, slideTransition));
            router.registerRoute("info", new freeradios.presentation.router.RouteEntry(freeradios.presentation.controller.home.InfoController, slideTransition));
            router.registerRoute("schedule", new freeradios.presentation.router.RouteEntry(freeradios.presentation.controller.home.ScheduleController, slideTransition));
            router.registerRoute("scheduledetail", new freeradios.presentation.router.RouteEntry(freeradios.presentation.controller.home.ScheduleDetailController, slideTransition));
            router.registerRoute("broadcastinfo", new freeradios.presentation.router.RouteEntry(freeradios.presentation.controller.home.broadcasts.BroadcastInfoController, slideTransition));
            router.registerRoute("broadcast", new freeradios.presentation.router.RouteEntry(freeradios.presentation.controller.home.broadcasts.BroadcastController, slideTransition));
            router.registerRoute("broadcastdetail", new freeradios.presentation.router.RouteEntry(freeradios.presentation.controller.home.broadcasts.BroadcastDetailController, slideTransition));
            router.registerRoute("broadcastcontact", new freeradios.presentation.router.RouteEntry(freeradios.presentation.controller.home.broadcasts.BroadcastContactController, slideTransition));
        };
        Config._createDALToBusinessLayerBindings = function () {
            if (freeradios.utilities.runtime.RuntimeInfo.isExecutingInBrowser()) {
                this._createMockDALBindings();
            }
            else {
                this._createRealDALBindings();
            }
        };
        Config._createMockDALBindings = function () {
            di.DIContainer.bindConstructor("freeradios.business.contracts.station.IStationWebRepository", freeradios.dal_web_mock.station.MockStationWebRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.station.IStationLocalRepository", freeradios.dal_local_mock.station.MockStationLocalRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.stationdetail.IStationDetailWebRepository", freeradios.dal_web_mock.stationdetail.MockStationDetailWebRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.stationdetail.IBroadcastsLocalRepository", freeradios.dal_local_mock.stationdetail.MockBroadcastsLocalRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.stationdetail.IBroadcasts2CategoriesLocalRepository", freeradios.dal_local_mock.stationdetail.MockBroadcasts2CategoriesLocalRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.stationdetail.ICategoriesLocalRepository", freeradios.dal_local_mock.stationdetail.MockCategoriesLocalRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.stationdetail.IMediaChannelsLocalRepository", freeradios.dal_local_mock.stationdetail.MockMediaChannelsLocalRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.stationdetail.IStationDetailLocalRepository", freeradios.dal_local_mock.stationdetail.MockStationDetailLocalRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.stationdetail.ITransmitTimesLocalRepository", freeradios.dal_local_mock.stationdetail.MockTransmitTimeslLocalRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.stationdetail.IWebstreamsLocalRepository", freeradios.dal_local_mock.stationdetail.MockWebstreamsEntitylLocalRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.favorites.IBroadcastsFavoritesLocalRepository", freeradios.dal_local_mock.favorites.MockFavoritesLocalRepository);
        };
        Config._createRealDALBindings = function () {
            di.DIContainer.bindValue("freeradios.utilities.database.ISQLContext", new freeradios.utilities.database.cordovasqlitestorage.CSSDBContext("database.sqlite"));
            di.DIContainer.bindFactory("freeradios.business.contracts.station.IStationWebRepository", function () {
                return new freeradios.dal_web.station.AJAXStationWebRepository(Config._metaXMLURL);
            });
            di.DIContainer.bindConstructor("freeradios.business.contracts.station.IStationLocalRepository", freeradios.dal_local.station.SQLStationLocalRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.stationdetail.IStationDetailWebRepository", freeradios.dal_web.stationdetail.AJAXStationDetailWebRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.stationdetail.IBroadcastsLocalRepository", freeradios.dal_local.stationdetail.SQLBroadcastsLocalRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.stationdetail.IBroadcasts2CategoriesLocalRepository", freeradios.dal_local.stationdetail.SQLBroadcasts2CategoriesLocalRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.stationdetail.ICategoriesLocalRepository", freeradios.dal_local.stationdetail.SQLCategoriesLocalRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.stationdetail.IMediaChannelsLocalRepository", freeradios.dal_local.stationdetail.SQLMediaChannelsLocalRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.stationdetail.IStationDetailLocalRepository", freeradios.dal_local.stationdetail.SQLStationDetailLocalRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.stationdetail.ITransmitTimesLocalRepository", freeradios.dal_local.stationdetail.SQLTransmitTimesLocalRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.stationdetail.IWebstreamsLocalRepository", freeradios.dal_local.stationdetail.SQLWebstreamsLocalRepository);
            di.DIContainer.bindConstructor("freeradios.business.contracts.favorites.IBroadcastsFavoritesLocalRepository", freeradios.dal_local.favorites.SQLFavoritesLocalRepository);
        };
        Config._createPresentationLayerBindings = function () {
            di.DIContainer.bindConstructor("freeradios.presentation.view.IView", freeradios.presentation.view.handlebarsview.HandlebarsView);
            di.DIContainer.bindValue("freeradios.presentation.location.GeolocationHelper", new freeradios.presentation.location.GeolocationHelper(Config._geolocationUpdateInterval));
        };
        Config._metaXMLURL = "http://app.freefm.de/meta.xml";
        Config._geolocationUpdateInterval = 3000;
        return Config;
    }());
    freeradios.Config = Config;
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var view;
        (function (view_2) {
            var di = freeradios.utilities.di;
            var TemplatePreloader = (function () {
                function TemplatePreloader(view) {
                    this._view = di.DIContainer.get("freeradios.presentation.view.IView", view);
                }
                TemplatePreloader.prototype.preloadTemplate = function (path, partSelectors) {
                    this._view.preloadTemplate(path, partSelectors);
                };
                return TemplatePreloader;
            }());
            view_2.TemplatePreloader = TemplatePreloader;
        })(view = presentation.view || (presentation.view = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var router;
        (function (router) {
            var standard;
            (function (standard) {
                var StandardHistoryEntry = (function () {
                    function StandardHistoryEntry(route, url) {
                        this._route = route;
                        this._url = url;
                    }
                    StandardHistoryEntry.prototype.getRoute = function () {
                        return this._route;
                    };
                    StandardHistoryEntry.prototype.getURL = function () {
                        return this._url;
                    };
                    return StandardHistoryEntry;
                }());
                standard.StandardHistoryEntry = StandardHistoryEntry;
            })(standard = router.standard || (router.standard = {}));
        })(router = presentation.router || (presentation.router = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var router;
        (function (router) {
            var standard;
            (function (standard) {
                var StandardHistory = (function () {
                    function StandardHistory() {
                        this._entries = new Array();
                    }
                    StandardHistory.prototype.push = function (entry) {
                        this._entries.push(entry);
                    };
                    StandardHistory.prototype.pop = function () {
                        return this._entries.pop();
                    };
                    StandardHistory.prototype.hasEntries = function () {
                        return this._entries.length > 0;
                    };
                    return StandardHistory;
                }());
                standard.StandardHistory = StandardHistory;
            })(standard = router.standard || (router.standard = {}));
        })(router = presentation.router || (presentation.router = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var utilities;
    (function (utilities) {
        var runtime;
        (function (runtime) {
            var SplashScreen = (function () {
                function SplashScreen() {
                }
                SplashScreen.hide = function () {
                    if (!runtime.RuntimeInfo.isExecutingInBrowser()) {
                        navigator.splashscreen.hide();
                    }
                };
                return SplashScreen;
            }());
            runtime.SplashScreen = SplashScreen;
        })(runtime = utilities.runtime || (utilities.runtime = {}));
    })(utilities = freeradios.utilities || (freeradios.utilities = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var router;
        (function (router) {
            var standard;
            (function (standard) {
                var StandardRouter = (function () {
                    function StandardRouter() {
                        this._routes = {};
                        this._lastURL = null;
                        this._lastController = null;
                        this._lastHTML = null;
                        this._history = new standard.StandardHistory();
                        this._lastRoute = null;
                        this._createListeners();
                    }
                    StandardRouter.prototype.setMainContainerID = function (mainContainerID) {
                        this._mainContainerID = mainContainerID;
                        this._mainContainer = $("#" + this._mainContainerID);
                    };
                    StandardRouter.prototype.registerRoute = function (name, route) {
                        this._routes[name] = route;
                    };
                    StandardRouter.prototype.getHistory = function () {
                        return this._history;
                    };
                    StandardRouter.prototype.parseLinks = function (partSelector) {
                        this._parseInternalLinks(partSelector);
                        this._parseWebTelAndEMailLinks(partSelector);
                    };
                    StandardRouter.prototype.setParameter = function (key, value) {
                        if (this._lastRoute !== null) {
                            this._lastRoute.setParameter(key, value);
                        }
                    };
                    StandardRouter.prototype._parseInternalLinks = function (partSelector) {
                        var containerToParse = partSelector ? $(partSelector) : this._mainContainer;
                        (function (self) {
                            containerToParse.find("*[data-href]").each(function () {
                                var link = $(this);
                                freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery(link, function () {
                                    self.followURL(link.attr("data-href"));
                                });
                            });
                            containerToParse.find("*[data-back-link]").each(function () {
                                freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery($(this), function () {
                                    self.navigateBack();
                                });
                            });
                        }(this));
                    };
                    StandardRouter.prototype._parseWebTelAndEMailLinks = function (partSelector) {
                        var containerToParse = partSelector ? $(partSelector) : this._mainContainer;
                        containerToParse.find("a[href]").each(function () {
                            var link = $(this);
                            var target = link.attr("target");
                            var href = link.attr("href");
                            if (href && href.indexOf("mailto:") === 0) {
                                freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery(link, function () {
                                    var address = href.substr(7).replace(/[ \t\r\n]/g, "");
                                    freeradios.utilities.web.LinkHandler.openEMailClient(address);
                                    link.attr("href", "javascript:;");
                                });
                            }
                            if (href && href.indexOf("tel:") === 0) {
                                freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery(link, function () {
                                    var phoneNumber = href.substr(4).replace(/[ \t\r\n]/g, "");
                                    freeradios.utilities.web.LinkHandler.callPhoneNumber(phoneNumber);
                                    link.attr("href", "javascript:;");
                                });
                            }
                            else if (href && target && target.toLowerCase() === "_blank") {
                                freeradios.utilities.runtime.PlatformEvent.bindClickListenerJQuery(link, function () {
                                    freeradios.utilities.web.LinkHandler.openURLInBrowser(href);
                                    link.attr("href", "javascript:;");
                                    link.removeAttr("target");
                                });
                            }
                        });
                    };
                    StandardRouter.prototype.start = function (url) {
                        var hash = window.location.hash;
                        if (hash.length > 0) {
                            var url = hash;
                            while (url.indexOf("#") === 0) {
                                url = url.substr(1);
                            }
                        }
                        this.followURL(url);
                    };
                    StandardRouter.prototype.followURL = function (url) {
                        if (this._mainContainerID === undefined) {
                            throw "A main container ID must be set for routers.";
                        }
                        var route = this._routes[freeradios.utilities.navigation.URLParameters.getRouteNameFromURL(url)];
                        if (route !== undefined && this._lastURL !== url) {
                            this._performURLChange(route, url);
                        }
                    };
                    StandardRouter.prototype.navigateHome = function () {
                    };
                    StandardRouter.prototype.navigateBack = function () {
                        if (this._history.hasEntries()) {
                            var entry = this._history.pop();
                            var url = entry.getRoute().getURL(entry.getURL());
                            this._performURLChange(entry.getRoute(), url, true);
                        }
                        else if (freeradios.utilities.runtime.RuntimeInfo.isAndroid()) {
                            navigator.app.exitApp();
                        }
                    };
                    StandardRouter.prototype._performURLChange = function (route, url, isBackNavigation) {
                        window.location.hash = url;
                        var nextController = route.instanceController();
                        nextController.setRouter(this);
                        if (this._lastController !== null && !isBackNavigation) {
                            this._history.push(new standard.StandardHistoryEntry(this._lastRoute, this._lastURL));
                        }
                        (function (self) {
                            nextController.createView(function (view) {
                                view.render(function (html) {
                                    view.addUpdateCallback(function (partSelector) {
                                        self.parseLinks(partSelector);
                                    });
                                    self._performPageTransition(route, nextController, html, url, isBackNavigation);
                                });
                            });
                        }(this));
                    };
                    StandardRouter.prototype._performPageTransition = function (route, nextController, html, url, isBackNavigation) {
                        if (this._lastController === null) {
                            this._mainContainer.append(html);
                            this._finishControllerChange(route, nextController, html, url, isBackNavigation === true);
                        }
                        else {
                            (function (self) {
                                route.getTransition().play(self._mainContainerID, self._lastHTML, html, isBackNavigation === true, function () {
                                    self._finishControllerChange(route, nextController, html, url, isBackNavigation === true);
                                });
                            }(this));
                        }
                    };
                    StandardRouter.prototype._finishControllerChange = function (route, nextController, html, url, isBackNavigation) {
                        if (this._lastController !== null) {
                            this._lastController.destroyView();
                        }
                        this.parseLinks();
                        nextController.onready();
                        this._lastHTML = html;
                        this._lastURL = url;
                        this._lastRoute = route;
                        if (this._lastController === null) {
                            freeradios.utilities.runtime.SplashScreen.hide();
                        }
                        this._lastController = nextController;
                    };
                    StandardRouter.prototype._createListeners = function () {
                        (function (self) {
                            document.addEventListener("backbutton", function () {
                                self.navigateBack();
                            }, false);
                        }(this));
                    };
                    return StandardRouter;
                }());
                standard.StandardRouter = StandardRouter;
            })(standard = router.standard || (router.standard = {}));
        })(router = presentation.router || (presentation.router = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var presentation;
    (function (presentation) {
        var router;
        (function (router_1) {
            var RouterManager = (function () {
                function RouterManager(mainContainerID, router) {
                    this._mainContainerID = mainContainerID;
                    this._router = router;
                    this._router.setMainContainerID(this._mainContainerID);
                }
                RouterManager.prototype.startRouting = function (firstURL) {
                    this._router.start(firstURL);
                };
                return RouterManager;
            }());
            router_1.RouterManager = RouterManager;
        })(router = presentation.router || (presentation.router = {}));
    })(presentation = freeradios.presentation || (freeradios.presentation = {}));
})(freeradios || (freeradios = {}));
var freeradios;
(function (freeradios) {
    var Application = (function () {
        function Application() {
        }
        Application.main = function () {
            if (freeradios.utilities.runtime.RuntimeInfo.isExecutingInBrowser()) {
                $(document).ready(Application._onDeviceReady);
            }
            else {
                document.addEventListener("deviceready", Application._onDeviceReady, false);
            }
        };
        Application._onDeviceReady = function () {
            freeradios.utilities.runtime.RuntimeInfo.initDevice();
            var router = new freeradios.presentation.router.standard.StandardRouter();
            freeradios.Config.initErrorHandling();
            freeradios.Config.createBindings();
            freeradios.Config.registerRoutes(router);
            var routerManager = new freeradios.presentation.router.RouterManager("container", router);
            routerManager.startRouting("map");
            Application._initSync();
            Application._preloadTemplates();
        };
        Application._initSync = function () {
            setTimeout(function () {
                freeradios.presentation.sync.SyncManager.sync();
            }, 1500);
        };
        Application._preloadTemplates = function () {
            setTimeout(function () {
                var templateLoader = new freeradios.presentation.view.TemplatePreloader();
                templateLoader.preloadTemplate("templates/home/list.html", ["#stationList"]);
                templateLoader.preloadTemplate("templates/home/broadcasts/broadcastinfo.html");
                templateLoader.preloadTemplate("templates/home/broadcasts/broadcast.html", ["#list"]);
                templateLoader.preloadTemplate("templates/home/broadcasts/broadcastcontact.html");
                templateLoader.preloadTemplate("templates/home/broadcasts/broadcastdetail.html");
                templateLoader.preloadTemplate("templates/home/schedule.html", ["#list"]);
                templateLoader.preloadTemplate("templates/home/scheduledetail.html");
                templateLoader.preloadTemplate("templates/home/search.html", ["#listStations", "#listBroadcasts"]);
                templateLoader.preloadTemplate("templates/home/favorite.html");
                templateLoader.preloadTemplate("templates/home/locate.html");
                templateLoader.preloadTemplate("templates/home/info.html");
            }, 1500);
        };
        return Application;
    }());
    freeradios.Application = Application;
})(freeradios || (freeradios = {}));
freeradios.Application.main();
